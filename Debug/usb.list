
usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c60c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800c7ec  0800c7ec  0001c7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae0  0800cae0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800cae0  0800cae0  0001cae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae8  0800cae8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800caec  0800caec  0001caec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800caf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000112f4  20000090  0800cb80  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011384  0800cb80  00021384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000264b0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fc8  00000000  00000000  00046570  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0004b538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  0004c860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ebd5  00000000  00000000  0004d990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000175c9  00000000  00000000  0007c565  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117add  00000000  00000000  00093b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ab60b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  001ab688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000090 	.word	0x20000090
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c7d4 	.word	0x0800c7d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000094 	.word	0x20000094
 800021c:	0800c7d4 	.word	0x0800c7d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <no_usb_detected>:
  * @param  None
  * @retval 1 if timer expires
  * 		0 if timer not expired
  */
unsigned char no_usb_detected(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	if((overflow >= USB_WAIT_PERIOD) && (detetcted_flag == 0))
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <no_usb_detected+0x28>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d905      	bls.n	80005dc <no_usb_detected+0x1c>
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <no_usb_detected+0x2c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <no_usb_detected+0x1c>
	{
		return 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <no_usb_detected+0x1e>
	}
	else
	{
		return 0;
 80005dc:	2300      	movs	r3, #0
	}
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20010814 	.word	0x20010814
 80005ec:	200100ac 	.word	0x200100ac

080005f0 <COMMAND_PREPARE_USB>:
  * @param  None
  * @retval 0 success
  * 		1 fail
  */
char COMMAND_PREPARE_USB(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	if(f_mount(&myUsbFatFS, (TCHAR const*)USBH_Path, 0) == FR_OK)
 80005f4:	2200      	movs	r2, #0
 80005f6:	4906      	ldr	r1, [pc, #24]	; (8000610 <COMMAND_PREPARE_USB+0x20>)
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <COMMAND_PREPARE_USB+0x24>)
 80005fa:	f00a f965 	bl	800a8c8 <f_mount>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d101      	bne.n	8000608 <COMMAND_PREPARE_USB+0x18>
	{
		return 0;
 8000604:	2300      	movs	r3, #0
 8000606:	e000      	b.n	800060a <COMMAND_PREPARE_USB+0x1a>
	}
	else
	{
		return -1;
 8000608:	23ff      	movs	r3, #255	; 0xff
	}
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20010c9c 	.word	0x20010c9c
 8000614:	2001055c 	.word	0x2001055c

08000618 <COMMAND_DOWNLOAD>:
  * @brief  Downloads the user application from USB to internal flash
  * @param  None
  * @retval None
  */
void COMMAND_DOWNLOAD(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
	FILINFO file_info;
	if (f_open(&fileR, DOWNLOAD_FILENAME, FA_READ) == FR_OK)
 800061e:	2201      	movs	r2, #1
 8000620:	491a      	ldr	r1, [pc, #104]	; (800068c <COMMAND_DOWNLOAD+0x74>)
 8000622:	481b      	ldr	r0, [pc, #108]	; (8000690 <COMMAND_DOWNLOAD+0x78>)
 8000624:	f00a f996 	bl	800a954 <f_open>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d12a      	bne.n	8000684 <COMMAND_DOWNLOAD+0x6c>
	{
		detetcted_flag = 1;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <COMMAND_DOWNLOAD+0x7c>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
		memset(&file_info, 0 , sizeof(file_info));
 8000634:	463b      	mov	r3, r7
 8000636:	2218      	movs	r2, #24
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00b f979 	bl	800b932 <memset>
		if(f_stat(DOWNLOAD_FILENAME, &file_info) == FR_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <COMMAND_DOWNLOAD+0x74>)
 8000646:	f00a fd2a 	bl	800b09e <f_stat>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d119      	bne.n	8000684 <COMMAND_DOWNLOAD+0x6c>
		{
			if (file_info.fsize > (FLASH_END_ADDRESS - APPLICATION_START_ADDRESS))
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000656:	d215      	bcs.n	8000684 <COMMAND_DOWNLOAD+0x6c>
			{
				;
			}
			else
			{
				Erase_Flash();
 8000658:	f000 f84c 	bl	80006f4 <Erase_Flash>
				COMMAND_ProgramFlashMemory();
 800065c:	f000 f820 	bl	80006a0 <COMMAND_ProgramFlashMemory>
				printf("Flashing completed..\r\nPlease remove the USB stick\r\n");
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <COMMAND_DOWNLOAD+0x80>)
 8000662:	f00b fa8b 	bl	800bb7c <puts>
				BootAppImage();
 8000666:	f00b f8db 	bl	800b820 <BootAppImage>
				f_close (&fileR);
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <COMMAND_DOWNLOAD+0x78>)
 800066c:	f00a fced 	bl	800b04a <f_close>
				HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000674:	f000 fc08 	bl	8000e88 <HAL_Delay>
				f_mount(NULL, (TCHAR const*)USBH_Path, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <COMMAND_DOWNLOAD+0x84>)
 800067c:	2000      	movs	r0, #0
 800067e:	f00a f923 	bl	800a8c8 <f_mount>
		{
			;
		}
	}

	return;
 8000682:	bf00      	nop
 8000684:	bf00      	nop

}
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	0800c7ec 	.word	0x0800c7ec
 8000690:	200100f4 	.word	0x200100f4
 8000694:	200100ac 	.word	0x200100ac
 8000698:	0800c7f8 	.word	0x0800c7f8
 800069c:	20010c9c 	.word	0x20010c9c

080006a0 <COMMAND_ProgramFlashMemory>:
  * @brief  Programs the internal Flash memory
  * @param  None
  * @retval None
  */
void COMMAND_ProgramFlashMemory(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	uint16_t BytesRead;

	struct flash_write_config wconfig;
    f_read (&fileR, RAM_Buf, BUFFER_SIZE, (void *)&BytesRead);
 80006a6:	f107 030e 	add.w	r3, r7, #14
 80006aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <COMMAND_ProgramFlashMemory+0x44>)
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <COMMAND_ProgramFlashMemory+0x48>)
 80006b2:	f00a fb0d 	bl	800acd0 <f_read>
    if (BytesRead < BUFFER_SIZE)
    {
    		BOOT_LOG("TRANSFERING APPLICATION IMAGE\r\n");
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <COMMAND_ProgramFlashMemory+0x4c>)
 80006b8:	f00b f9ec 	bl	800ba94 <iprintf>
			memset(&wconfig, 0, sizeof(wconfig));
 80006bc:	463b      	mov	r3, r7
 80006be:	220c      	movs	r2, #12
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00b f935 	bl	800b932 <memset>
			wconfig.address = APPLICATION_START_ADDRESS;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <COMMAND_ProgramFlashMemory+0x50>)
 80006ca:	603b      	str	r3, [r7, #0]
			wconfig.data = RAM_Buf;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <COMMAND_ProgramFlashMemory+0x44>)
 80006ce:	607b      	str	r3, [r7, #4]
			wconfig.data_length = BytesRead;
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	60bb      	str	r3, [r7, #8]
			Write_To_Flash(&wconfig);
 80006d4:	463b      	mov	r3, r7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f830 	bl	800073c <Write_To_Flash>
    }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	200100f4 	.word	0x200100f4
 80006ec:	0800c82c 	.word	0x0800c82c
 80006f0:	08020000 	.word	0x08020000

080006f4 <Erase_Flash>:
#include <stdio.h>
#include <string.h>


HAL_StatusTypeDef Erase_Flash(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
	uint32_t FirstSector = 0, NbOfSectors = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
	uint32_t SECTORError = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

	FLASH_EraseInitTypeDef EraseInitStruct;

	FirstSector = APPLICATION_START_SECTOR;
 8000706:	2305      	movs	r3, #5
 8000708:	61fb      	str	r3, [r7, #28]
	NbOfSectors = TOTAL_APPLICATION_SECTOR;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector        = FirstSector;
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	60fb      	str	r3, [r7, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800071e:	f107 0214 	add.w	r2, r7, #20
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fea8 	bl	800147c <HAL_FLASHEx_Erase>
	{
	   ;
	}

	HAL_FLASH_Lock();
 800072c:	f000 fd5e 	bl	80011ec <HAL_FLASH_Lock>
	return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <Write_To_Flash>:


HAL_StatusTypeDef Write_To_Flash(struct flash_write_config * configuration)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef flashRetStatus = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	75fb      	strb	r3, [r7, #23]
	uint32_t len = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
	uint32_t data = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
	if(configuration)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d034      	beq.n	80007c0 <Write_To_Flash+0x84>
	{
		if(Erase_Flash() == HAL_OK)
 8000756:	f7ff ffcd 	bl	80006f4 <Erase_Flash>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d12c      	bne.n	80007ba <Write_To_Flash+0x7e>
		{
			HAL_FLASH_Unlock();
 8000760:	f000 fd22 	bl	80011a8 <HAL_FLASH_Unlock>
			while(len < configuration->data_length)
 8000764:	e023      	b.n	80007ae <Write_To_Flash+0x72>
			{
				memcpy(&data, configuration->data, WORD_SIZE);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]

				len += sizeof(uint32_t);
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	3304      	adds	r3, #4
 8000772:	613b      	str	r3, [r7, #16]
				configuration->data = configuration->data + WORD_SIZE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	1d1a      	adds	r2, r3, #4
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	605a      	str	r2, [r3, #4]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, configuration->address, data) == HAL_OK)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6819      	ldr	r1, [r3, #0]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f04f 0400 	mov.w	r4, #0
 8000788:	461a      	mov	r2, r3
 800078a:	4623      	mov	r3, r4
 800078c:	2002      	movs	r0, #2
 800078e:	f000 fcaf 	bl	80010f0 <HAL_FLASH_Program>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <Write_To_Flash+0x68>
				{
					configuration->address += WORD_SIZE;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1d1a      	adds	r2, r3, #4
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	e004      	b.n	80007ae <Write_To_Flash+0x72>
				}
				else
				{
					printf("flash write error\r\n");
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <Write_To_Flash+0x98>)
 80007a6:	f00b f9e9 	bl	800bb7c <puts>
					flashRetStatus = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	75fb      	strb	r3, [r7, #23]
			while(len < configuration->data_length)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3d6      	bcc.n	8000766 <Write_To_Flash+0x2a>
 80007b8:	e004      	b.n	80007c4 <Write_To_Flash+0x88>
				}
			}
		}
		else
		{
			flashRetStatus = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	75fb      	strb	r3, [r7, #23]
 80007be:	e001      	b.n	80007c4 <Write_To_Flash+0x88>
		}
	}
	else
	{
		flashRetStatus = HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	75fb      	strb	r3, [r7, #23]
	}

	HAL_FLASH_Lock();
 80007c4:	f000 fd12 	bl	80011ec <HAL_FLASH_Lock>
	return flashRetStatus;
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	0800c87c 	.word	0x0800c87c

080007d8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 80007e0:	1d39      	adds	r1, r7, #4
 80007e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e6:	2201      	movs	r2, #1
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <__io_putchar+0x20>)
 80007ea:	f003 ff2b 	bl	8004644 <HAL_UART_Transmit>

  return ch;
 80007ee:	687b      	ldr	r3, [r7, #4]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20010790 	.word	0x20010790

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fae5 	bl	8000dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f830 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f8ec 	bl	80009e4 <MX_GPIO_Init>
  MX_FATFS_Init();
 800080c:	f005 fabe 	bl	8005d8c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000810:	f00a fcda 	bl	800b1c8 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000814:	f000 f8b6 	bl	8000984 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	BOOT_LOG("USB BOOTLOADER..\r\n");
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <main+0x58>)
 800081a:	f00b f93b 	bl	800ba94 <iprintf>
	printf("Please insert USB stick in 10 seconds\r\n");
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <main+0x5c>)
 8000820:	f00b f9ac 	bl	800bb7c <puts>
	while(1)
	{
		MX_USB_HOST_Process();
 8000824:	f00a fcf6 	bl	800b214 <MX_USB_HOST_Process>
		USBEventHandler();
 8000828:	f000 f91a 	bl	8000a60 <USBEventHandler>
		if(no_usb_detected())
 800082c:	f7ff fec8 	bl	80005c0 <no_usb_detected>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f6      	beq.n	8000824 <main+0x28>
		{
			printf("No USB stick found..");
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <main+0x60>)
 8000838:	f00b f92c 	bl	800ba94 <iprintf>
			printf("Exiting USB BOOTLOADER\r\n");
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <main+0x64>)
 800083e:	f00b f99d 	bl	800bb7c <puts>
			BootAppImage();
 8000842:	f00a ffed 	bl	800b820 <BootAppImage>
			printf("starting user application\r\n");
 8000846:	4807      	ldr	r0, [pc, #28]	; (8000864 <main+0x68>)
 8000848:	f00b f998 	bl	800bb7c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800084c:	f00a fce2 	bl	800b214 <MX_USB_HOST_Process>
 8000850:	e7fc      	b.n	800084c <main+0x50>
 8000852:	bf00      	nop
 8000854:	0800c890 	.word	0x0800c890
 8000858:	0800c8ac 	.word	0x0800c8ac
 800085c:	0800c8d4 	.word	0x0800c8d4
 8000860:	0800c8ec 	.word	0x0800c8ec
 8000864:	0800c904 	.word	0x0800c904

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0b4      	sub	sp, #208	; 0xd0
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00b f85b 	bl	800b932 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f00b f84c 	bl	800b932 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <SystemClock_Config+0x110>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a36      	ldr	r2, [pc, #216]	; (8000978 <SystemClock_Config+0x110>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <SystemClock_Config+0x110>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <SystemClock_Config+0x114>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ba:	4a30      	ldr	r2, [pc, #192]	; (800097c <SystemClock_Config+0x114>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <SystemClock_Config+0x114>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ce:	2302      	movs	r3, #2
 80008d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008da:	2310      	movs	r3, #16
 80008dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008ec:	230f      	movs	r3, #15
 80008ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 135;
 80008f2:	2387      	movs	r3, #135	; 0x87
 80008f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008fe:	2303      	movs	r3, #3
 8000900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fe8d 	bl	8003628 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000914:	f000 f8c6 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000936:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f003 f917 	bl	8003b70 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000948:	f000 f8ac 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_CLK48;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <SystemClock_Config+0x118>)
 800094e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000950:	2300      	movs	r3, #0
 8000952:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fad8 	bl	8003f14 <HAL_RCCEx_PeriphCLKConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800096a:	f000 f89b 	bl	8000aa4 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	37d0      	adds	r7, #208	; 0xd0
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000
 8000980:	00200200 	.word	0x00200200

08000984 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_UART4_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_UART4_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_UART4_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_UART4_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_UART4_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_UART4_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_UART4_Init+0x58>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_UART4_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_UART4_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_UART4_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_UART4_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_UART4_Init+0x58>)
 80009c8:	f003 fdee 	bl	80045a8 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f867 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20010790 	.word	0x20010790
 80009e0:	40004c00 	.word	0x40004c00

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_GPIO_Init+0x74>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <MX_GPIO_Init+0x74>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_GPIO_Init+0x74>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_GPIO_Init+0x74>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <MX_GPIO_Init+0x74>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_GPIO_Init+0x74>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <MX_GPIO_Init+0x78>)
 8000a30:	f000 ff98 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_GPIO_Init+0x78>)
 8000a4c:	f000 fdf0 	bl	8001630 <HAL_GPIO_Init>

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020800 	.word	0x40020800

08000a60 <USBEventHandler>:

/* USER CODE BEGIN 4 */
void USBEventHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	switch(Appli_state)
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <USBEventHandler+0x3c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d815      	bhi.n	8000a98 <USBEventHandler+0x38>
 8000a6c:	a201      	add	r2, pc, #4	; (adr r2, 8000a74 <USBEventHandler+0x14>)
 8000a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a72:	bf00      	nop
 8000a74:	08000a97 	.word	0x08000a97
 8000a78:	08000a85 	.word	0x08000a85
 8000a7c:	08000a8b 	.word	0x08000a8b
 8000a80:	08000a97 	.word	0x08000a97
	{
		case APPLICATION_IDLE:
			break;

		case APPLICATION_START:
			if(COMMAND_PREPARE_USB() == 0)
 8000a84:	f7ff fdb4 	bl	80005f0 <COMMAND_PREPARE_USB>
			{
				//
			}
			break;
 8000a88:	e006      	b.n	8000a98 <USBEventHandler+0x38>

		case APPLICATION_READY:
			BOOT_LOG("PREPARING TO DOWNLOAD APPLICATION IMAGE\r\n");
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <USBEventHandler+0x40>)
 8000a8c:	f00b f802 	bl	800ba94 <iprintf>
			COMMAND_DOWNLOAD();
 8000a90:	f7ff fdc2 	bl	8000618 <COMMAND_DOWNLOAD>
			break;
 8000a94:	e000      	b.n	8000a98 <USBEventHandler+0x38>
			break;
 8000a96:	bf00      	nop

		case APPLICATION_DISCONNECT:
			//
			break;
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200100e8 	.word	0x200100e8
 8000aa0:	0800c920 	.word	0x0800c920

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d127      	bne.n	8000b6e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_MspInit+0x80>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_UART_MspInit+0x84>)
 8000b6a:	f000 fd61 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004c00 	.word	0x40004c00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f936 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(overflow < USB_WAIT_PERIOD)
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SysTick_Handler+0x24>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d805      	bhi.n	8000bf4 <SysTick_Handler+0x20>
  {
	  overflow++;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <SysTick_Handler+0x24>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b01      	ldr	r3, [pc, #4]	; (8000bf8 <SysTick_Handler+0x24>)
 8000bf2:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20010814 	.word	0x20010814

08000bfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <OTG_FS_IRQHandler+0x10>)
 8000c02:	f001 f933 	bl	8001e6c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2001107c 	.word	0x2001107c

08000c10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e00a      	b.n	8000c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c22:	f3af 8000 	nop.w
 8000c26:	4601      	mov	r1, r0
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	b2ca      	uxtb	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf0      	blt.n	8000c22 <_read+0x12>
	}

return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e009      	b.n	8000c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fdb7 	bl	80007d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf1      	blt.n	8000c5c <_write+0x12>
	}
	return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_close>:

int _close(int file)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	return -1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000caa:	605a      	str	r2, [r3, #4]
	return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_isatty>:

int _isatty(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	return 0;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f00a fdc4 	bl	800b8a8 <__errno>
 8000d20:	4602      	mov	r2, r0
 8000d22:	230c      	movs	r3, #12
 8000d24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20040000 	.word	0x20040000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	200100b0 	.word	0x200100b0
 8000d54:	20011388 	.word	0x20011388

08000d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd7 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f00a fd83 	bl	800b8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fd25 	bl	80007fc <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000dc0:	0800caf0 	.word	0x0800caf0
  ldr r2, =_sbss
 8000dc4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000dc8:	20011384 	.word	0x20011384

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>

08000dce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f000 f94a 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 f805 	bl	8000de8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000dde:	f7ff fe69 	bl	8000ab4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x54>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f965 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f92d 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_InitTick+0x5c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20010818 	.word	0x20010818

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20010818 	.word	0x20010818

08000e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d005      	beq.n	8000eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_Delay+0x40>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eae:	bf00      	nop
 8000eb0:	f7ff ffde 	bl	8000e70 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8f7      	bhi.n	8000eb0 <HAL_Delay+0x28>
  {
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000008 	.word	0x20000008

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	05fa0000 	.word	0x05fa0000

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_FLASH_Program+0xb0>)
 8001104:	7d1b      	ldrb	r3, [r3, #20]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_FLASH_Program+0x1e>
 800110a:	2302      	movs	r3, #2
 800110c:	e043      	b.n	8001196 <HAL_FLASH_Program+0xa6>
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_FLASH_Program+0xb0>)
 8001110:	2201      	movs	r2, #1
 8001112:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001114:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001118:	f000 f878 	bl	800120c <FLASH_WaitForLastOperation>
 800111c:	4603      	mov	r3, r0
 800111e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d133      	bne.n	800118e <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d823      	bhi.n	8001174 <HAL_FLASH_Program+0x84>
 800112c:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <HAL_FLASH_Program+0x44>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001145 	.word	0x08001145
 8001138:	08001151 	.word	0x08001151
 800113c:	0800115d 	.word	0x0800115d
 8001140:	08001169 	.word	0x08001169
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001144:	783b      	ldrb	r3, [r7, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f000 f91b 	bl	8001384 <FLASH_Program_Byte>
        break;
 800114e:	e012      	b.n	8001176 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001150:	883b      	ldrh	r3, [r7, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f000 f8ef 	bl	8001338 <FLASH_Program_HalfWord>
        break;
 800115a:	e00c      	b.n	8001176 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f000 f8c5 	bl	80012f0 <FLASH_Program_Word>
        break;
 8001166:	e006      	b.n	8001176 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f000 f88d 	bl	800128c <FLASH_Program_DoubleWord>
        break;
 8001172:	e000      	b.n	8001176 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001174:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001176:	f24c 3050 	movw	r0, #50000	; 0xc350
 800117a:	f000 f847 	bl	800120c <FLASH_WaitForLastOperation>
 800117e:	4603      	mov	r3, r0
 8001180:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_FLASH_Program+0xb4>)
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_FLASH_Program+0xb4>)
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_FLASH_Program+0xb0>)
 8001190:	2200      	movs	r2, #0
 8001192:	751a      	strb	r2, [r3, #20]

  return status;
 8001194:	7dfb      	ldrb	r3, [r7, #23]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2001081c 	.word	0x2001081c
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_FLASH_Unlock+0x38>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da0b      	bge.n	80011d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_FLASH_Unlock+0x38>)
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_FLASH_Unlock+0x3c>)
 80011be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_FLASH_Unlock+0x38>)
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <HAL_FLASH_Unlock+0x40>)
 80011c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_FLASH_Unlock+0x38>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da01      	bge.n	80011d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40023c00 	.word	0x40023c00
 80011e4:	45670123 	.word	0x45670123
 80011e8:	cdef89ab 	.word	0xcdef89ab

080011ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_FLASH_Lock+0x1c>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_FLASH_Lock+0x1c>)
 80011f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40023c00 	.word	0x40023c00

0800120c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <FLASH_WaitForLastOperation+0x78>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800121e:	f7ff fe27 	bl	8000e70 <HAL_GetTick>
 8001222:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001224:	e010      	b.n	8001248 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d00c      	beq.n	8001248 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <FLASH_WaitForLastOperation+0x38>
 8001234:	f7ff fe1c 	bl	8000e70 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	d201      	bcs.n	8001248 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e019      	b.n	800127c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <FLASH_WaitForLastOperation+0x7c>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e8      	bne.n	8001226 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <FLASH_WaitForLastOperation+0x7c>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001260:	f000 f8b4 	bl	80013cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e009      	b.n	800127c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <FLASH_WaitForLastOperation+0x7c>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <FLASH_WaitForLastOperation+0x7c>)
 8001276:	2201      	movs	r2, #1
 8001278:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
  
}  
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2001081c 	.word	0x2001081c
 8001288:	40023c00 	.word	0x40023c00

0800128c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800128c:	b490      	push	{r4, r7}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <FLASH_Program_DoubleWord+0x60>)
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <FLASH_Program_DoubleWord+0x60>)
 800129e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <FLASH_Program_DoubleWord+0x60>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a10      	ldr	r2, [pc, #64]	; (80012ec <FLASH_Program_DoubleWord+0x60>)
 80012aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <FLASH_Program_DoubleWord+0x60>)
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <FLASH_Program_DoubleWord+0x60>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80012c2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80012c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	f04f 0400 	mov.w	r4, #0
 80012d2:	0013      	movs	r3, r2
 80012d4:	2400      	movs	r4, #0
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	3204      	adds	r2, #4
 80012da:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012dc:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc90      	pop	{r4, r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <FLASH_Program_Word+0x44>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <FLASH_Program_Word+0x44>)
 8001300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001304:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <FLASH_Program_Word+0x44>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <FLASH_Program_Word+0x44>)
 800130c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001310:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <FLASH_Program_Word+0x44>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <FLASH_Program_Word+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	40023c00 	.word	0x40023c00

08001338 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <FLASH_Program_HalfWord+0x48>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <FLASH_Program_HalfWord+0x48>)
 800134a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800134e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <FLASH_Program_HalfWord+0x48>)
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <FLASH_Program_HalfWord+0x48>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <FLASH_Program_HalfWord+0x48>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <FLASH_Program_HalfWord+0x48>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <FLASH_Program_Byte+0x44>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <FLASH_Program_Byte+0x44>)
 8001396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <FLASH_Program_Byte+0x44>)
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <FLASH_Program_Byte+0x44>)
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <FLASH_Program_Byte+0x44>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <FLASH_Program_Byte+0x44>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <FLASH_SetErrorCode+0xa8>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <FLASH_SetErrorCode+0xac>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	4a24      	ldr	r2, [pc, #144]	; (8001478 <FLASH_SetErrorCode+0xac>)
 80013e6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <FLASH_SetErrorCode+0xa8>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <FLASH_SetErrorCode+0xac>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <FLASH_SetErrorCode+0xac>)
 80013fe:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <FLASH_SetErrorCode+0xa8>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0320 	and.w	r3, r3, #32
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <FLASH_SetErrorCode+0xac>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <FLASH_SetErrorCode+0xac>)
 8001416:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <FLASH_SetErrorCode+0xa8>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <FLASH_SetErrorCode+0xac>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <FLASH_SetErrorCode+0xac>)
 800142e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <FLASH_SetErrorCode+0xa8>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <FLASH_SetErrorCode+0xac>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <FLASH_SetErrorCode+0xac>)
 8001446:	6193      	str	r3, [r2, #24]
  }
  
#if defined (FLASH_OPTCR2_PCROP)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <FLASH_SetErrorCode+0xa8>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <FLASH_SetErrorCode+0x94>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <FLASH_SetErrorCode+0xac>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <FLASH_SetErrorCode+0xac>)
 800145e:	6193      	str	r3, [r2, #24]
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <FLASH_SetErrorCode+0xa8>)
 8001462:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8001466:	60da      	str	r2, [r3, #12]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00
 8001478:	2001081c 	.word	0x2001081c

0800147c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_FLASHEx_Erase+0xd0>)
 8001490:	7d1b      	ldrb	r3, [r3, #20]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_FLASHEx_Erase+0x1e>
 8001496:	2302      	movs	r3, #2
 8001498:	e053      	b.n	8001542 <HAL_FLASHEx_Erase+0xc6>
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_FLASHEx_Erase+0xd0>)
 800149c:	2201      	movs	r2, #1
 800149e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014a4:	f7ff feb2 	bl	800120c <FLASH_WaitForLastOperation>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d143      	bne.n	800153a <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d112      	bne.n	80014e8 <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f843 	bl	8001554 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014d2:	f7ff fe9b 	bl	800120c <FLASH_WaitForLastOperation>
 80014d6:	4603      	mov	r3, r0
 80014d8:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_FLASHEx_Erase+0xd4>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <HAL_FLASHEx_Erase+0xd4>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6113      	str	r3, [r2, #16]
 80014e6:	e028      	b.n	800153a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	e01c      	b.n	800152a <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f000 f84f 	bl	800159c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001502:	f7ff fe83 	bl	800120c <FLASH_WaitForLastOperation>
 8001506:	4603      	mov	r3, r0
 8001508:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_FLASHEx_Erase+0xd4>)
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_FLASHEx_Erase+0xd4>)
 8001510:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8001514:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	601a      	str	r2, [r3, #0]
          break;
 8001522:	e00a      	b.n	800153a <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3301      	adds	r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4413      	add	r3, r2
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3da      	bcc.n	80014f0 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_FLASHEx_Erase+0xd0>)
 800153c:	2200      	movs	r2, #0
 800153e:	751a      	strb	r2, [r3, #20]

  return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2001081c 	.word	0x2001081c
 8001550:	40023c00 	.word	0x40023c00

08001554 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <FLASH_MassErase+0x44>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <FLASH_MassErase+0x44>)
 8001564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001568:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <FLASH_MassErase+0x44>)
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <FLASH_MassErase+0x44>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <FLASH_MassErase+0x44>)
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	4313      	orrs	r3, r2
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <FLASH_MassErase+0x44>)
 8001582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001586:	6113      	str	r3, [r2, #16]
 8001588:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40023c00 	.word	0x40023c00

0800159c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e010      	b.n	80015da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d103      	bne.n	80015c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80015be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e009      	b.n	80015da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d103      	bne.n	80015d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	e002      	b.n	80015da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80015d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <FLASH_Erase_Sector+0x90>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <FLASH_Erase_Sector+0x90>)
 80015e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <FLASH_Erase_Sector+0x90>)
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	4910      	ldr	r1, [pc, #64]	; (800162c <FLASH_Erase_Sector+0x90>)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <FLASH_Erase_Sector+0x90>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <FLASH_Erase_Sector+0x90>)
 80015f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <FLASH_Erase_Sector+0x90>)
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <FLASH_Erase_Sector+0x90>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <FLASH_Erase_Sector+0x90>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <FLASH_Erase_Sector+0x90>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161a:	6113      	str	r3, [r2, #16]
 800161c:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e169      	b.n	8001924 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8158 	bne.w	800191e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d00b      	beq.n	800168e <HAL_GPIO_Init+0x5e>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001682:	2b11      	cmp	r3, #17
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b12      	cmp	r3, #18
 800168c:	d130      	bne.n	80016f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x100>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80b2 	beq.w	800191e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_GPIO_Init+0x308>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_GPIO_Init+0x308>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_GPIO_Init+0x308>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017d2:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_GPIO_Init+0x30c>)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a51      	ldr	r2, [pc, #324]	; (8001940 <HAL_GPIO_Init+0x310>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d02b      	beq.n	8001856 <HAL_GPIO_Init+0x226>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a50      	ldr	r2, [pc, #320]	; (8001944 <HAL_GPIO_Init+0x314>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d025      	beq.n	8001852 <HAL_GPIO_Init+0x222>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4f      	ldr	r2, [pc, #316]	; (8001948 <HAL_GPIO_Init+0x318>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01f      	beq.n	800184e <HAL_GPIO_Init+0x21e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4e      	ldr	r2, [pc, #312]	; (800194c <HAL_GPIO_Init+0x31c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d019      	beq.n	800184a <HAL_GPIO_Init+0x21a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4d      	ldr	r2, [pc, #308]	; (8001950 <HAL_GPIO_Init+0x320>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x216>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_GPIO_Init+0x324>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x212>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4b      	ldr	r2, [pc, #300]	; (8001958 <HAL_GPIO_Init+0x328>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x20e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4a      	ldr	r2, [pc, #296]	; (800195c <HAL_GPIO_Init+0x32c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x20a>
 8001836:	2307      	movs	r3, #7
 8001838:	e00e      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800183a:	2308      	movs	r3, #8
 800183c:	e00c      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800183e:	2306      	movs	r3, #6
 8001840:	e00a      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001846:	2304      	movs	r3, #4
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001868:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_GPIO_Init+0x30c>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001876:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <HAL_GPIO_Init+0x330>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189a:	4a31      	ldr	r2, [pc, #196]	; (8001960 <HAL_GPIO_Init+0x330>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_GPIO_Init+0x330>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c4:	4a26      	ldr	r2, [pc, #152]	; (8001960 <HAL_GPIO_Init+0x330>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_GPIO_Init+0x330>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_GPIO_Init+0x330>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_GPIO_Init+0x330>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_GPIO_Init+0x330>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f ae92 	bls.w	8001650 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	3724      	adds	r7, #36	; 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40023800 	.word	0x40023800
 800193c:	40013800 	.word	0x40013800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020400 	.word	0x40020400
 8001948:	40020800 	.word	0x40020800
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40021000 	.word	0x40021000
 8001954:	40021400 	.word	0x40021400
 8001958:	40021800 	.word	0x40021800
 800195c:	40021c00 	.word	0x40021c00
 8001960:	40013c00 	.word	0x40013c00

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001998:	b08f      	sub	sp, #60	; 0x3c
 800199a:	af0a      	add	r7, sp, #40	; 0x28
 800199c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e054      	b.n	8001a52 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f009 fc5e 	bl	800b284 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2203      	movs	r2, #3
 80019cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fae1 	bl	8004fae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	687e      	ldr	r6, [r7, #4]
 80019f4:	466d      	mov	r5, sp
 80019f6:	f106 0410 	add.w	r4, r6, #16
 80019fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a0a:	1d33      	adds	r3, r6, #4
 8001a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a0e:	6838      	ldr	r0, [r7, #0]
 8001a10:	f003 fa5e 	bl	8004ed0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fad8 	bl	8004fd0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	687e      	ldr	r6, [r7, #4]
 8001a28:	466d      	mov	r5, sp
 8001a2a:	f106 0410 	add.w	r4, r6, #16
 8001a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a3e:	1d33      	adds	r3, r6, #4
 8001a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a42:	6838      	ldr	r0, [r7, #0]
 8001a44:	f003 fbea 	bl	800521c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a5a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a5a:	b590      	push	{r4, r7, lr}
 8001a5c:	b089      	sub	sp, #36	; 0x24
 8001a5e:	af04      	add	r7, sp, #16
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	4608      	mov	r0, r1
 8001a64:	4611      	mov	r1, r2
 8001a66:	461a      	mov	r2, r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	70fb      	strb	r3, [r7, #3]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70bb      	strb	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_HCD_HC_Init+0x28>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e076      	b.n	8001b70 <HAL_HCD_HC_Init+0x116>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	212c      	movs	r1, #44	; 0x2c
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	333d      	adds	r3, #61	; 0x3d
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	212c      	movs	r1, #44	; 0x2c
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3338      	adds	r3, #56	; 0x38
 8001aaa:	787a      	ldrb	r2, [r7, #1]
 8001aac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3340      	adds	r3, #64	; 0x40
 8001abc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001abe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3339      	adds	r3, #57	; 0x39
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	333f      	adds	r3, #63	; 0x3f
 8001ae0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ae4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	78ba      	ldrb	r2, [r7, #2]
 8001aea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aee:	b2d0      	uxtb	r0, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	333a      	adds	r3, #58	; 0x3a
 8001afc:	4602      	mov	r2, r0
 8001afe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da09      	bge.n	8001b1c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	333b      	adds	r3, #59	; 0x3b
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e008      	b.n	8001b2e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	333b      	adds	r3, #59	; 0x3b
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	333c      	adds	r3, #60	; 0x3c
 8001b3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b40:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	787c      	ldrb	r4, [r7, #1]
 8001b48:	78ba      	ldrb	r2, [r7, #2]
 8001b4a:	78f9      	ldrb	r1, [r7, #3]
 8001b4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	f003 fcd3 	bl	8005508 <USB_HC_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}

08001b78 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_HCD_HC_Halt+0x1e>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e00f      	b.n	8001bb6 <HAL_HCD_HC_Halt+0x3e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 ff11 	bl	80059ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4603      	mov	r3, r0
 8001bd0:	70fb      	strb	r3, [r7, #3]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70bb      	strb	r3, [r7, #2]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	333b      	adds	r3, #59	; 0x3b
 8001be8:	78ba      	ldrb	r2, [r7, #2]
 8001bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	212c      	movs	r1, #44	; 0x2c
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	333f      	adds	r3, #63	; 0x3f
 8001bfa:	787a      	ldrb	r2, [r7, #1]
 8001bfc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bfe:	7c3b      	ldrb	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d112      	bne.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3342      	adds	r3, #66	; 0x42
 8001c12:	2203      	movs	r2, #3
 8001c14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	333d      	adds	r3, #61	; 0x3d
 8001c24:	7f3a      	ldrb	r2, [r7, #28]
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e008      	b.n	8001c3c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3342      	adds	r3, #66	; 0x42
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	f200 80c6 	bhi.w	8001dd0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001dbd 	.word	0x08001dbd
 8001c54:	08001cc1 	.word	0x08001cc1
 8001c58:	08001d3f 	.word	0x08001d3f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c5c:	7c3b      	ldrb	r3, [r7, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 80b8 	bne.w	8001dd4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c64:	78bb      	ldrb	r3, [r7, #2]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 80b4 	bne.w	8001dd4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c6c:	8b3b      	ldrh	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3355      	adds	r3, #85	; 0x55
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	212c      	movs	r1, #44	; 0x2c
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3355      	adds	r3, #85	; 0x55
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3342      	adds	r3, #66	; 0x42
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001caa:	e093      	b.n	8001dd4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	212c      	movs	r1, #44	; 0x2c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3342      	adds	r3, #66	; 0x42
 8001cba:	2202      	movs	r2, #2
 8001cbc:	701a      	strb	r2, [r3, #0]
      break;
 8001cbe:	e089      	b.n	8001dd4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cc0:	78bb      	ldrb	r3, [r7, #2]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11d      	bne.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3355      	adds	r3, #85	; 0x55
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3342      	adds	r3, #66	; 0x42
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cec:	e073      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	212c      	movs	r1, #44	; 0x2c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3342      	adds	r3, #66	; 0x42
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	701a      	strb	r2, [r3, #0]
      break;
 8001d00:	e069      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3354      	adds	r3, #84	; 0x54
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3342      	adds	r3, #66	; 0x42
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
      break;
 8001d28:	e055      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3342      	adds	r3, #66	; 0x42
 8001d38:	2202      	movs	r2, #2
 8001d3a:	701a      	strb	r2, [r3, #0]
      break;
 8001d3c:	e04b      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d3e:	78bb      	ldrb	r3, [r7, #2]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11d      	bne.n	8001d80 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3355      	adds	r3, #85	; 0x55
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3342      	adds	r3, #66	; 0x42
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d6a:	e034      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3342      	adds	r3, #66	; 0x42
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	701a      	strb	r2, [r3, #0]
      break;
 8001d7e:	e02a      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3354      	adds	r3, #84	; 0x54
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3342      	adds	r3, #66	; 0x42
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
      break;
 8001da6:	e016      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3342      	adds	r3, #66	; 0x42
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
      break;
 8001dba:	e00c      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	212c      	movs	r1, #44	; 0x2c
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3342      	adds	r3, #66	; 0x42
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
      break;
 8001dce:	e002      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001dd0:	bf00      	nop
 8001dd2:	e000      	b.n	8001dd6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001dd4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	212c      	movs	r1, #44	; 0x2c
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3344      	adds	r3, #68	; 0x44
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	8b3a      	ldrh	r2, [r7, #24]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	202c      	movs	r0, #44	; 0x2c
 8001df0:	fb00 f303 	mul.w	r3, r0, r3
 8001df4:	440b      	add	r3, r1
 8001df6:	334c      	adds	r3, #76	; 0x4c
 8001df8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3360      	adds	r3, #96	; 0x60
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	212c      	movs	r1, #44	; 0x2c
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	3350      	adds	r3, #80	; 0x50
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	212c      	movs	r1, #44	; 0x2c
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3339      	adds	r3, #57	; 0x39
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3361      	adds	r3, #97	; 0x61
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	222c      	movs	r2, #44	; 0x2c
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	3338      	adds	r3, #56	; 0x38
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	18d1      	adds	r1, r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f003 fc62 	bl	8005724 <USB_HC_StartXfer>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop

08001e6c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 f987 	bl	8005196 <USB_GetMode>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f040 80ef 	bne.w	800206e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 f96b 	bl	8005170 <USB_ReadInterrupts>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80e5 	beq.w	800206c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 f962 	bl	8005170 <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eb6:	d104      	bne.n	8001ec2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f952 	bl	8005170 <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ed6:	d104      	bne.n	8001ee2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 f942 	bl	8005170 <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ef6:	d104      	bne.n	8001f02 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 f932 	bl	8005170 <USB_ReadInterrupts>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d103      	bne.n	8001f1e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f924 	bl	8005170 <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f32:	d115      	bne.n	8001f60 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f3c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d108      	bne.n	8001f60 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f009 fa0a 	bl	800b368 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fa0e 	bl	800537c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 f903 	bl	8005170 <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d102      	bne.n	8001f7c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f001 fa03 	bl	8003382 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f8f5 	bl	8005170 <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d106      	bne.n	8001f9e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f009 f9cd 	bl	800b330 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 f8e4 	bl	8005170 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d101      	bne.n	8001fb6 <HAL_HCD_IRQHandler+0x14a>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_HCD_IRQHandler+0x14c>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0210 	bic.w	r2, r2, #16
 8001fca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f001 f907 	bl	80031e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0210 	orr.w	r2, r2, #16
 8001fe0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 f8c2 	bl	8005170 <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff6:	d13a      	bne.n	800206e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fcd5 	bl	80059ac <USB_HC_ReadInterrupt>
 8002002:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e025      	b.n	8002056 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d018      	beq.n	8002050 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002034:	d106      	bne.n	8002044 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f8ab 	bl	8002198 <HCD_HC_IN_IRQHandler>
 8002042:	e005      	b.n	8002050 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4619      	mov	r1, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fcc9 	bl	80029e2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3d4      	bcc.n	800200a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002068:	615a      	str	r2, [r3, #20]
 800206a:	e000      	b.n	800206e <HAL_HCD_IRQHandler+0x202>
      return;
 800206c:	bf00      	nop
    }
  }
}
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_HCD_Start+0x16>
 8002086:	2302      	movs	r3, #2
 8002088:	e013      	b.n	80020b2 <HAL_HCD_Start+0x3e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f002 ff78 	bl	8004f8c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 f9ce 	bl	8005444 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_HCD_Stop+0x16>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e00d      	b.n	80020ec <HAL_HCD_Stop+0x32>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fdcf 	bl	8005c80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 f975 	bl	80053f0 <USB_ResetPort>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3360      	adds	r3, #96	; 0x60
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3350      	adds	r3, #80	; 0x50
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f9b9 	bl	80054e4 <USB_GetCurrentFrame>
 8002172:	4603      	mov	r3, r0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 f994 	bl	80054b6 <USB_GetHostSpeed>
 800218e:	4603      	mov	r3, r0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d119      	bne.n	80021fc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	461a      	mov	r2, r3
 80021d6:	2304      	movs	r3, #4
 80021d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
 80021fa:	e101      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002212:	d12b      	bne.n	800226c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	461a      	mov	r2, r3
 8002222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002226:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3361      	adds	r3, #97	; 0x61
 8002236:	2207      	movs	r2, #7
 8002238:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	0151      	lsls	r1, r2, #5
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	440a      	add	r2, r1
 8002250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fbb2 	bl	80059ce <USB_HC_Halt>
 800226a:	e0c9      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b20      	cmp	r3, #32
 8002280:	d109      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	2320      	movs	r3, #32
 8002292:	6093      	str	r3, [r2, #8]
 8002294:	e0b4      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d133      	bne.n	8002314 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	0151      	lsls	r1, r2, #5
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	440a      	add	r2, r1
 80022c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3361      	adds	r3, #97	; 0x61
 80022da:	2205      	movs	r2, #5
 80022dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	461a      	mov	r2, r3
 80022ec:	2310      	movs	r3, #16
 80022ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	461a      	mov	r2, r3
 80022fe:	2308      	movs	r3, #8
 8002300:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fb5e 	bl	80059ce <USB_HC_Halt>
 8002312:	e075      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232a:	d134      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	0151      	lsls	r1, r2, #5
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	440a      	add	r2, r1
 8002342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3361      	adds	r3, #97	; 0x61
 800235a:	2208      	movs	r2, #8
 800235c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	461a      	mov	r2, r3
 800236c:	2310      	movs	r3, #16
 800236e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	461a      	mov	r2, r3
 800237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002382:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fb1d 	bl	80059ce <USB_HC_Halt>
 8002394:	e034      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	2b80      	cmp	r3, #128	; 0x80
 80023aa:	d129      	bne.n	8002400 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	0151      	lsls	r1, r2, #5
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	440a      	add	r2, r1
 80023c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3361      	adds	r3, #97	; 0x61
 80023da:	2206      	movs	r2, #6
 80023dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 faf0 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	461a      	mov	r2, r3
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002416:	d122      	bne.n	800245e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	0151      	lsls	r1, r2, #5
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	440a      	add	r2, r1
 800242e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fac3 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800245a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800245c:	e2bd      	b.n	80029da <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	f040 811d 	bne.w	80026b0 <HCD_HC_IN_IRQHandler+0x518>
    if (hhcd->Init.dma_enable != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3348      	adds	r3, #72	; 0x48
 800248c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	0159      	lsls	r1, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	440b      	add	r3, r1
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80024a0:	1ad2      	subs	r2, r2, r3
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	202c      	movs	r0, #44	; 0x2c
 80024a8:	fb00 f303 	mul.w	r3, r0, r3
 80024ac:	440b      	add	r3, r1
 80024ae:	3350      	adds	r3, #80	; 0x50
 80024b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3361      	adds	r3, #97	; 0x61
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	335c      	adds	r3, #92	; 0x5c
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	2301      	movs	r3, #1
 80024e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	333f      	adds	r3, #63	; 0x3f
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	333f      	adds	r3, #63	; 0x3f
 800250a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800250c:	2b02      	cmp	r3, #2
 800250e:	d121      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	0151      	lsls	r1, r2, #5
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	440a      	add	r2, r1
 8002526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252a:	f043 0302 	orr.w	r3, r3, #2
 800252e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fa47 	bl	80059ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	461a      	mov	r2, r3
 800254e:	2310      	movs	r3, #16
 8002550:	6093      	str	r3, [r2, #8]
 8002552:	e068      	b.n	8002626 <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	333f      	adds	r3, #63	; 0x3f
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d128      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x422>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	0151      	lsls	r1, r2, #5
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	440a      	add	r2, r1
 800257e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002586:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	b2d8      	uxtb	r0, r3
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4601      	mov	r1, r0
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f008 fee6 	bl	800b384 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025b8:	e035      	b.n	8002626 <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333f      	adds	r3, #63	; 0x3f
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d12b      	bne.n	8002626 <HCD_HC_IN_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3354      	adds	r3, #84	; 0x54
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2d8      	uxtb	r0, r3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3354      	adds	r3, #84	; 0x54
 8002604:	4602      	mov	r2, r0
 8002606:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	b2d8      	uxtb	r0, r3
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3360      	adds	r3, #96	; 0x60
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4601      	mov	r1, r0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f008 feaf 	bl	800b384 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d12b      	bne.n	8002686 <HCD_HC_IN_IRQHandler+0x4ee>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3348      	adds	r3, #72	; 0x48
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	202c      	movs	r0, #44	; 0x2c
 8002644:	fb00 f202 	mul.w	r2, r0, r2
 8002648:	440a      	add	r2, r1
 800264a:	3240      	adds	r2, #64	; 0x40
 800264c:	8812      	ldrh	r2, [r2, #0]
 800264e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 81bf 	beq.w	80029da <HCD_HC_IN_IRQHandler+0x842>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3354      	adds	r3, #84	; 0x54
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2d8      	uxtb	r0, r3
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3354      	adds	r3, #84	; 0x54
 8002680:	4602      	mov	r2, r0
 8002682:	701a      	strb	r2, [r3, #0]
}
 8002684:	e1a9      	b.n	80029da <HCD_HC_IN_IRQHandler+0x842>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3354      	adds	r3, #84	; 0x54
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f083 0301 	eor.w	r3, r3, #1
 800269a:	b2d8      	uxtb	r0, r3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3354      	adds	r3, #84	; 0x54
 80026aa:	4602      	mov	r2, r0
 80026ac:	701a      	strb	r2, [r3, #0]
}
 80026ae:	e194      	b.n	80029da <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	f040 8107 	bne.w	80028d6 <HCD_HC_IN_IRQHandler+0x73e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e2:	f023 0302 	bic.w	r3, r3, #2
 80026e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d109      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3360      	adds	r3, #96	; 0x60
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e0c9      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3361      	adds	r3, #97	; 0x61
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d109      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0x5a0>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3360      	adds	r3, #96	; 0x60
 8002732:	2205      	movs	r2, #5
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	e0b5      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x70c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3361      	adds	r3, #97	; 0x61
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b06      	cmp	r3, #6
 800274a:	d009      	beq.n	8002760 <HCD_HC_IN_IRQHandler+0x5c8>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3361      	adds	r3, #97	; 0x61
 800275a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800275c:	2b08      	cmp	r3, #8
 800275e:	d150      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0x66a>
      hhcd->hc[ch_num].ErrCnt++;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	335c      	adds	r3, #92	; 0x5c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	202c      	movs	r0, #44	; 0x2c
 8002778:	fb00 f303 	mul.w	r3, r0, r3
 800277c:	440b      	add	r3, r1
 800277e:	335c      	adds	r3, #92	; 0x5c
 8002780:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	335c      	adds	r3, #92	; 0x5c
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d912      	bls.n	80027bc <HCD_HC_IN_IRQHandler+0x624>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	335c      	adds	r3, #92	; 0x5c
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3360      	adds	r3, #96	; 0x60
 80027b6:	2204      	movs	r2, #4
 80027b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027ba:	e073      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x70c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3360      	adds	r3, #96	; 0x60
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002800:	e050      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	3361      	adds	r3, #97	; 0x61
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d122      	bne.n	800285c <HCD_HC_IN_IRQHandler+0x6c4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	2202      	movs	r2, #2
 8002826:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800283e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002846:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e023      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3361      	adds	r3, #97	; 0x61
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b07      	cmp	r3, #7
 800286e:	d119      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0x70c>
      hhcd->hc[ch_num].ErrCnt++;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	335c      	adds	r3, #92	; 0x5c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	202c      	movs	r0, #44	; 0x2c
 8002888:	fb00 f303 	mul.w	r3, r0, r3
 800288c:	440b      	add	r3, r1
 800288e:	335c      	adds	r3, #92	; 0x5c
 8002890:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3360      	adds	r3, #96	; 0x60
 80028a0:	2204      	movs	r2, #4
 80028a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	2302      	movs	r3, #2
 80028b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3360      	adds	r3, #96	; 0x60
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4601      	mov	r1, r0
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f008 fd58 	bl	800b384 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028d4:	e081      	b.n	80029da <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d176      	bne.n	80029da <HCD_HC_IN_IRQHandler+0x842>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	333f      	adds	r3, #63	; 0x3f
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d121      	bne.n	8002944 <HCD_HC_IN_IRQHandler+0x7ac>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	0151      	lsls	r1, r2, #5
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	440a      	add	r2, r1
 8002928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f003 f846 	bl	80059ce <USB_HC_Halt>
 8002942:	e041      	b.n	80029c8 <HCD_HC_IN_IRQHandler+0x830>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	333f      	adds	r3, #63	; 0x3f
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HCD_HC_IN_IRQHandler+0x7d4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	333f      	adds	r3, #63	; 0x3f
 8002966:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002968:	2b02      	cmp	r3, #2
 800296a:	d12d      	bne.n	80029c8 <HCD_HC_IN_IRQHandler+0x830>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	335c      	adds	r3, #92	; 0x5c
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d120      	bne.n	80029c8 <HCD_HC_IN_IRQHandler+0x830>
        hhcd->hc[ch_num].state = HC_NAK;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3361      	adds	r3, #97	; 0x61
 8002994:	2203      	movs	r2, #3
 8002996:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 f803 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2310      	movs	r3, #16
 80029d8:	6093      	str	r3, [r2, #8]
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b088      	sub	sp, #32
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d119      	bne.n	8002a46 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2304      	movs	r3, #4
 8002a22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002a44:	e3c8      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d13e      	bne.n	8002ada <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	333d      	adds	r3, #61	; 0x3d
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	f040 83aa 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	333d      	adds	r3, #61	; 0x3d
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3360      	adds	r3, #96	; 0x60
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 ff7b 	bl	80059ce <USB_HC_Halt>
}
 8002ad8:	e37e      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d122      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 ff56 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b34:	6093      	str	r3, [r2, #8]
}
 8002b36:	e34f      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d150      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	335c      	adds	r3, #92	; 0x5c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d111      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	333d      	adds	r3, #61	; 0x3d
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2340      	movs	r3, #64	; 0x40
 8002b98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	0151      	lsls	r1, r2, #5
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	440a      	add	r2, r1
 8002bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 ff02 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2301      	movs	r3, #1
 8002bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
}
 8002bee:	e2f3      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d13c      	bne.n	8002c80 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3361      	adds	r3, #97	; 0x61
 8002c14:	2204      	movs	r2, #4
 8002c16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	333d      	adds	r3, #61	; 0x3d
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	335c      	adds	r3, #92	; 0x5c
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	0151      	lsls	r1, r2, #5
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	440a      	add	r2, r1
 8002c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 feb1 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2340      	movs	r3, #64	; 0x40
 8002c7c:	6093      	str	r3, [r2, #8]
}
 8002c7e:	e2ab      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d12a      	bne.n	8002cec <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fe7b 	bl	80059ce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3361      	adds	r3, #97	; 0x61
 8002ce6:	2205      	movs	r2, #5
 8002ce8:	701a      	strb	r2, [r3, #0]
}
 8002cea:	e275      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d150      	bne.n	8002da4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	335c      	adds	r3, #92	; 0x5c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3361      	adds	r3, #97	; 0x61
 8002d22:	2203      	movs	r2, #3
 8002d24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	333d      	adds	r3, #61	; 0x3d
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d112      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	333c      	adds	r3, #60	; 0x3c
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	333d      	adds	r3, #61	; 0x3d
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	0151      	lsls	r1, r2, #5
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	440a      	add	r2, r1
 8002d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 fe1f 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2310      	movs	r3, #16
 8002da0:	6093      	str	r3, [r2, #8]
}
 8002da2:	e219      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d175      	bne.n	8002ea6 <HCD_HC_OUT_IRQHandler+0x4c4>
    if (hhcd->Init.dma_enable == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d121      	bne.n	8002e06 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3361      	adds	r3, #97	; 0x61
 8002dd0:	2206      	movs	r2, #6
 8002dd2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	0151      	lsls	r1, r2, #5
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	440a      	add	r2, r1
 8002dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 fde5 	bl	80059ce <USB_HC_Halt>
 8002e04:	e045      	b.n	8002e92 <HCD_HC_OUT_IRQHandler+0x4b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	335c      	adds	r3, #92	; 0x5c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	202c      	movs	r0, #44	; 0x2c
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	440b      	add	r3, r1
 8002e24:	335c      	adds	r3, #92	; 0x5c
 8002e26:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	335c      	adds	r3, #92	; 0x5c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d921      	bls.n	8002e80 <HCD_HC_OUT_IRQHandler+0x49e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	335c      	adds	r3, #92	; 0x5c
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3360      	adds	r3, #96	; 0x60
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	b2d8      	uxtb	r0, r3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3360      	adds	r3, #96	; 0x60
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4601      	mov	r1, r0
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f008 fa83 	bl	800b384 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e7e:	e008      	b.n	8002e92 <HCD_HC_OUT_IRQHandler+0x4b0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3360      	adds	r3, #96	; 0x60
 8002e8e:	2202      	movs	r2, #2
 8002e90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	6093      	str	r3, [r2, #8]
}
 8002ea4:	e198      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d134      	bne.n	8002f28 <HCD_HC_OUT_IRQHandler+0x546>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fd70 	bl	80059ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	2310      	movs	r3, #16
 8002efe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3361      	adds	r3, #97	; 0x61
 8002f22:	2208      	movs	r2, #8
 8002f24:	701a      	strb	r2, [r3, #0]
}
 8002f26:	e157      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f040 814c 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x7f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	0151      	lsls	r1, r2, #5
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	440a      	add	r2, r1
 8002f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3361      	adds	r3, #97	; 0x61
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d179      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x686>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3360      	adds	r3, #96	; 0x60
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333f      	adds	r3, #63	; 0x3f
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d00a      	beq.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x5ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	333f      	adds	r3, #63	; 0x3f
 8002fa8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	f040 80fc 	bne.w	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
        if (hhcd->Init.dma_enable == 1U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d142      	bne.n	800303e <HCD_HC_OUT_IRQHandler+0x65c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	334c      	adds	r3, #76	; 0x4c
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80ed 	beq.w	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	334c      	adds	r3, #76	; 0x4c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	202c      	movs	r0, #44	; 0x2c
 8002fe4:	fb00 f202 	mul.w	r2, r0, r2
 8002fe8:	440a      	add	r2, r1
 8002fea:	3240      	adds	r2, #64	; 0x40
 8002fec:	8812      	ldrh	r2, [r2, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	202c      	movs	r0, #44	; 0x2c
 8002ff8:	fb00 f202 	mul.w	r2, r0, r2
 8002ffc:	440a      	add	r2, r1
 8002ffe:	3240      	adds	r2, #64	; 0x40
 8003000:	8812      	ldrh	r2, [r2, #0]
 8003002:	fbb3 f3f2 	udiv	r3, r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80ca 	beq.w	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3355      	adds	r3, #85	; 0x55
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2d8      	uxtb	r0, r3
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3355      	adds	r3, #85	; 0x55
 8003038:	4602      	mov	r2, r0
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e0b4      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3355      	adds	r3, #85	; 0x55
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	f083 0301 	eor.w	r3, r3, #1
 8003052:	b2d8      	uxtb	r0, r3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3355      	adds	r3, #85	; 0x55
 8003062:	4602      	mov	r2, r0
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e09f      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3361      	adds	r3, #97	; 0x61
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d109      	bne.n	8003090 <HCD_HC_OUT_IRQHandler+0x6ae>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e08b      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3361      	adds	r3, #97	; 0x61
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d109      	bne.n	80030b8 <HCD_HC_OUT_IRQHandler+0x6d6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3360      	adds	r3, #96	; 0x60
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e077      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3361      	adds	r3, #97	; 0x61
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d109      	bne.n	80030e0 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3360      	adds	r3, #96	; 0x60
 80030da:	2205      	movs	r2, #5
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e063      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3361      	adds	r3, #97	; 0x61
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d009      	beq.n	8003108 <HCD_HC_OUT_IRQHandler+0x726>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3361      	adds	r3, #97	; 0x61
 8003102:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003104:	2b08      	cmp	r3, #8
 8003106:	d14f      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
      hhcd->hc[ch_num].ErrCnt++;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	335c      	adds	r3, #92	; 0x5c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	202c      	movs	r0, #44	; 0x2c
 8003120:	fb00 f303 	mul.w	r3, r0, r3
 8003124:	440b      	add	r3, r1
 8003126:	335c      	adds	r3, #92	; 0x5c
 8003128:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	335c      	adds	r3, #92	; 0x5c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d912      	bls.n	8003164 <HCD_HC_OUT_IRQHandler+0x782>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	335c      	adds	r3, #92	; 0x5c
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3360      	adds	r3, #96	; 0x60
 800315e:	2204      	movs	r2, #4
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e021      	b.n	80031a8 <HCD_HC_OUT_IRQHandler+0x7c6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800318c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003194:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4413      	add	r3, r2
 800319e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a2:	461a      	mov	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	2302      	movs	r3, #2
 80031b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	b2d8      	uxtb	r0, r3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3360      	adds	r3, #96	; 0x60
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	4601      	mov	r1, r0
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f008 f8d6 	bl	800b384 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031d8:	bf00      	nop
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	0c5b      	lsrs	r3, r3, #17
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003214:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d003      	beq.n	8003224 <HCD_RXQLVL_IRQHandler+0x44>
 800321c:	2b05      	cmp	r3, #5
 800321e:	f000 80a9 	beq.w	8003374 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003222:	e0aa      	b.n	800337a <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80a6 	beq.w	8003378 <HCD_RXQLVL_IRQHandler+0x198>
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3344      	adds	r3, #68	; 0x44
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 809b 	beq.w	8003378 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3350      	adds	r3, #80	; 0x50
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	441a      	add	r2, r3
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	202c      	movs	r0, #44	; 0x2c
 800325c:	fb00 f303 	mul.w	r3, r0, r3
 8003260:	440b      	add	r3, r1
 8003262:	334c      	adds	r3, #76	; 0x4c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d87a      	bhi.n	8003360 <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3344      	adds	r3, #68	; 0x44
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	b292      	uxth	r2, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f001 ff4b 	bl	800511e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3344      	adds	r3, #68	; 0x44
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	441a      	add	r2, r3
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	202c      	movs	r0, #44	; 0x2c
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	440b      	add	r3, r1
 80032a8:	3344      	adds	r3, #68	; 0x44
 80032aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3350      	adds	r3, #80	; 0x50
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	441a      	add	r2, r3
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	202c      	movs	r0, #44	; 0x2c
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	440b      	add	r3, r1
 80032cc:	3350      	adds	r3, #80	; 0x50
 80032ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	0cdb      	lsrs	r3, r3, #19
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3340      	adds	r3, #64	; 0x40
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d13c      	bne.n	8003378 <HCD_RXQLVL_IRQHandler+0x198>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d039      	beq.n	8003378 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800331a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003322:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3354      	adds	r3, #84	; 0x54
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	f083 0301 	eor.w	r3, r3, #1
 800334a:	b2d8      	uxtb	r0, r3
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3354      	adds	r3, #84	; 0x54
 800335a:	4602      	mov	r2, r0
 800335c:	701a      	strb	r2, [r3, #0]
      break;
 800335e:	e00b      	b.n	8003378 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3360      	adds	r3, #96	; 0x60
 800336e:	2204      	movs	r2, #4
 8003370:	701a      	strb	r2, [r3, #0]
      break;
 8003372:	e001      	b.n	8003378 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003378:	bf00      	nop
  }
}
 800337a:	bf00      	nop
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d10b      	bne.n	80033d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f007 ffc1 	bl	800b34c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d132      	bne.n	8003442 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d126      	bne.n	800343c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d113      	bne.n	800341e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003400:	d106      	bne.n	8003410 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f001 ffb7 	bl	800537c <USB_InitFSLSPClkSel>
 800340e:	e011      	b.n	8003434 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f001 ffb0 	bl	800537c <USB_InitFSLSPClkSel>
 800341c:	e00a      	b.n	8003434 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d106      	bne.n	8003434 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342c:	461a      	mov	r2, r3
 800342e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003432:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f007 ffb3 	bl	800b3a0 <HAL_HCD_PortEnabled_Callback>
 800343a:	e002      	b.n	8003442 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f007 ffbd 	bl	800b3bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d103      	bne.n	8003454 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f043 0320 	orr.w	r3, r3, #32
 8003452:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800346e:	f7fd fcff 	bl	8000e70 <HAL_GetTick>
 8003472:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003474:	4b66      	ldr	r3, [pc, #408]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003482:	f7fd fcf5 	bl	8000e70 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0b8      	b.n	8003606 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003494:	4b5e      	ldr	r3, [pc, #376]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80034a0:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a5a      	ldr	r2, [pc, #360]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80034a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80034ac:	f7fd fce0 	bl	8000e70 <HAL_GetTick>
 80034b0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80034b2:	4b57      	ldr	r3, [pc, #348]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ba:	f7fd fcd9 	bl	8000e70 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e09a      	b.n	8003606 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80034d0:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80034dc:	f7fd fcc8 	bl	8000e70 <HAL_GetTick>
 80034e0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80034e2:	4b4b      	ldr	r3, [pc, #300]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4a      	ldr	r2, [pc, #296]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80034e8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80034ec:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fd fcbe 	bl	8000e70 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e081      	b.n	8003606 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003502:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800350e:	f7fd fcaf 	bl	8000e70 <HAL_GetTick>
 8003512:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003514:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 800351a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003522:	f7fd fca5 	bl	8000e70 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e068      	b.n	8003606 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f0      	bne.n	8003522 <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003540:	f7fd fc96 	bl	8000e70 <HAL_GetTick>
 8003544:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003546:	4b32      	ldr	r3, [pc, #200]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 800354c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003550:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003554:	f7fd fc8c 	bl	8000e70 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e04f      	b.n	8003606 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003572:	f7fd fc7d 	bl	8000e70 <HAL_GetTick>
 8003576:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a24      	ldr	r2, [pc, #144]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 800357e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003582:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003586:	f7fd fc73 	bl	8000e70 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	; 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e036      	b.n	8003606 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035a6:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_RCC_DeInit+0x1ac>)
 80035a8:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035ac:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <HAL_RCC_DeInit+0x1b0>)
 80035ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 80035b2:	4b17      	ldr	r3, [pc, #92]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_RCC_DeInit+0x1b0>)
 80035b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4a14      	ldr	r2, [pc, #80]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035c4:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d0:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <HAL_RCC_DeInit+0x1a8>)
 80035e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <HAL_RCC_DeInit+0x1b4>)
 80035ec:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <HAL_RCC_DeInit+0x1b8>)
 80035ee:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_RCC_DeInit+0x1bc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fbf7 	bl	8000de8 <HAL_InitTick>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8003604:	2300      	movs	r3, #0
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	24003010 	.word	0x24003010
 8003618:	24003000 	.word	0x24003000
 800361c:	20000000 	.word	0x20000000
 8003620:	00f42400 	.word	0x00f42400
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003630:	2300      	movs	r3, #0
 8003632:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e291      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8087 	beq.w	800375a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800364c:	4b96      	ldr	r3, [pc, #600]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00c      	beq.n	8003672 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003658:	4b93      	ldr	r3, [pc, #588]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d112      	bne.n	800368a <HAL_RCC_OscConfig+0x62>
 8003664:	4b90      	ldr	r3, [pc, #576]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003670:	d10b      	bne.n	800368a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003672:	4b8d      	ldr	r3, [pc, #564]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d06c      	beq.n	8003758 <HAL_RCC_OscConfig+0x130>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d168      	bne.n	8003758 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e26b      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x7a>
 8003694:	4b84      	ldr	r3, [pc, #528]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a83      	ldr	r2, [pc, #524]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e02e      	b.n	8003700 <HAL_RCC_OscConfig+0xd8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x9c>
 80036aa:	4b7f      	ldr	r3, [pc, #508]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7e      	ldr	r2, [pc, #504]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7b      	ldr	r2, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0xd8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0xc0>
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a72      	ldr	r2, [pc, #456]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xd8>
 80036e8:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fbb2 	bl	8000e70 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fd fbae 	bl	8000e70 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e21f      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0xe8>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fd fb9e 	bl	8000e70 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fd fb9a 	bl	8000e70 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e20b      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x110>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d069      	beq.n	800383a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d11c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x190>
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e1df      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	493d      	ldr	r1, [pc, #244]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	e040      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d023      	beq.n	8003808 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c0:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd fb50 	bl	8000e70 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fd fb4c 	bl	8000e70 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e1bd      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f2:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4929      	ldr	r1, [pc, #164]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
 8003806:	e018      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fb2c 	bl	8000e70 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381c:	f7fd fb28 	bl	8000e70 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e199      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d038      	beq.n	80038b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d019      	beq.n	8003882 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fd fb09 	bl	8000e70 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003862:	f7fd fb05 	bl	8000e70 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e176      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x23a>
 8003880:	e01a      	b.n	80038b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fd faef 	bl	8000e70 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7fd faeb 	bl	8000e70 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d903      	bls.n	80038ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e15c      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
 80038a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b91      	ldr	r3, [pc, #580]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ee      	bne.n	8003896 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a4 	beq.w	8003a0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c6:	4b8b      	ldr	r3, [pc, #556]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a87      	ldr	r2, [pc, #540]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ee:	4b82      	ldr	r3, [pc, #520]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d118      	bne.n	800392c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038fa:	4b7f      	ldr	r3, [pc, #508]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a7e      	ldr	r2, [pc, #504]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003906:	f7fd fab3 	bl	8000e70 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390e:	f7fd faaf 	bl	8000e70 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b64      	cmp	r3, #100	; 0x64
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e120      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003920:	4b75      	ldr	r3, [pc, #468]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d106      	bne.n	8003942 <HAL_RCC_OscConfig+0x31a>
 8003934:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a6e      	ldr	r2, [pc, #440]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	e02d      	b.n	800399e <HAL_RCC_OscConfig+0x376>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x33c>
 800394a:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a69      	ldr	r2, [pc, #420]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a66      	ldr	r2, [pc, #408]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 800395c:	f023 0304 	bic.w	r3, r3, #4
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	e01c      	b.n	800399e <HAL_RCC_OscConfig+0x376>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b05      	cmp	r3, #5
 800396a:	d10c      	bne.n	8003986 <HAL_RCC_OscConfig+0x35e>
 800396c:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a60      	ldr	r2, [pc, #384]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	4a5d      	ldr	r2, [pc, #372]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6713      	str	r3, [r2, #112]	; 0x70
 8003984:	e00b      	b.n	800399e <HAL_RCC_OscConfig+0x376>
 8003986:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a5a      	ldr	r2, [pc, #360]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d015      	beq.n	80039d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd fa63 	bl	8000e70 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fd fa5f 	bl	8000e70 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0ce      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ee      	beq.n	80039ae <HAL_RCC_OscConfig+0x386>
 80039d0:	e014      	b.n	80039fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fd fa4d 	bl	8000e70 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fd fa49 	bl	8000e70 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0b8      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f0:	4b40      	ldr	r3, [pc, #256]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ee      	bne.n	80039da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b3c      	ldr	r3, [pc, #240]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a3b      	ldr	r2, [pc, #236]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80a4 	beq.w	8003b60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d06b      	beq.n	8003afc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d149      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a30      	ldr	r2, [pc, #192]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fa1a 	bl	8000e70 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fa16 	bl	8000e70 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e087      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	3b01      	subs	r3, #1
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	4313      	orrs	r3, r2
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd f9ea 	bl	8000e70 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fd f9e6 	bl	8000e70 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e057      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x478>
 8003abe:	e04f      	b.n	8003b60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd f9d0 	bl	8000e70 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd f9cc 	bl	8000e70 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e03d      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4ac>
 8003af2:	e035      	b.n	8003b60 <HAL_RCC_OscConfig+0x538>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x544>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d028      	beq.n	8003b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d121      	bne.n	8003b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d11a      	bne.n	8003b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	3b01      	subs	r3, #1
 8003b46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0d0      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d910      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b67      	ldr	r3, [pc, #412]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 020f 	bic.w	r2, r3, #15
 8003b9e:	4965      	ldr	r1, [pc, #404]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b63      	ldr	r3, [pc, #396]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b8      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d020      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a58      	ldr	r2, [pc, #352]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be8:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a52      	ldr	r2, [pc, #328]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	494d      	ldr	r1, [pc, #308]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d040      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d115      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e07f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e073      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b3d      	ldr	r3, [pc, #244]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06b      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4936      	ldr	r1, [pc, #216]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c64:	f7fd f904 	bl	8000e70 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fd f900 	bl	8000e70 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e053      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d210      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 020f 	bic.w	r2, r3, #15
 8003caa:	4922      	ldr	r1, [pc, #136]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e032      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4916      	ldr	r1, [pc, #88]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	490e      	ldr	r1, [pc, #56]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d02:	f000 f821 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003d06:	4601      	mov	r1, r0
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <HAL_RCC_ClockConfig+0x1cc>)
 8003d14:	5cd3      	ldrb	r3, [r2, r3]
 8003d16:	fa21 f303 	lsr.w	r3, r1, r3
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1d0>)
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1d4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd f860 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023c00 	.word	0x40023c00
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	0800c99c 	.word	0x0800c99c
 8003d40:	20000000 	.word	0x20000000
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	2300      	movs	r3, #0
 8003d58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5e:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d007      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x32>
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x38>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 808d 	bne.w	8003e8e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d76:	60bb      	str	r3, [r7, #8]
      break;
 8003d78:	e08c      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d7c:	60bb      	str	r3, [r7, #8]
      break;
 8003d7e:	e089      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d80:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d88:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d8a:	4b45      	ldr	r3, [pc, #276]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d023      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d96:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	f04f 0400 	mov.w	r4, #0
 8003da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	ea03 0501 	and.w	r5, r3, r1
 8003dac:	ea04 0602 	and.w	r6, r4, r2
 8003db0:	4a3d      	ldr	r2, [pc, #244]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003db2:	fb02 f106 	mul.w	r1, r2, r6
 8003db6:	2200      	movs	r2, #0
 8003db8:	fb02 f205 	mul.w	r2, r2, r5
 8003dbc:	440a      	add	r2, r1
 8003dbe:	493a      	ldr	r1, [pc, #232]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dc0:	fba5 0101 	umull	r0, r1, r5, r1
 8003dc4:	1853      	adds	r3, r2, r1
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f04f 0400 	mov.w	r4, #0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	f7fc fa75 	bl	80002c0 <__aeabi_uldivmod>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e049      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	099b      	lsrs	r3, r3, #6
 8003de4:	f04f 0400 	mov.w	r4, #0
 8003de8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	ea03 0501 	and.w	r5, r3, r1
 8003df4:	ea04 0602 	and.w	r6, r4, r2
 8003df8:	4629      	mov	r1, r5
 8003dfa:	4632      	mov	r2, r6
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	f04f 0400 	mov.w	r4, #0
 8003e04:	0154      	lsls	r4, r2, #5
 8003e06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e0a:	014b      	lsls	r3, r1, #5
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4622      	mov	r2, r4
 8003e10:	1b49      	subs	r1, r1, r5
 8003e12:	eb62 0206 	sbc.w	r2, r2, r6
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f04f 0400 	mov.w	r4, #0
 8003e1e:	0194      	lsls	r4, r2, #6
 8003e20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e24:	018b      	lsls	r3, r1, #6
 8003e26:	1a5b      	subs	r3, r3, r1
 8003e28:	eb64 0402 	sbc.w	r4, r4, r2
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	00e2      	lsls	r2, r4, #3
 8003e36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e3a:	00d9      	lsls	r1, r3, #3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4614      	mov	r4, r2
 8003e40:	195b      	adds	r3, r3, r5
 8003e42:	eb44 0406 	adc.w	r4, r4, r6
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	02a2      	lsls	r2, r4, #10
 8003e50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e54:	0299      	lsls	r1, r3, #10
 8003e56:	460b      	mov	r3, r1
 8003e58:	4614      	mov	r4, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f04f 0400 	mov.w	r4, #0
 8003e64:	461a      	mov	r2, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	f7fc fa2a 	bl	80002c0 <__aeabi_uldivmod>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	60bb      	str	r3, [r7, #8]
      break;
 8003e8c:	e002      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e90:	60bb      	str	r3, [r7, #8]
      break;
 8003e92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e94:	68bb      	ldr	r3, [r7, #8]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	00f42400 	.word	0x00f42400
 8003ea8:	017d7840 	.word	0x017d7840

08003eac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000000 	.word	0x20000000

08003ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ec8:	f7ff fff0 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ecc:	4601      	mov	r1, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0a9b      	lsrs	r3, r3, #10
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eda:	5cd3      	ldrb	r3, [r2, r3]
 8003edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800c9ac 	.word	0x0800c9ac

08003eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ef0:	f7ff ffdc 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0b5b      	lsrs	r3, r3, #13
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	0800c9ac 	.word	0x0800c9ac

08003f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f38:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a64      	ldr	r2, [pc, #400]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f42:	6093      	str	r3, [r2, #8]
 8003f44:	4b62      	ldr	r3, [pc, #392]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4960      	ldr	r1, [pc, #384]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d017      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f6a:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	4955      	ldr	r1, [pc, #340]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d017      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	4946      	ldr	r1, [pc, #280]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc4:	d101      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 808b 	beq.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	4a39      	ldr	r2, [pc, #228]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff0:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ffc:	4b35      	ldr	r3, [pc, #212]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fc ff32 	bl	8000e70 <HAL_GetTick>
 800400c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fc ff2e 	bl	8000e70 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e2bc      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d035      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d02e      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800406e:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d114      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fc fef6 	bl	8000e70 <HAL_GetTick>
 8004084:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fc fef2 	bl	8000e70 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e27e      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ee      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040b6:	d111      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040c6:	400b      	ands	r3, r1
 80040c8:	4901      	ldr	r1, [pc, #4]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
 80040ce:	e00b      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40007000 	.word	0x40007000
 80040d8:	0ffffcff 	.word	0x0ffffcff
 80040dc:	4ba4      	ldr	r3, [pc, #656]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4aa3      	ldr	r2, [pc, #652]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040e6:	6093      	str	r3, [r2, #8]
 80040e8:	4ba1      	ldr	r3, [pc, #644]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	499e      	ldr	r1, [pc, #632]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b00      	cmp	r3, #0
 8004104:	d010      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004106:	4b9a      	ldr	r3, [pc, #616]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410c:	4a98      	ldr	r2, [pc, #608]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800410e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004112:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004116:	4b96      	ldr	r3, [pc, #600]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004118:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	4993      	ldr	r1, [pc, #588]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004134:	4b8e      	ldr	r3, [pc, #568]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	498b      	ldr	r1, [pc, #556]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004156:	4b86      	ldr	r3, [pc, #536]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	4982      	ldr	r1, [pc, #520]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004178:	4b7d      	ldr	r3, [pc, #500]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004186:	497a      	ldr	r1, [pc, #488]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419a:	4b75      	ldr	r3, [pc, #468]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f023 0203 	bic.w	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	4971      	ldr	r1, [pc, #452]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041bc:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f023 020c 	bic.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4969      	ldr	r1, [pc, #420]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041de:	4b64      	ldr	r3, [pc, #400]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	4960      	ldr	r1, [pc, #384]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004200:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	4958      	ldr	r1, [pc, #352]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004222:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	494f      	ldr	r1, [pc, #316]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004244:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	4947      	ldr	r1, [pc, #284]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004266:	4b42      	ldr	r3, [pc, #264]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	493e      	ldr	r1, [pc, #248]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004288:	4b39      	ldr	r3, [pc, #228]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4936      	ldr	r1, [pc, #216]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d011      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042aa:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b8:	492d      	ldr	r1, [pc, #180]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c8:	d101      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e8:	4921      	ldr	r1, [pc, #132]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430a:	4919      	ldr	r1, [pc, #100]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800432c:	4910      	ldr	r1, [pc, #64]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d006      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 809d 	beq.w	8004482 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800434e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004354:	f7fc fd8c 	bl	8000e70 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435a:	e00b      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800435c:	f7fc fd88 	bl	8000e70 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d904      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e116      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004374:	4b8b      	ldr	r3, [pc, #556]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ed      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d113      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004394:	4b83      	ldr	r3, [pc, #524]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439a:	0e1b      	lsrs	r3, r3, #24
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	019a      	lsls	r2, r3, #6
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	071b      	lsls	r3, r3, #28
 80043b4:	497b      	ldr	r1, [pc, #492]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d024      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e6:	d11f      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043e8:	4b6e      	ldr	r3, [pc, #440]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ee:	0f1b      	lsrs	r3, r3, #28
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	431a      	orrs	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	071b      	lsls	r3, r3, #28
 8004408:	4966      	ldr	r1, [pc, #408]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004410:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004416:	f023 021f 	bic.w	r2, r3, #31
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	3b01      	subs	r3, #1
 8004420:	4960      	ldr	r1, [pc, #384]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	019a      	lsls	r2, r3, #6
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	071b      	lsls	r3, r3, #28
 8004448:	4956      	ldr	r1, [pc, #344]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004450:	4b54      	ldr	r3, [pc, #336]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a53      	ldr	r2, [pc, #332]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800445a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445c:	f7fc fd08 	bl	8000e70 <HAL_GetTick>
 8004460:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004464:	f7fc fd04 	bl	8000e70 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e092      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004476:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 8088 	bne.w	800459a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a45      	ldr	r2, [pc, #276]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004496:	f7fc fceb 	bl	8000e70 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800449e:	f7fc fce7 	bl	8000e70 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b64      	cmp	r3, #100	; 0x64
 80044aa:	d901      	bls.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e075      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044b0:	4b3c      	ldr	r3, [pc, #240]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044bc:	d0ef      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d024      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d120      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e6:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	019a      	lsls	r2, r3, #6
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	041b      	lsls	r3, r3, #16
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	061b      	lsls	r3, r3, #24
 8004506:	4927      	ldr	r1, [pc, #156]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800450e:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004514:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	3b01      	subs	r3, #1
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	4920      	ldr	r1, [pc, #128]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d018      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800453c:	d113      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800453e:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	0e1b      	lsrs	r3, r3, #24
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	019a      	lsls	r2, r3, #6
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	431a      	orrs	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	4911      	ldr	r1, [pc, #68]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004572:	f7fc fc7d 	bl	8000e70 <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800457a:	f7fc fc79 	bl	8000e70 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b64      	cmp	r3, #100	; 0x64
 8004586:	d901      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e007      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004598:	d1ef      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800

080045a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e040      	b.n	800463c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc fa96 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2224      	movs	r2, #36	; 0x24
 80045d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8c0 	bl	800476c <UART_SetConfig>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e022      	b.n	800463c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fb14 	bl	8004c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fb9b 	bl	8004d70 <UART_CheckIdleState>
 800463a:	4603      	mov	r3, r0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004658:	2b20      	cmp	r3, #32
 800465a:	f040 8081 	bne.w	8004760 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_Transmit+0x26>
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e079      	b.n	8004762 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_UART_Transmit+0x38>
 8004678:	2302      	movs	r3, #2
 800467a:	e072      	b.n	8004762 <HAL_UART_Transmit+0x11e>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2221      	movs	r2, #33	; 0x21
 8004690:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004692:	f7fc fbed 	bl	8000e70 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d108      	bne.n	80046c4 <HAL_UART_Transmit+0x80>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e003      	b.n	80046cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046d4:	e02c      	b.n	8004730 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fb78 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e038      	b.n	8004762 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	3302      	adds	r3, #2
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e007      	b.n	800471e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1cc      	bne.n	80046d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2200      	movs	r2, #0
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb45 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e005      	b.n	8004762 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4bb1      	ldr	r3, [pc, #708]	; (8004a5c <UART_SetConfig+0x2f0>)
 8004798:	4013      	ands	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a9f      	ldr	r2, [pc, #636]	; (8004a60 <UART_SetConfig+0x2f4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d121      	bne.n	800482c <UART_SetConfig+0xc0>
 80047e8:	4b9e      	ldr	r3, [pc, #632]	; (8004a64 <UART_SetConfig+0x2f8>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d816      	bhi.n	8004824 <UART_SetConfig+0xb8>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x90>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	08004819 	.word	0x08004819
 8004804:	08004813 	.word	0x08004813
 8004808:	0800481f 	.word	0x0800481f
 800480c:	2301      	movs	r3, #1
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e151      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004812:	2302      	movs	r3, #2
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e14e      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004818:	2304      	movs	r3, #4
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e14b      	b.n	8004ab6 <UART_SetConfig+0x34a>
 800481e:	2308      	movs	r3, #8
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e148      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	bf00      	nop
 800482a:	e144      	b.n	8004ab6 <UART_SetConfig+0x34a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a8d      	ldr	r2, [pc, #564]	; (8004a68 <UART_SetConfig+0x2fc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d134      	bne.n	80048a0 <UART_SetConfig+0x134>
 8004836:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <UART_SetConfig+0x2f8>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b0c      	cmp	r3, #12
 8004842:	d829      	bhi.n	8004898 <UART_SetConfig+0x12c>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0xe0>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004881 	.word	0x08004881
 8004850:	08004899 	.word	0x08004899
 8004854:	08004899 	.word	0x08004899
 8004858:	08004899 	.word	0x08004899
 800485c:	0800488d 	.word	0x0800488d
 8004860:	08004899 	.word	0x08004899
 8004864:	08004899 	.word	0x08004899
 8004868:	08004899 	.word	0x08004899
 800486c:	08004887 	.word	0x08004887
 8004870:	08004899 	.word	0x08004899
 8004874:	08004899 	.word	0x08004899
 8004878:	08004899 	.word	0x08004899
 800487c:	08004893 	.word	0x08004893
 8004880:	2300      	movs	r3, #0
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e117      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004886:	2302      	movs	r3, #2
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e114      	b.n	8004ab6 <UART_SetConfig+0x34a>
 800488c:	2304      	movs	r3, #4
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e111      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004892:	2308      	movs	r3, #8
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e10e      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004898:	2310      	movs	r3, #16
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	bf00      	nop
 800489e:	e10a      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a71      	ldr	r2, [pc, #452]	; (8004a6c <UART_SetConfig+0x300>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d120      	bne.n	80048ec <UART_SetConfig+0x180>
 80048aa:	4b6e      	ldr	r3, [pc, #440]	; (8004a64 <UART_SetConfig+0x2f8>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d00f      	beq.n	80048d8 <UART_SetConfig+0x16c>
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d802      	bhi.n	80048c2 <UART_SetConfig+0x156>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <UART_SetConfig+0x160>
 80048c0:	e010      	b.n	80048e4 <UART_SetConfig+0x178>
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d005      	beq.n	80048d2 <UART_SetConfig+0x166>
 80048c6:	2b30      	cmp	r3, #48	; 0x30
 80048c8:	d009      	beq.n	80048de <UART_SetConfig+0x172>
 80048ca:	e00b      	b.n	80048e4 <UART_SetConfig+0x178>
 80048cc:	2300      	movs	r3, #0
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e0f1      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80048d2:	2302      	movs	r3, #2
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e0ee      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80048d8:	2304      	movs	r3, #4
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e0eb      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80048de:	2308      	movs	r3, #8
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e0e8      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80048e4:	2310      	movs	r3, #16
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	bf00      	nop
 80048ea:	e0e4      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5f      	ldr	r2, [pc, #380]	; (8004a70 <UART_SetConfig+0x304>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d120      	bne.n	8004938 <UART_SetConfig+0x1cc>
 80048f6:	4b5b      	ldr	r3, [pc, #364]	; (8004a64 <UART_SetConfig+0x2f8>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d00f      	beq.n	8004924 <UART_SetConfig+0x1b8>
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d802      	bhi.n	800490e <UART_SetConfig+0x1a2>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <UART_SetConfig+0x1ac>
 800490c:	e010      	b.n	8004930 <UART_SetConfig+0x1c4>
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d005      	beq.n	800491e <UART_SetConfig+0x1b2>
 8004912:	2bc0      	cmp	r3, #192	; 0xc0
 8004914:	d009      	beq.n	800492a <UART_SetConfig+0x1be>
 8004916:	e00b      	b.n	8004930 <UART_SetConfig+0x1c4>
 8004918:	2300      	movs	r3, #0
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e0cb      	b.n	8004ab6 <UART_SetConfig+0x34a>
 800491e:	2302      	movs	r3, #2
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e0c8      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004924:	2304      	movs	r3, #4
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e0c5      	b.n	8004ab6 <UART_SetConfig+0x34a>
 800492a:	2308      	movs	r3, #8
 800492c:	77fb      	strb	r3, [r7, #31]
 800492e:	e0c2      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004930:	2310      	movs	r3, #16
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	bf00      	nop
 8004936:	e0be      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a4d      	ldr	r2, [pc, #308]	; (8004a74 <UART_SetConfig+0x308>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d124      	bne.n	800498c <UART_SetConfig+0x220>
 8004942:	4b48      	ldr	r3, [pc, #288]	; (8004a64 <UART_SetConfig+0x2f8>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004950:	d012      	beq.n	8004978 <UART_SetConfig+0x20c>
 8004952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004956:	d802      	bhi.n	800495e <UART_SetConfig+0x1f2>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <UART_SetConfig+0x200>
 800495c:	e012      	b.n	8004984 <UART_SetConfig+0x218>
 800495e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004962:	d006      	beq.n	8004972 <UART_SetConfig+0x206>
 8004964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004968:	d009      	beq.n	800497e <UART_SetConfig+0x212>
 800496a:	e00b      	b.n	8004984 <UART_SetConfig+0x218>
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e0a1      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004972:	2302      	movs	r3, #2
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e09e      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004978:	2304      	movs	r3, #4
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e09b      	b.n	8004ab6 <UART_SetConfig+0x34a>
 800497e:	2308      	movs	r3, #8
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e098      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004984:	2310      	movs	r3, #16
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	bf00      	nop
 800498a:	e094      	b.n	8004ab6 <UART_SetConfig+0x34a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a39      	ldr	r2, [pc, #228]	; (8004a78 <UART_SetConfig+0x30c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d124      	bne.n	80049e0 <UART_SetConfig+0x274>
 8004996:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <UART_SetConfig+0x2f8>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d012      	beq.n	80049cc <UART_SetConfig+0x260>
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049aa:	d802      	bhi.n	80049b2 <UART_SetConfig+0x246>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <UART_SetConfig+0x254>
 80049b0:	e012      	b.n	80049d8 <UART_SetConfig+0x26c>
 80049b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b6:	d006      	beq.n	80049c6 <UART_SetConfig+0x25a>
 80049b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049bc:	d009      	beq.n	80049d2 <UART_SetConfig+0x266>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x26c>
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e077      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e074      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e071      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e06e      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	bf00      	nop
 80049de:	e06a      	b.n	8004ab6 <UART_SetConfig+0x34a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <UART_SetConfig+0x310>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d124      	bne.n	8004a34 <UART_SetConfig+0x2c8>
 80049ea:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <UART_SetConfig+0x2f8>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d012      	beq.n	8004a20 <UART_SetConfig+0x2b4>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	d802      	bhi.n	8004a06 <UART_SetConfig+0x29a>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <UART_SetConfig+0x2a8>
 8004a04:	e012      	b.n	8004a2c <UART_SetConfig+0x2c0>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0a:	d006      	beq.n	8004a1a <UART_SetConfig+0x2ae>
 8004a0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a10:	d009      	beq.n	8004a26 <UART_SetConfig+0x2ba>
 8004a12:	e00b      	b.n	8004a2c <UART_SetConfig+0x2c0>
 8004a14:	2300      	movs	r3, #0
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e04d      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e04a      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004a20:	2304      	movs	r3, #4
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e047      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004a26:	2308      	movs	r3, #8
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e044      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	bf00      	nop
 8004a32:	e040      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a11      	ldr	r2, [pc, #68]	; (8004a80 <UART_SetConfig+0x314>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d139      	bne.n	8004ab2 <UART_SetConfig+0x346>
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <UART_SetConfig+0x2f8>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4c:	d027      	beq.n	8004a9e <UART_SetConfig+0x332>
 8004a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a52:	d817      	bhi.n	8004a84 <UART_SetConfig+0x318>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01c      	beq.n	8004a92 <UART_SetConfig+0x326>
 8004a58:	e027      	b.n	8004aaa <UART_SetConfig+0x33e>
 8004a5a:	bf00      	nop
 8004a5c:	efff69f3 	.word	0xefff69f3
 8004a60:	40011000 	.word	0x40011000
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40004400 	.word	0x40004400
 8004a6c:	40004800 	.word	0x40004800
 8004a70:	40004c00 	.word	0x40004c00
 8004a74:	40005000 	.word	0x40005000
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	40007800 	.word	0x40007800
 8004a80:	40007c00 	.word	0x40007c00
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	d006      	beq.n	8004a98 <UART_SetConfig+0x32c>
 8004a8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a8e:	d009      	beq.n	8004aa4 <UART_SetConfig+0x338>
 8004a90:	e00b      	b.n	8004aaa <UART_SetConfig+0x33e>
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e00e      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e00b      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e008      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e005      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	bf00      	nop
 8004ab0:	e001      	b.n	8004ab6 <UART_SetConfig+0x34a>
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abe:	d15b      	bne.n	8004b78 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004ac0:	7ffb      	ldrb	r3, [r7, #31]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d827      	bhi.n	8004b16 <UART_SetConfig+0x3aa>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x360>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004b01 	.word	0x08004b01
 8004ad8:	08004b17 	.word	0x08004b17
 8004adc:	08004b07 	.word	0x08004b07
 8004ae0:	08004b17 	.word	0x08004b17
 8004ae4:	08004b17 	.word	0x08004b17
 8004ae8:	08004b17 	.word	0x08004b17
 8004aec:	08004b0f 	.word	0x08004b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7ff f9e8 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8004af4:	61b8      	str	r0, [r7, #24]
        break;
 8004af6:	e013      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af8:	f7ff f9f8 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8004afc:	61b8      	str	r0, [r7, #24]
        break;
 8004afe:	e00f      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b00:	4b49      	ldr	r3, [pc, #292]	; (8004c28 <UART_SetConfig+0x4bc>)
 8004b02:	61bb      	str	r3, [r7, #24]
        break;
 8004b04:	e00c      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b06:	f7ff f91f 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004b0a:	61b8      	str	r0, [r7, #24]
        break;
 8004b0c:	e008      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b12:	61bb      	str	r3, [r7, #24]
        break;
 8004b14:	e004      	b.n	8004b20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d074      	beq.n	8004c10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	005a      	lsls	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d916      	bls.n	8004b72 <UART_SetConfig+0x406>
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4a:	d212      	bcs.n	8004b72 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f023 030f 	bic.w	r3, r3, #15
 8004b54:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	89fb      	ldrh	r3, [r7, #14]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	89fa      	ldrh	r2, [r7, #14]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e04e      	b.n	8004c10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	77bb      	strb	r3, [r7, #30]
 8004b76:	e04b      	b.n	8004c10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d827      	bhi.n	8004bce <UART_SetConfig+0x462>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x418>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	08004bcf 	.word	0x08004bcf
 8004b94:	08004bbf 	.word	0x08004bbf
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004bcf 	.word	0x08004bcf
 8004ba0:	08004bcf 	.word	0x08004bcf
 8004ba4:	08004bc7 	.word	0x08004bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7ff f98c 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8004bac:	61b8      	str	r0, [r7, #24]
        break;
 8004bae:	e013      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb0:	f7ff f99c 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8004bb4:	61b8      	str	r0, [r7, #24]
        break;
 8004bb6:	e00f      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <UART_SetConfig+0x4bc>)
 8004bba:	61bb      	str	r3, [r7, #24]
        break;
 8004bbc:	e00c      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bbe:	f7ff f8c3 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004bc2:	61b8      	str	r0, [r7, #24]
        break;
 8004bc4:	e008      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	61bb      	str	r3, [r7, #24]
        break;
 8004bcc:	e004      	b.n	8004bd8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8004bd6:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	085a      	lsrs	r2, r3, #1
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	d908      	bls.n	8004c0c <UART_SetConfig+0x4a0>
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d204      	bcs.n	8004c0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	60da      	str	r2, [r3, #12]
 8004c0a:	e001      	b.n	8004c10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	00f42400 	.word	0x00f42400

08004c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2a:	d10a      	bne.n	8004d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d80:	f7fc f876 	bl	8000e70 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d10e      	bne.n	8004db2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f817 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e00d      	b.n	8004dce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de6:	e05e      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d05a      	beq.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df0:	f7fc f83e 	bl	8000e70 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d302      	bcc.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11b      	bne.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e043      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02c      	beq.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5a:	d124      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e00f      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d091      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	f107 001c 	add.w	r0, r7, #28
 8004ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d126      	bne.n	8004f36 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <USB_CoreInit+0xb8>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f043 0210 	orr.w	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f942 	bl	80051b4 <USB_CoreReset>
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	e010      	b.n	8004f58 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f936 	bl	80051b4 <USB_CoreReset>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10b      	bne.n	8004f76 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f043 0206 	orr.w	r2, r3, #6
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f82:	b004      	add	sp, #16
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	ffbdffbf 	.word	0xffbdffbf

08004f8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f043 0201 	orr.w	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d106      	bne.n	8004ffc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	e00b      	b.n	8005014 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e001      	b.n	8005014 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e003      	b.n	800501c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005014:	2032      	movs	r0, #50	; 0x32
 8005016:	f7fb ff37 	bl	8000e88 <HAL_Delay>

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a09      	ldr	r2, [pc, #36]	; (800506c <USB_FlushTxFifo+0x48>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e006      	b.n	800505e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d0f0      	beq.n	800503e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	00030d40 	.word	0x00030d40

08005070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2210      	movs	r2, #16
 8005080:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <USB_FlushRxFifo+0x40>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e006      	b.n	80050a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d0f0      	beq.n	8005082 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	00030d40 	.word	0x00030d40

080050b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b089      	sub	sp, #36	; 0x24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4611      	mov	r1, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	460b      	mov	r3, r1
 80050c4:	71fb      	strb	r3, [r7, #7]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80050d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d11a      	bne.n	8005110 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050da:	88bb      	ldrh	r3, [r7, #4]
 80050dc:	3303      	adds	r3, #3
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	e00f      	b.n	8005108 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	031a      	lsls	r2, r3, #12
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f4:	461a      	mov	r2, r3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3304      	adds	r3, #4
 8005100:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	3301      	adds	r3, #1
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	429a      	cmp	r2, r3
 800510e:	d3eb      	bcc.n	80050e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3724      	adds	r7, #36	; 0x24
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800511e:	b480      	push	{r7}
 8005120:	b089      	sub	sp, #36	; 0x24
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	4613      	mov	r3, r2
 800512a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	3303      	adds	r3, #3
 8005138:	089b      	lsrs	r3, r3, #2
 800513a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e00b      	b.n	800515a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	601a      	str	r2, [r3, #0]
    pDest++;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3304      	adds	r3, #4
 8005152:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	3301      	adds	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d3ef      	bcc.n	8005142 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005162:	69fb      	ldr	r3, [r7, #28]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3724      	adds	r7, #36	; 0x24
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4013      	ands	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005188:	68fb      	ldr	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0301 	and.w	r3, r3, #1
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <USB_CoreReset+0x64>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e01b      	b.n	800520a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	daf2      	bge.n	80051c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <USB_CoreReset+0x64>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d901      	bls.n	80051fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e006      	b.n	800520a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d0f0      	beq.n	80051ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	00030d40 	.word	0x00030d40

0800521c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521c:	b084      	sub	sp, #16
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	f107 001c 	add.w	r0, r7, #28
 800522a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d018      	beq.n	8005288 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b01      	cmp	r3, #1
 800525a:	d10a      	bne.n	8005272 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800526a:	f043 0304 	orr.w	r3, r3, #4
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e014      	b.n	800529c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e009      	b.n	800529c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005296:	f023 0304 	bic.w	r3, r3, #4
 800529a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800529c:	2110      	movs	r1, #16
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fec0 	bl	8005024 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff fee3 	bl	8005070 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e015      	b.n	80052dc <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	461a      	mov	r2, r3
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
 80052c2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d0:	461a      	mov	r2, r3
 80052d2:	2300      	movs	r3, #0
 80052d4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d3e5      	bcc.n	80052b0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80052e4:	2101      	movs	r1, #1
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8ac 	bl	8005444 <USB_DriveVbus>

  HAL_Delay(200U);
 80052ec:	20c8      	movs	r0, #200	; 0xc8
 80052ee:	f7fb fdcb 	bl	8000e88 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a14      	ldr	r2, [pc, #80]	; (8005368 <USB_HostInit+0x14c>)
 8005318:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a13      	ldr	r2, [pc, #76]	; (800536c <USB_HostInit+0x150>)
 800531e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005322:	e009      	b.n	8005338 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a10      	ldr	r2, [pc, #64]	; (8005370 <USB_HostInit+0x154>)
 800532e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a10      	ldr	r2, [pc, #64]	; (8005374 <USB_HostInit+0x158>)
 8005334:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d105      	bne.n	800534a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f043 0210 	orr.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <USB_HostInit+0x15c>)
 8005350:	4313      	orrs	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005362:	b004      	add	sp, #16
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	01000200 	.word	0x01000200
 800536c:	00e00300 	.word	0x00e00300
 8005370:	00600080 	.word	0x00600080
 8005374:	004000e0 	.word	0x004000e0
 8005378:	a3200008 	.word	0xa3200008

0800537c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c4:	461a      	mov	r2, r3
 80053c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053ca:	6053      	str	r3, [r2, #4]
 80053cc:	e009      	b.n	80053e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d106      	bne.n	80053e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053da:	461a      	mov	r2, r3
 80053dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80053e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005410:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005420:	2064      	movs	r0, #100	; 0x64
 8005422:	f7fb fd31 	bl	8000e88 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800542e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005432:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005434:	200a      	movs	r0, #10
 8005436:	f7fb fd27 	bl	8000e88 <HAL_Delay>

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005468:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <USB_DriveVbus+0x44>
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d106      	bne.n	8005488 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005486:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	d109      	bne.n	80054a8 <USB_DriveVbus+0x64>
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	0c5b      	lsrs	r3, r3, #17
 80054d4:	f003 0303 	and.w	r3, r3, #3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	b29b      	uxth	r3, r3
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4603      	mov	r3, r0
 8005518:	70fb      	strb	r3, [r7, #3]
 800551a:	460b      	mov	r3, r1
 800551c:	70bb      	strb	r3, [r7, #2]
 800551e:	4613      	mov	r3, r2
 8005520:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	461a      	mov	r2, r3
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800553e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005542:	2b03      	cmp	r3, #3
 8005544:	d87e      	bhi.n	8005644 <USB_HC_Init+0x13c>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <USB_HC_Init+0x44>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	0800555d 	.word	0x0800555d
 8005550:	08005607 	.word	0x08005607
 8005554:	0800555d 	.word	0x0800555d
 8005558:	080055c9 	.word	0x080055c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	461a      	mov	r2, r3
 800556a:	f240 439d 	movw	r3, #1181	; 0x49d
 800556e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da10      	bge.n	800559a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	440a      	add	r2, r1
 800558e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005596:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005598:	e057      	b.n	800564a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d051      	beq.n	800564a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055c4:	60d3      	str	r3, [r2, #12]
      break;
 80055c6:	e040      	b.n	800564a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	461a      	mov	r2, r3
 80055d6:	f240 639d 	movw	r3, #1693	; 0x69d
 80055da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da34      	bge.n	800564e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005604:	e023      	b.n	800564e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	f240 2325 	movw	r3, #549	; 0x225
 8005618:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800561a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800561e:	2b00      	cmp	r3, #0
 8005620:	da17      	bge.n	8005652 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	440a      	add	r2, r1
 8005638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005640:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005642:	e006      	b.n	8005652 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	77fb      	strb	r3, [r7, #31]
      break;
 8005648:	e004      	b.n	8005654 <USB_HC_Init+0x14c>
      break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <USB_HC_Init+0x14c>
      break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <USB_HC_Init+0x14c>
      break;
 8005652:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	2101      	movs	r1, #1
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	6939      	ldr	r1, [r7, #16]
 800566a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800566e:	4313      	orrs	r3, r2
 8005670:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800567e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005682:	2b00      	cmp	r3, #0
 8005684:	da03      	bge.n	800568e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	e001      	b.n	8005692 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff ff0f 	bl	80054b6 <USB_GetHostSpeed>
 8005698:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800569a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d106      	bne.n	80056b0 <USB_HC_Init+0x1a8>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d003      	beq.n	80056b0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80056a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e001      	b.n	80056b4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056b4:	787b      	ldrb	r3, [r7, #1]
 80056b6:	059b      	lsls	r3, r3, #22
 80056b8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056bc:	78bb      	ldrb	r3, [r7, #2]
 80056be:	02db      	lsls	r3, r3, #11
 80056c0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056c4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056ca:	049b      	lsls	r3, r3, #18
 80056cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	0159      	lsls	r1, r3, #5
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	440b      	add	r3, r1
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056f0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80056f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d10f      	bne.n	800571a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	440a      	add	r2, r1
 8005710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005714:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005718:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800571a:	7ffb      	ldrb	r3, [r7, #31]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	; 0x30
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800573c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005740:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02d      	beq.n	80057aa <USB_HC_StartXfer+0x86>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	791b      	ldrb	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d129      	bne.n	80057aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d117      	bne.n	800578c <USB_HC_StartXfer+0x68>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	79db      	ldrb	r3, [r3, #7]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <USB_HC_StartXfer+0x48>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	79db      	ldrb	r3, [r3, #7]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d10f      	bne.n	800578c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	6a3a      	ldr	r2, [r7, #32]
 8005780:	440a      	add	r2, r1
 8005782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <USB_HC_StartXfer+0x86>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	795b      	ldrb	r3, [r3, #5]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	4619      	mov	r1, r3
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa31 	bl	8005c08 <USB_DoPing>
      return HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e0f9      	b.n	800599e <USB_HC_StartXfer+0x27a>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	8912      	ldrh	r2, [r2, #8]
 80057ba:	4413      	add	r3, r2
 80057bc:	3b01      	subs	r3, #1
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	8912      	ldrh	r2, [r2, #8]
 80057c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80057c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057ca:	8b7b      	ldrh	r3, [r7, #26]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d90b      	bls.n	80057e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80057d0:	8b7b      	ldrh	r3, [r7, #26]
 80057d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	8912      	ldrh	r2, [r2, #8]
 80057da:	fb02 f203 	mul.w	r2, r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	611a      	str	r2, [r3, #16]
 80057e2:	e001      	b.n	80057e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80057e4:	2301      	movs	r3, #1
 80057e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	8912      	ldrh	r2, [r2, #8]
 80057f6:	fb02 f203 	mul.w	r2, r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	611a      	str	r2, [r3, #16]
 80057fe:	e003      	b.n	8005808 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005812:	04d9      	lsls	r1, r3, #19
 8005814:	4b64      	ldr	r3, [pc, #400]	; (80059a8 <USB_HC_StartXfer+0x284>)
 8005816:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005818:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	7a9b      	ldrb	r3, [r3, #10]
 800581e:	075b      	lsls	r3, r3, #29
 8005820:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	0148      	lsls	r0, r1, #5
 8005828:	6a39      	ldr	r1, [r7, #32]
 800582a:	4401      	add	r1, r0
 800582c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005830:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005832:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	68d9      	ldr	r1, [r3, #12]
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	4413      	add	r3, r2
 8005846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584a:	460a      	mov	r2, r1
 800584c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	440a      	add	r2, r1
 800587c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005884:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	7e7b      	ldrb	r3, [r7, #25]
 8005896:	075b      	lsls	r3, r3, #29
 8005898:	69f9      	ldr	r1, [r7, #28]
 800589a:	0148      	lsls	r0, r1, #5
 800589c:	6a39      	ldr	r1, [r7, #32]
 800589e:	4401      	add	r1, r0
 80058a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80058a4:	4313      	orrs	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	78db      	ldrb	r3, [r3, #3]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	e003      	b.n	80058da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	461a      	mov	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e04f      	b.n	800599e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	78db      	ldrb	r3, [r3, #3]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d14a      	bne.n	800599c <USB_HC_StartXfer+0x278>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d046      	beq.n	800599c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	79db      	ldrb	r3, [r3, #7]
 8005912:	2b03      	cmp	r3, #3
 8005914:	d830      	bhi.n	8005978 <USB_HC_StartXfer+0x254>
 8005916:	a201      	add	r2, pc, #4	; (adr r2, 800591c <USB_HC_StartXfer+0x1f8>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	0800592d 	.word	0x0800592d
 8005920:	08005951 	.word	0x08005951
 8005924:	0800592d 	.word	0x0800592d
 8005928:	08005951 	.word	0x08005951
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	3303      	adds	r3, #3
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005936:	8afa      	ldrh	r2, [r7, #22]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	b29b      	uxth	r3, r3
 800593e:	429a      	cmp	r2, r3
 8005940:	d91c      	bls.n	800597c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f043 0220 	orr.w	r2, r3, #32
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	619a      	str	r2, [r3, #24]
        }
        break;
 800594e:	e015      	b.n	800597c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	3303      	adds	r3, #3
 8005956:	089b      	lsrs	r3, r3, #2
 8005958:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800595a:	8afa      	ldrh	r2, [r7, #22]
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	b29b      	uxth	r3, r3
 8005966:	429a      	cmp	r2, r3
 8005968:	d90a      	bls.n	8005980 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	619a      	str	r2, [r3, #24]
        }
        break;
 8005976:	e003      	b.n	8005980 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005978:	bf00      	nop
 800597a:	e002      	b.n	8005982 <USB_HC_StartXfer+0x25e>
        break;
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <USB_HC_StartXfer+0x25e>
        break;
 8005980:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	68d9      	ldr	r1, [r3, #12]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	785a      	ldrb	r2, [r3, #1]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	b298      	uxth	r0, r3
 8005990:	2300      	movs	r3, #0
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	4603      	mov	r3, r0
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fb8c 	bl	80050b4 <USB_WritePacket>
  }

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	1ff80000 	.word	0x1ff80000

080059ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	b29b      	uxth	r3, r3
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b089      	sub	sp, #36	; 0x24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	460b      	mov	r3, r1
 80059d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	0c9b      	lsrs	r3, r3, #18
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	0fdb      	lsrs	r3, r3, #31
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d104      	bne.n	8005a28 <USB_HC_Halt+0x5a>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e0e8      	b.n	8005bfa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <USB_HC_Halt+0x66>
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d173      	bne.n	8005b1c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 80cb 	bne.w	8005bf8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d143      	bne.n	8005af6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a8c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005acc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ada:	d81d      	bhi.n	8005b18 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af2:	d0ec      	beq.n	8005ace <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005af4:	e080      	b.n	8005bf8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b16:	e06f      	b.n	8005bf8 <USB_HC_Halt+0x22a>
            break;
 8005b18:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b1a:	e06d      	b.n	8005bf8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b3a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d143      	bne.n	8005bd4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005baa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb8:	d81d      	bhi.n	8005bf6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd0:	d0ec      	beq.n	8005bac <USB_HC_Halt+0x1de>
 8005bd2:	e011      	b.n	8005bf8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e000      	b.n	8005bf8 <USB_HC_Halt+0x22a>
          break;
 8005bf6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	04da      	lsls	r2, r3, #19
 8005c24:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <USB_DoPing+0x74>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	1ff80000 	.word	0x1ff80000

08005c80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff f98c 	bl	8004fae <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005c96:	2110      	movs	r1, #16
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff f9c3 	bl	8005024 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff f9e6 	bl	8005070 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	e01f      	b.n	8005cea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cc0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cc8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cd0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	461a      	mov	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d9dc      	bls.n	8005caa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e034      	b.n	8005d60 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3301      	adds	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d3c:	d80c      	bhi.n	8005d58 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d54:	d0ec      	beq.n	8005d30 <USB_StopHost+0xb0>
 8005d56:	e000      	b.n	8005d5a <USB_StopHost+0xda>
        break;
 8005d58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d9c7      	bls.n	8005cf6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff f905 	bl	8004f8c <USB_EnableGlobalInt>

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
char USBH_Path[4];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005d90:	4904      	ldr	r1, [pc, #16]	; (8005da4 <MX_FATFS_Init+0x18>)
 8005d92:	4805      	ldr	r0, [pc, #20]	; (8005da8 <MX_FATFS_Init+0x1c>)
 8005d94:	f005 fa08 	bl	800b1a8 <FATFS_LinkDriver>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <MX_FATFS_Init+0x20>)
 8005d9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20010838 	.word	0x20010838
 8005da8:	0800c9b4 	.word	0x0800c9b4
 8005dac:	20010ca0 	.word	0x20010ca0

08005db0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005db4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	4619      	mov	r1, r3
 8005dea:	4808      	ldr	r0, [pc, #32]	; (8005e0c <USBH_status+0x34>)
 8005dec:	f000 fe11 	bl	8006a12 <USBH_MSC_UnitIsReady>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <USBH_status+0x24>
  {
    res = RES_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	e001      	b.n	8005e00 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20010ca4 	.word	0x20010ca4

08005e10 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b094      	sub	sp, #80	; 0x50
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005e26:	7bf9      	ldrb	r1, [r7, #15]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4812      	ldr	r0, [pc, #72]	; (8005e7c <USBH_read+0x6c>)
 8005e32:	f000 fe38 	bl	8006aa6 <USBH_MSC_Read>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d103      	bne.n	8005e44 <USBH_read+0x34>
  {
    res = RES_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e42:	e015      	b.n	8005e70 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005e44:	f107 0210 	add.w	r2, r7, #16
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	480b      	ldr	r0, [pc, #44]	; (8005e7c <USBH_read+0x6c>)
 8005e4e:	f000 fe06 	bl	8006a5e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005e52:	7f7b      	ldrb	r3, [r7, #29]
 8005e54:	2b28      	cmp	r3, #40	; 0x28
 8005e56:	d003      	beq.n	8005e60 <USBH_read+0x50>
 8005e58:	2b3a      	cmp	r3, #58	; 0x3a
 8005e5a:	d001      	beq.n	8005e60 <USBH_read+0x50>
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d103      	bne.n	8005e68 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005e60:	2303      	movs	r3, #3
 8005e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005e66:	e003      	b.n	8005e70 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005e6e:	bf00      	nop
    }
  }

  return res;
 8005e70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3748      	adds	r7, #72	; 0x48
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20010ca4 	.word	0x20010ca4

08005e80 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b094      	sub	sp, #80	; 0x50
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005e96:	7bf9      	ldrb	r1, [r7, #15]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4817      	ldr	r0, [pc, #92]	; (8005f00 <USBH_write+0x80>)
 8005ea2:	f000 fe69 	bl	8006b78 <USBH_MSC_Write>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d103      	bne.n	8005eb4 <USBH_write+0x34>
  {
    res = RES_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005eb2:	e01f      	b.n	8005ef4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005eb4:	f107 0210 	add.w	r2, r7, #16
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4810      	ldr	r0, [pc, #64]	; (8005f00 <USBH_write+0x80>)
 8005ebe:	f000 fdce 	bl	8006a5e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005ec2:	7f7b      	ldrb	r3, [r7, #29]
 8005ec4:	2b27      	cmp	r3, #39	; 0x27
 8005ec6:	d009      	beq.n	8005edc <USBH_write+0x5c>
 8005ec8:	2b27      	cmp	r3, #39	; 0x27
 8005eca:	dc02      	bgt.n	8005ed2 <USBH_write+0x52>
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d009      	beq.n	8005ee4 <USBH_write+0x64>
 8005ed0:	e00c      	b.n	8005eec <USBH_write+0x6c>
 8005ed2:	2b28      	cmp	r3, #40	; 0x28
 8005ed4:	d006      	beq.n	8005ee4 <USBH_write+0x64>
 8005ed6:	2b3a      	cmp	r3, #58	; 0x3a
 8005ed8:	d004      	beq.n	8005ee4 <USBH_write+0x64>
 8005eda:	e007      	b.n	8005eec <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005edc:	2302      	movs	r3, #2
 8005ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005ee2:	e007      	b.n	8005ef4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005eea:	e003      	b.n	8005ef4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005ef2:	bf00      	nop
    }
  }

  return res;
 8005ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3748      	adds	r7, #72	; 0x48
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20010ca4 	.word	0x20010ca4

08005f04 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b090      	sub	sp, #64	; 0x40
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	603a      	str	r2, [r7, #0]
 8005f0e:	71fb      	strb	r3, [r7, #7]
 8005f10:	460b      	mov	r3, r1
 8005f12:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005f1a:	79bb      	ldrb	r3, [r7, #6]
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d852      	bhi.n	8005fc6 <USBH_ioctl+0xc2>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <USBH_ioctl+0x24>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f41 	.word	0x08005f41
 8005f30:	08005f6b 	.word	0x08005f6b
 8005f34:	08005f97 	.word	0x08005f97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005f3e:	e045      	b.n	8005fcc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005f40:	f107 0208 	add.w	r2, r7, #8
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	4619      	mov	r1, r3
 8005f48:	4823      	ldr	r0, [pc, #140]	; (8005fd8 <USBH_ioctl+0xd4>)
 8005f4a:	f000 fd88 	bl	8006a5e <USBH_MSC_GetLUNInfo>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005f60:	e034      	b.n	8005fcc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005f68:	e030      	b.n	8005fcc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005f6a:	f107 0208 	add.w	r2, r7, #8
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	4619      	mov	r1, r3
 8005f72:	4819      	ldr	r0, [pc, #100]	; (8005fd8 <USBH_ioctl+0xd4>)
 8005f74:	f000 fd73 	bl	8006a5e <USBH_MSC_GetLUNInfo>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d107      	bne.n	8005f8e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005f7e:	8a3b      	ldrh	r3, [r7, #16]
 8005f80:	461a      	mov	r2, r3
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005f8c:	e01e      	b.n	8005fcc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005f94:	e01a      	b.n	8005fcc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005f96:	f107 0208 	add.w	r2, r7, #8
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	480e      	ldr	r0, [pc, #56]	; (8005fd8 <USBH_ioctl+0xd4>)
 8005fa0:	f000 fd5d 	bl	8006a5e <USBH_MSC_GetLUNInfo>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d109      	bne.n	8005fbe <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005faa:	8a3b      	ldrh	r3, [r7, #16]
 8005fac:	0a5b      	lsrs	r3, r3, #9
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005fbc:	e006      	b.n	8005fcc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005fc4:	e002      	b.n	8005fcc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005fc6:	2304      	movs	r3, #4
 8005fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3740      	adds	r7, #64	; 0x40
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20010ca4 	.word	0x20010ca4

08005fdc <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	af04      	add	r7, sp, #16
 8005fe2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fea:	7919      	ldrb	r1, [r3, #4]
 8005fec:	2350      	movs	r3, #80	; 0x50
 8005fee:	2206      	movs	r2, #6
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fc4f 	bl	8007894 <USBH_FindInterface>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2bff      	cmp	r3, #255	; 0xff
 8005ffe:	d002      	beq.n	8006006 <USBH_MSC_InterfaceInit+0x2a>
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d901      	bls.n	800600a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006006:	2302      	movs	r3, #2
 8006008:	e0ef      	b.n	80061ea <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fc24 	bl	800785c <USBH_SelectInterface>
 8006014:	4603      	mov	r3, r0
 8006016:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800601e:	2302      	movs	r3, #2
 8006020:	e0e3      	b.n	80061ea <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006028:	f44f 7080 	mov.w	r0, #256	; 0x100
 800602c:	f005 fc66 	bl	800b8fc <malloc>
 8006030:	4603      	mov	r3, r0
 8006032:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006044:	2302      	movs	r3, #2
 8006046:	e0d0      	b.n	80061ea <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800604c:	2100      	movs	r1, #0
 800604e:	68b8      	ldr	r0, [r7, #8]
 8006050:	f005 fc6f 	bl	800b932 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	211a      	movs	r1, #26
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b25b      	sxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	da16      	bge.n	800609a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	211a      	movs	r1, #26
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	4413      	add	r3, r2
 8006078:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	211a      	movs	r1, #26
 8006088:	fb01 f303 	mul.w	r3, r1, r3
 800608c:	4413      	add	r3, r2
 800608e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006092:	881a      	ldrh	r2, [r3, #0]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	815a      	strh	r2, [r3, #10]
 8006098:	e015      	b.n	80060c6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	211a      	movs	r1, #26
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	211a      	movs	r1, #26
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	211a      	movs	r1, #26
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da16      	bge.n	800610c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	211a      	movs	r1, #26
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060ee:	781a      	ldrb	r2, [r3, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	211a      	movs	r1, #26
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	4413      	add	r3, r2
 8006100:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006104:	881a      	ldrh	r2, [r3, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	815a      	strh	r2, [r3, #10]
 800610a:	e015      	b.n	8006138 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	211a      	movs	r1, #26
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	4413      	add	r3, r2
 8006118:	f203 3356 	addw	r3, r3, #854	; 0x356
 800611c:	781a      	ldrb	r2, [r3, #0]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	211a      	movs	r1, #26
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006132:	881a      	ldrh	r2, [r3, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2200      	movs	r2, #0
 8006142:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2200      	movs	r2, #0
 8006148:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	799b      	ldrb	r3, [r3, #6]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f002 fdc2 	bl	8008cda <USBH_AllocPipe>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	79db      	ldrb	r3, [r3, #7]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f002 fdb8 	bl	8008cda <USBH_AllocPipe>
 800616a:	4603      	mov	r3, r0
 800616c:	461a      	mov	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fda4 	bl	8006cc0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	7959      	ldrb	r1, [r3, #5]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	7998      	ldrb	r0, [r3, #6]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	8912      	ldrh	r2, [r2, #8]
 8006190:	9202      	str	r2, [sp, #8]
 8006192:	2202      	movs	r2, #2
 8006194:	9201      	str	r2, [sp, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4623      	mov	r3, r4
 800619a:	4602      	mov	r2, r0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f002 fd6d 	bl	8008c7c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	7919      	ldrb	r1, [r3, #4]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	79d8      	ldrb	r0, [r3, #7]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	8952      	ldrh	r2, [r2, #10]
 80061ba:	9202      	str	r2, [sp, #8]
 80061bc:	2202      	movs	r2, #2
 80061be:	9201      	str	r2, [sp, #4]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	4623      	mov	r3, r4
 80061c4:	4602      	mov	r2, r0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f002 fd58 	bl	8008c7c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	791b      	ldrb	r3, [r3, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f005 fa6f 	bl	800b6b8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	795b      	ldrb	r3, [r3, #5]
 80061de:	2200      	movs	r2, #0
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f005 fa68 	bl	800b6b8 <USBH_LL_SetToggle>

  return USBH_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd90      	pop	{r4, r7, pc}

080061f2 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	795b      	ldrb	r3, [r3, #5]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	795b      	ldrb	r3, [r3, #5]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 fd51 	bl	8008cba <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	795b      	ldrb	r3, [r3, #5]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f002 fd7c 	bl	8008d1c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	791b      	ldrb	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	791b      	ldrb	r3, [r3, #4]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f002 fd3e 	bl	8008cba <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	791b      	ldrb	r3, [r3, #4]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f002 fd69 	bl	8008d1c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	4618      	mov	r0, r3
 8006266:	f005 fb51 	bl	800b90c <free>
    phost->pActiveClass->pData = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006270:	2200      	movs	r2, #0
 8006272:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	7b9b      	ldrb	r3, [r3, #14]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d004      	beq.n	80062a6 <USBH_MSC_ClassRequest+0x28>
 800629c:	2b03      	cmp	r3, #3
 800629e:	d03e      	beq.n	800631e <USBH_MSC_ClassRequest+0xa0>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d000      	beq.n	80062a6 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80062a4:	e04a      	b.n	800633c <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fcea 	bl	8006c84 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d104      	bne.n	80062c4 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d135      	bne.n	8006336 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d804      	bhi.n	80062dc <USBH_MSC_ClassRequest+0x5e>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	3301      	adds	r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	e000      	b.n	80062de <USBH_MSC_ClassRequest+0x60>
 80062dc:	2202      	movs	r2, #2
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	73bb      	strb	r3, [r7, #14]
 80062e6:	e014      	b.n	8006312 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	2134      	movs	r1, #52	; 0x34
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	3392      	adds	r3, #146	; 0x92
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	2134      	movs	r1, #52	; 0x34
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	4413      	add	r3, r2
 8006306:	33c1      	adds	r3, #193	; 0xc1
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	3301      	adds	r3, #1
 8006310:	73bb      	strb	r3, [r7, #14]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	7bba      	ldrb	r2, [r7, #14]
 8006318:	429a      	cmp	r2, r3
 800631a:	d3e5      	bcc.n	80062e8 <USBH_MSC_ClassRequest+0x6a>
      break;
 800631c:	e00b      	b.n	8006336 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800631e:	2100      	movs	r1, #0
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f002 f878 	bl	8008416 <USBH_ClrFeature>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d106      	bne.n	800633a <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	7bda      	ldrb	r2, [r3, #15]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	739a      	strb	r2, [r3, #14]
      break;
 8006334:	e001      	b.n	800633a <USBH_MSC_ClassRequest+0xbc>
      break;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <USBH_MSC_ClassRequest+0xbe>
      break;
 800633a:	bf00      	nop
  }

  return status;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800635a:	2301      	movs	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006362:	2301      	movs	r3, #1
 8006364:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	7b1b      	ldrb	r3, [r3, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <USBH_MSC_Process+0x2e>
 800636e:	2b01      	cmp	r3, #1
 8006370:	f000 8271 	beq.w	8006856 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006374:	e272      	b.n	800685c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	429a      	cmp	r2, r3
 8006384:	f080 824f 	bcs.w	8006826 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800638e:	4619      	mov	r1, r3
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	2334      	movs	r3, #52	; 0x34
 8006394:	fb03 f301 	mul.w	r3, r3, r1
 8006398:	4413      	add	r3, r2
 800639a:	3391      	adds	r3, #145	; 0x91
 800639c:	2201      	movs	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063a6:	4619      	mov	r1, r3
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	2334      	movs	r3, #52	; 0x34
 80063ac:	fb03 f301 	mul.w	r3, r3, r1
 80063b0:	4413      	add	r3, r2
 80063b2:	3390      	adds	r3, #144	; 0x90
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	f200 8243 	bhi.w	8006842 <USBH_MSC_Process+0x4fa>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <USBH_MSC_Process+0x7c>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	08006843 	.word	0x08006843
 80063cc:	080064b1 	.word	0x080064b1
 80063d0:	08006635 	.word	0x08006635
 80063d4:	0800640f 	.word	0x0800640f
 80063d8:	08006701 	.word	0x08006701
 80063dc:	08006843 	.word	0x08006843
 80063e0:	08006843 	.word	0x08006843
 80063e4:	08006815 	.word	0x08006815
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063ee:	4619      	mov	r1, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	2334      	movs	r3, #52	; 0x34
 80063f4:	fb03 f301 	mul.w	r3, r3, r1
 80063f8:	4413      	add	r3, r2
 80063fa:	3390      	adds	r3, #144	; 0x90
 80063fc:	2204      	movs	r2, #4
 80063fe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800640c:	e222      	b.n	8006854 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006414:	b2d9      	uxtb	r1, r3
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800641c:	461a      	mov	r2, r3
 800641e:	2334      	movs	r3, #52	; 0x34
 8006420:	fb03 f302 	mul.w	r3, r3, r2
 8006424:	3398      	adds	r3, #152	; 0x98
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4413      	add	r3, r2
 800642a:	3307      	adds	r3, #7
 800642c:	461a      	mov	r2, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 ff68 	bl	8007304 <USBH_MSC_SCSI_Inquiry>
 8006434:	4603      	mov	r3, r0
 8006436:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006444:	4619      	mov	r1, r3
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	2334      	movs	r3, #52	; 0x34
 800644a:	fb03 f301 	mul.w	r3, r3, r1
 800644e:	4413      	add	r3, r2
 8006450:	3390      	adds	r3, #144	; 0x90
 8006452:	2202      	movs	r2, #2
 8006454:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d10c      	bne.n	8006476 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006462:	4619      	mov	r1, r3
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	2334      	movs	r3, #52	; 0x34
 8006468:	fb03 f301 	mul.w	r3, r3, r1
 800646c:	4413      	add	r3, r2
 800646e:	3390      	adds	r3, #144	; 0x90
 8006470:	2205      	movs	r2, #5
 8006472:	701a      	strb	r2, [r3, #0]
            break;
 8006474:	e1e7      	b.n	8006846 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b04      	cmp	r3, #4
 800647a:	f040 81e4 	bne.w	8006846 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006484:	4619      	mov	r1, r3
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	2334      	movs	r3, #52	; 0x34
 800648a:	fb03 f301 	mul.w	r3, r3, r1
 800648e:	4413      	add	r3, r2
 8006490:	3390      	adds	r3, #144	; 0x90
 8006492:	2201      	movs	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800649c:	4619      	mov	r1, r3
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	2334      	movs	r3, #52	; 0x34
 80064a2:	fb03 f301 	mul.w	r3, r3, r1
 80064a6:	4413      	add	r3, r2
 80064a8:	3391      	adds	r3, #145	; 0x91
 80064aa:	2202      	movs	r2, #2
 80064ac:	701a      	strb	r2, [r3, #0]
            break;
 80064ae:	e1ca      	b.n	8006846 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fe64 	bl	8007188 <USBH_MSC_SCSI_TestUnitReady>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d149      	bne.n	800655e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064d0:	4619      	mov	r1, r3
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	2334      	movs	r3, #52	; 0x34
 80064d6:	fb03 f301 	mul.w	r3, r3, r1
 80064da:	4413      	add	r3, r2
 80064dc:	3392      	adds	r3, #146	; 0x92
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064ea:	4619      	mov	r1, r3
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	2334      	movs	r3, #52	; 0x34
 80064f0:	fb03 f301 	mul.w	r3, r3, r1
 80064f4:	4413      	add	r3, r2
 80064f6:	33c1      	adds	r3, #193	; 0xc1
 80064f8:	2201      	movs	r2, #1
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	e00b      	b.n	8006516 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006504:	4619      	mov	r1, r3
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	2334      	movs	r3, #52	; 0x34
 800650a:	fb03 f301 	mul.w	r3, r3, r1
 800650e:	4413      	add	r3, r2
 8006510:	33c1      	adds	r3, #193	; 0xc1
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800651c:	4619      	mov	r1, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2334      	movs	r3, #52	; 0x34
 8006522:	fb03 f301 	mul.w	r3, r3, r1
 8006526:	4413      	add	r3, r2
 8006528:	3390      	adds	r3, #144	; 0x90
 800652a:	2203      	movs	r2, #3
 800652c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006534:	4619      	mov	r1, r3
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	2334      	movs	r3, #52	; 0x34
 800653a:	fb03 f301 	mul.w	r3, r3, r1
 800653e:	4413      	add	r3, r2
 8006540:	3391      	adds	r3, #145	; 0x91
 8006542:	2200      	movs	r2, #0
 8006544:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800654c:	4619      	mov	r1, r3
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	2334      	movs	r3, #52	; 0x34
 8006552:	fb03 f301 	mul.w	r3, r3, r1
 8006556:	4413      	add	r3, r2
 8006558:	3392      	adds	r3, #146	; 0x92
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d14a      	bne.n	80065fa <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800656a:	4619      	mov	r1, r3
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	2334      	movs	r3, #52	; 0x34
 8006570:	fb03 f301 	mul.w	r3, r3, r1
 8006574:	4413      	add	r3, r2
 8006576:	3392      	adds	r3, #146	; 0x92
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d00c      	beq.n	8006598 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006584:	4619      	mov	r1, r3
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	2334      	movs	r3, #52	; 0x34
 800658a:	fb03 f301 	mul.w	r3, r3, r1
 800658e:	4413      	add	r3, r2
 8006590:	33c1      	adds	r3, #193	; 0xc1
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e00b      	b.n	80065b0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800659e:	4619      	mov	r1, r3
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	2334      	movs	r3, #52	; 0x34
 80065a4:	fb03 f301 	mul.w	r3, r3, r1
 80065a8:	4413      	add	r3, r2
 80065aa:	33c1      	adds	r3, #193	; 0xc1
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065b6:	4619      	mov	r1, r3
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	2334      	movs	r3, #52	; 0x34
 80065bc:	fb03 f301 	mul.w	r3, r3, r1
 80065c0:	4413      	add	r3, r2
 80065c2:	3390      	adds	r3, #144	; 0x90
 80065c4:	2205      	movs	r2, #5
 80065c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065ce:	4619      	mov	r1, r3
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	2334      	movs	r3, #52	; 0x34
 80065d4:	fb03 f301 	mul.w	r3, r3, r1
 80065d8:	4413      	add	r3, r2
 80065da:	3391      	adds	r3, #145	; 0x91
 80065dc:	2201      	movs	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065e6:	4619      	mov	r1, r3
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	2334      	movs	r3, #52	; 0x34
 80065ec:	fb03 f301 	mul.w	r3, r3, r1
 80065f0:	4413      	add	r3, r2
 80065f2:	3392      	adds	r3, #146	; 0x92
 80065f4:	2202      	movs	r2, #2
 80065f6:	701a      	strb	r2, [r3, #0]
            break;
 80065f8:	e127      	b.n	800684a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	f040 8124 	bne.w	800684a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006608:	4619      	mov	r1, r3
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	2334      	movs	r3, #52	; 0x34
 800660e:	fb03 f301 	mul.w	r3, r3, r1
 8006612:	4413      	add	r3, r2
 8006614:	3390      	adds	r3, #144	; 0x90
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006620:	4619      	mov	r1, r3
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	2334      	movs	r3, #52	; 0x34
 8006626:	fb03 f301 	mul.w	r3, r3, r1
 800662a:	4413      	add	r3, r2
 800662c:	3391      	adds	r3, #145	; 0x91
 800662e:	2202      	movs	r2, #2
 8006630:	701a      	strb	r2, [r3, #0]
            break;
 8006632:	e10a      	b.n	800684a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800663a:	b2d9      	uxtb	r1, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006642:	461a      	mov	r2, r3
 8006644:	2334      	movs	r3, #52	; 0x34
 8006646:	fb03 f302 	mul.w	r3, r3, r2
 800664a:	3390      	adds	r3, #144	; 0x90
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	3304      	adds	r3, #4
 8006652:	461a      	mov	r2, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fdda 	bl	800720e <USBH_MSC_SCSI_ReadCapacity>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d120      	bne.n	80066a6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800666a:	4619      	mov	r1, r3
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	2334      	movs	r3, #52	; 0x34
 8006670:	fb03 f301 	mul.w	r3, r3, r1
 8006674:	4413      	add	r3, r2
 8006676:	3390      	adds	r3, #144	; 0x90
 8006678:	2201      	movs	r2, #1
 800667a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006682:	4619      	mov	r1, r3
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	2334      	movs	r3, #52	; 0x34
 8006688:	fb03 f301 	mul.w	r3, r3, r1
 800668c:	4413      	add	r3, r2
 800668e:	3391      	adds	r3, #145	; 0x91
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800669a:	3301      	adds	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80066a4:	e0d3      	b.n	800684e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d10c      	bne.n	80066c6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066b2:	4619      	mov	r1, r3
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	2334      	movs	r3, #52	; 0x34
 80066b8:	fb03 f301 	mul.w	r3, r3, r1
 80066bc:	4413      	add	r3, r2
 80066be:	3390      	adds	r3, #144	; 0x90
 80066c0:	2205      	movs	r2, #5
 80066c2:	701a      	strb	r2, [r3, #0]
            break;
 80066c4:	e0c3      	b.n	800684e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	f040 80c0 	bne.w	800684e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066d4:	4619      	mov	r1, r3
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	2334      	movs	r3, #52	; 0x34
 80066da:	fb03 f301 	mul.w	r3, r3, r1
 80066de:	4413      	add	r3, r2
 80066e0:	3390      	adds	r3, #144	; 0x90
 80066e2:	2201      	movs	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80066ec:	4619      	mov	r1, r3
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	2334      	movs	r3, #52	; 0x34
 80066f2:	fb03 f301 	mul.w	r3, r3, r1
 80066f6:	4413      	add	r3, r2
 80066f8:	3391      	adds	r3, #145	; 0x91
 80066fa:	2202      	movs	r2, #2
 80066fc:	701a      	strb	r2, [r3, #0]
            break;
 80066fe:	e0a6      	b.n	800684e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006706:	b2d9      	uxtb	r1, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800670e:	461a      	mov	r2, r3
 8006710:	2334      	movs	r3, #52	; 0x34
 8006712:	fb03 f302 	mul.w	r3, r3, r2
 8006716:	3398      	adds	r3, #152	; 0x98
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	3304      	adds	r3, #4
 800671e:	461a      	mov	r2, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fe94 	bl	800744e <USBH_MSC_SCSI_RequestSense>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d145      	bne.n	80067bc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006736:	4619      	mov	r1, r3
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	2334      	movs	r3, #52	; 0x34
 800673c:	fb03 f301 	mul.w	r3, r3, r1
 8006740:	4413      	add	r3, r2
 8006742:	339c      	adds	r3, #156	; 0x9c
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b06      	cmp	r3, #6
 8006748:	d00c      	beq.n	8006764 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006750:	4619      	mov	r1, r3
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	2334      	movs	r3, #52	; 0x34
 8006756:	fb03 f301 	mul.w	r3, r3, r1
 800675a:	4413      	add	r3, r2
 800675c:	339c      	adds	r3, #156	; 0x9c
 800675e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006760:	2b02      	cmp	r3, #2
 8006762:	d117      	bne.n	8006794 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f242 720f 	movw	r2, #9999	; 0x270f
 8006776:	4293      	cmp	r3, r2
 8006778:	d80c      	bhi.n	8006794 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006780:	4619      	mov	r1, r3
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	2334      	movs	r3, #52	; 0x34
 8006786:	fb03 f301 	mul.w	r3, r3, r1
 800678a:	4413      	add	r3, r2
 800678c:	3390      	adds	r3, #144	; 0x90
 800678e:	2202      	movs	r2, #2
 8006790:	701a      	strb	r2, [r3, #0]
                  break;
 8006792:	e05f      	b.n	8006854 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800679a:	4619      	mov	r1, r3
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	2334      	movs	r3, #52	; 0x34
 80067a0:	fb03 f301 	mul.w	r3, r3, r1
 80067a4:	4413      	add	r3, r2
 80067a6:	3390      	adds	r3, #144	; 0x90
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067b2:	3301      	adds	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d10c      	bne.n	80067dc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067c8:	4619      	mov	r1, r3
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	2334      	movs	r3, #52	; 0x34
 80067ce:	fb03 f301 	mul.w	r3, r3, r1
 80067d2:	4413      	add	r3, r2
 80067d4:	3390      	adds	r3, #144	; 0x90
 80067d6:	2208      	movs	r2, #8
 80067d8:	701a      	strb	r2, [r3, #0]
            break;
 80067da:	e03a      	b.n	8006852 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d137      	bne.n	8006852 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80067e8:	4619      	mov	r1, r3
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	2334      	movs	r3, #52	; 0x34
 80067ee:	fb03 f301 	mul.w	r3, r3, r1
 80067f2:	4413      	add	r3, r2
 80067f4:	3390      	adds	r3, #144	; 0x90
 80067f6:	2201      	movs	r2, #1
 80067f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006800:	4619      	mov	r1, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	2334      	movs	r3, #52	; 0x34
 8006806:	fb03 f301 	mul.w	r3, r3, r1
 800680a:	4413      	add	r3, r2
 800680c:	3391      	adds	r3, #145	; 0x91
 800680e:	2202      	movs	r2, #2
 8006810:	701a      	strb	r2, [r3, #0]
            break;
 8006812:	e01e      	b.n	8006852 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800681a:	3301      	adds	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006824:	e016      	b.n	8006854 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2200      	movs	r2, #0
 800682a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2201      	movs	r2, #1
 8006832:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800683a:	2102      	movs	r1, #2
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
      break;
 8006840:	e00c      	b.n	800685c <USBH_MSC_Process+0x514>
            break;
 8006842:	bf00      	nop
 8006844:	e00a      	b.n	800685c <USBH_MSC_Process+0x514>
            break;
 8006846:	bf00      	nop
 8006848:	e008      	b.n	800685c <USBH_MSC_Process+0x514>
            break;
 800684a:	bf00      	nop
 800684c:	e006      	b.n	800685c <USBH_MSC_Process+0x514>
            break;
 800684e:	bf00      	nop
 8006850:	e004      	b.n	800685c <USBH_MSC_Process+0x514>
            break;
 8006852:	bf00      	nop
      break;
 8006854:	e002      	b.n	800685c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	75fb      	strb	r3, [r7, #23]
      break;
 800685a:	bf00      	nop
  }
  return error;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b088      	sub	sp, #32
 8006882:	af02      	add	r7, sp, #8
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006894:	2301      	movs	r3, #1
 8006896:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	2134      	movs	r1, #52	; 0x34
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	3390      	adds	r3, #144	; 0x90
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	d004      	beq.n	80068ba <USBH_MSC_RdWrProcess+0x3c>
 80068b0:	2b07      	cmp	r3, #7
 80068b2:	d037      	beq.n	8006924 <USBH_MSC_RdWrProcess+0xa6>
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d06a      	beq.n	800698e <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 80068b8:	e0a6      	b.n	8006a08 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80068ba:	78f9      	ldrb	r1, [r7, #3]
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2300      	movs	r3, #0
 80068c2:	2200      	movs	r2, #0
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fea6 	bl	8007616 <USBH_MSC_SCSI_Read>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10b      	bne.n	80068ec <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	2134      	movs	r1, #52	; 0x34
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	4413      	add	r3, r2
 80068e0:	3390      	adds	r3, #144	; 0x90
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ea:	e088      	b.n	80069fe <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d109      	bne.n	8006906 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	2134      	movs	r1, #52	; 0x34
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	4413      	add	r3, r2
 80068fe:	3390      	adds	r3, #144	; 0x90
 8006900:	2205      	movs	r2, #5
 8006902:	701a      	strb	r2, [r3, #0]
      break;
 8006904:	e07b      	b.n	80069fe <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2b04      	cmp	r3, #4
 800690a:	d178      	bne.n	80069fe <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	2134      	movs	r1, #52	; 0x34
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	4413      	add	r3, r2
 8006918:	3390      	adds	r3, #144	; 0x90
 800691a:	2208      	movs	r2, #8
 800691c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800691e:	2302      	movs	r3, #2
 8006920:	75fb      	strb	r3, [r7, #23]
      break;
 8006922:	e06c      	b.n	80069fe <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006924:	78f9      	ldrb	r1, [r7, #3]
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	2200      	movs	r2, #0
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fe06 	bl	8007540 <USBH_MSC_SCSI_Write>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	2134      	movs	r1, #52	; 0x34
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	4413      	add	r3, r2
 800694a:	3390      	adds	r3, #144	; 0x90
 800694c:	2201      	movs	r2, #1
 800694e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	75fb      	strb	r3, [r7, #23]
      break;
 8006954:	e055      	b.n	8006a02 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d109      	bne.n	8006970 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	2134      	movs	r1, #52	; 0x34
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	3390      	adds	r3, #144	; 0x90
 800696a:	2205      	movs	r2, #5
 800696c:	701a      	strb	r2, [r3, #0]
      break;
 800696e:	e048      	b.n	8006a02 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d145      	bne.n	8006a02 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	2134      	movs	r1, #52	; 0x34
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	3390      	adds	r3, #144	; 0x90
 8006984:	2208      	movs	r2, #8
 8006986:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006988:	2302      	movs	r3, #2
 800698a:	75fb      	strb	r3, [r7, #23]
      break;
 800698c:	e039      	b.n	8006a02 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	2234      	movs	r2, #52	; 0x34
 8006992:	fb02 f303 	mul.w	r3, r2, r3
 8006996:	3398      	adds	r3, #152	; 0x98
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4413      	add	r3, r2
 800699c:	1d1a      	adds	r2, r3, #4
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fd53 	bl	800744e <USBH_MSC_SCSI_RequestSense>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	2134      	movs	r1, #52	; 0x34
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	4413      	add	r3, r2
 80069be:	3390      	adds	r3, #144	; 0x90
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	2134      	movs	r1, #52	; 0x34
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	3391      	adds	r3, #145	; 0x91
 80069d2:	2202      	movs	r2, #2
 80069d4:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80069d6:	2302      	movs	r3, #2
 80069d8:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d012      	beq.n	8006a06 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d10f      	bne.n	8006a06 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	2134      	movs	r1, #52	; 0x34
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	3390      	adds	r3, #144	; 0x90
 80069f4:	2208      	movs	r2, #8
 80069f6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80069f8:	2302      	movs	r3, #2
 80069fa:	75fb      	strb	r3, [r7, #23]
      break;
 80069fc:	e003      	b.n	8006a06 <USBH_MSC_RdWrProcess+0x188>
      break;
 80069fe:	bf00      	nop
 8006a00:	e002      	b.n	8006a08 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006a02:	bf00      	nop
 8006a04:	e000      	b.n	8006a08 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006a06:	bf00      	nop

  }
  return error;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b0b      	cmp	r3, #11
 8006a30:	d10c      	bne.n	8006a4c <USBH_MSC_UnitIsReady+0x3a>
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	2134      	movs	r1, #52	; 0x34
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	3391      	adds	r3, #145	; 0x91
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006a46:	2301      	movs	r3, #1
 8006a48:	73fb      	strb	r3, [r7, #15]
 8006a4a:	e001      	b.n	8006a50 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	460b      	mov	r3, r1
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b0b      	cmp	r3, #11
 8006a7e:	d10d      	bne.n	8006a9c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	2234      	movs	r2, #52	; 0x34
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	3390      	adds	r3, #144	; 0x90
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	2234      	movs	r2, #52	; 0x34
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f004 ff42 	bl	800b91c <memcpy>
    return USBH_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b088      	sub	sp, #32
 8006aaa:	af02      	add	r7, sp, #8
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00e      	beq.n	8006aea <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006ad2:	2b0b      	cmp	r3, #11
 8006ad4:	d109      	bne.n	8006aea <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	2134      	movs	r1, #52	; 0x34
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3390      	adds	r3, #144	; 0x90
 8006ae4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d001      	beq.n	8006aee <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006aea:	2302      	movs	r3, #2
 8006aec:	e040      	b.n	8006b70 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2206      	movs	r2, #6
 8006af2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	2134      	movs	r1, #52	; 0x34
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	3390      	adds	r3, #144	; 0x90
 8006b02:	2206      	movs	r2, #6
 8006b04:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006b06:	7afb      	ldrb	r3, [r7, #11]
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006b10:	7af9      	ldrb	r1, [r7, #11]
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fd7b 	bl	8007616 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b26:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006b28:	e016      	b.n	8006b58 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f242 7110 	movw	r1, #10000	; 0x2710
 8006b3a:	fb01 f303 	mul.w	r3, r1, r3
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d805      	bhi.n	8006b4e <USBH_MSC_Read+0xa8>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2201      	movs	r2, #1
 8006b52:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006b54:	2302      	movs	r3, #2
 8006b56:	e00b      	b.n	8006b70 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff fe8e 	bl	800687e <USBH_MSC_RdWrProcess>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d0e0      	beq.n	8006b2a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	460b      	mov	r3, r1
 8006b86:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00e      	beq.n	8006bbc <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006ba4:	2b0b      	cmp	r3, #11
 8006ba6:	d109      	bne.n	8006bbc <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	2134      	movs	r1, #52	; 0x34
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3390      	adds	r3, #144	; 0x90
 8006bb6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d001      	beq.n	8006bc0 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e040      	b.n	8006c42 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	2134      	movs	r1, #52	; 0x34
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3390      	adds	r3, #144	; 0x90
 8006bd4:	2207      	movs	r2, #7
 8006bd6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006be2:	7af9      	ldrb	r1, [r7, #11]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 fca7 	bl	8007540 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bf8:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006bfa:	e016      	b.n	8006c2a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad2      	subs	r2, r2, r3
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f242 7110 	movw	r1, #10000	; 0x2710
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d805      	bhi.n	8006c20 <USBH_MSC_Write+0xa8>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2201      	movs	r2, #1
 8006c24:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006c26:	2302      	movs	r3, #2
 8006c28:	e00b      	b.n	8006c42 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff fe25 	bl	800687e <USBH_MSC_RdWrProcess>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d0e0      	beq.n	8006bfc <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2221      	movs	r2, #33	; 0x21
 8006c56:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	22ff      	movs	r2, #255	; 0xff
 8006c5c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fdae 	bl	80087d6 <USBH_CtlReq>
 8006c7a:	4603      	mov	r3, r0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	22a1      	movs	r2, #161	; 0xa1
 8006c92:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	22fe      	movs	r2, #254	; 0xfe
 8006c98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006cac:	2201      	movs	r2, #1
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fd90 	bl	80087d6 <USBH_CtlReq>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <USBH_MSC_BOT_Init+0x3c>)
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <USBH_MSC_BOT_Init+0x40>)
 8006cdc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	43425355 	.word	0x43425355
 8006d00:	20304050 	.word	0x20304050

08006d04 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006d10:	2301      	movs	r3, #1
 8006d12:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d34:	3b01      	subs	r3, #1
 8006d36:	2b0a      	cmp	r3, #10
 8006d38:	f200 81a1 	bhi.w	800707e <USBH_MSC_BOT_Process+0x37a>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <USBH_MSC_BOT_Process+0x40>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d9b 	.word	0x08006d9b
 8006d4c:	08006e05 	.word	0x08006e05
 8006d50:	08006e23 	.word	0x08006e23
 8006d54:	08006ea7 	.word	0x08006ea7
 8006d58:	08006ecb 	.word	0x08006ecb
 8006d5c:	08006f65 	.word	0x08006f65
 8006d60:	08006f81 	.word	0x08006f81
 8006d64:	08006fd3 	.word	0x08006fd3
 8006d68:	08007003 	.word	0x08007003
 8006d6c:	08007065 	.word	0x08007065
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	795a      	ldrb	r2, [r3, #5]
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	221f      	movs	r2, #31
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 ff2f 	bl	8008bf6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006d98:	e180      	b.n	800709c <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	795b      	ldrb	r3, [r3, #5]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f004 fc5f 	bl	800b664 <USBH_LL_GetURBState>
 8006da6:	4603      	mov	r3, r0
 8006da8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006daa:	7d3b      	ldrb	r3, [r7, #20]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d118      	bne.n	8006de2 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00f      	beq.n	8006dd8 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da04      	bge.n	8006dce <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006dcc:	e159      	b.n	8007082 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2205      	movs	r2, #5
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006dd6:	e154      	b.n	8007082 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2207      	movs	r2, #7
 8006ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006de0:	e14f      	b.n	8007082 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006de2:	7d3b      	ldrb	r3, [r7, #20]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d104      	bne.n	8006df2 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006df0:	e147      	b.n	8007082 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8006df2:	7d3b      	ldrb	r3, [r7, #20]
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	f040 8144 	bne.w	8007082 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	220a      	movs	r2, #10
 8006dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e02:	e13e      	b.n	8007082 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	895a      	ldrh	r2, [r3, #10]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 ff14 	bl	8008c40 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006e20:	e13c      	b.n	800709c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	791b      	ldrb	r3, [r3, #4]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f004 fc1b 	bl	800b664 <USBH_LL_GetURBState>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006e32:	7d3b      	ldrb	r3, [r7, #20]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d12d      	bne.n	8006e94 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	8952      	ldrh	r2, [r2, #10]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d910      	bls.n	8006e66 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	8952      	ldrh	r2, [r2, #10]
 8006e4e:	441a      	add	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	8952      	ldrh	r2, [r2, #10]
 8006e5e:	1a9a      	subs	r2, r3, r2
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e64:	e002      	b.n	8006e6c <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	895a      	ldrh	r2, [r3, #10]
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	791b      	ldrb	r3, [r3, #4]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fedc 	bl	8008c40 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006e88:	e0fd      	b.n	8007086 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2207      	movs	r2, #7
 8006e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e92:	e0f8      	b.n	8007086 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8006e94:	7d3b      	ldrb	r3, [r7, #20]
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	f040 80f5 	bne.w	8007086 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2209      	movs	r2, #9
 8006ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ea4:	e0ef      	b.n	8007086 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	891a      	ldrh	r2, [r3, #8]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	7958      	ldrb	r0, [r3, #5]
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	4603      	mov	r3, r0
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fe9b 	bl	8008bf6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2206      	movs	r2, #6
 8006ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ec8:	e0e8      	b.n	800709c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	795b      	ldrb	r3, [r3, #5]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f004 fbc7 	bl	800b664 <USBH_LL_GetURBState>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006eda:	7d3b      	ldrb	r3, [r7, #20]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d130      	bne.n	8006f42 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	8912      	ldrh	r2, [r2, #8]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d910      	bls.n	8006f0e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	8912      	ldrh	r2, [r2, #8]
 8006ef6:	441a      	add	r2, r3
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	8912      	ldrh	r2, [r2, #8]
 8006f06:	1a9a      	subs	r2, r3, r2
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f0c:	e002      	b.n	8006f14 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2200      	movs	r2, #0
 8006f12:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00d      	beq.n	8006f38 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	891a      	ldrh	r2, [r3, #8]
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	7958      	ldrb	r0, [r3, #5]
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	4603      	mov	r3, r0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fe60 	bl	8008bf6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006f36:	e0a8      	b.n	800708a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2207      	movs	r2, #7
 8006f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f40:	e0a3      	b.n	800708a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f42:	7d3b      	ldrb	r3, [r7, #20]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d104      	bne.n	8006f52 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2205      	movs	r2, #5
 8006f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f50:	e09b      	b.n	800708a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8006f52:	7d3b      	ldrb	r3, [r7, #20]
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	f040 8098 	bne.w	800708a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f62:	e092      	b.n	800708a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	220d      	movs	r2, #13
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fe65 	bl	8008c40 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2208      	movs	r2, #8
 8006f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006f7e:	e08d      	b.n	800709c <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	791b      	ldrb	r3, [r3, #4]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f004 fb6c 	bl	800b664 <USBH_LL_GetURBState>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006f90:	7d3b      	ldrb	r3, [r7, #20]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d115      	bne.n	8006fc2 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8aa 	bl	8007100 <USBH_MSC_DecodeCSW>
 8006fac:	4603      	mov	r3, r0
 8006fae:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006fb0:	7d7b      	ldrb	r3, [r7, #21]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006fba:	e068      	b.n	800708e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	e065      	b.n	800708e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8006fc2:	7d3b      	ldrb	r3, [r7, #20]
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d162      	bne.n	800708e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2209      	movs	r2, #9
 8006fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006fd0:	e05d      	b.n	800708e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f865 	bl	80070a8 <USBH_MSC_BOT_Abort>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006fe2:	7dbb      	ldrb	r3, [r7, #22]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2207      	movs	r2, #7
 8006fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006ff0:	e04f      	b.n	8007092 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006ff2:	7dbb      	ldrb	r3, [r7, #22]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d14c      	bne.n	8007092 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	220b      	movs	r2, #11
 8006ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007000:	e047      	b.n	8007092 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	2201      	movs	r2, #1
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f84d 	bl	80070a8 <USBH_MSC_BOT_Abort>
 800700e:	4603      	mov	r3, r0
 8007010:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007012:	7dbb      	ldrb	r3, [r7, #22]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d11d      	bne.n	8007054 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	795b      	ldrb	r3, [r3, #5]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f004 fb7a 	bl	800b718 <USBH_LL_GetToggle>
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	7959      	ldrb	r1, [r3, #5]
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	f1c3 0301 	rsb	r3, r3, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f004 fb3e 	bl	800b6b8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	791b      	ldrb	r3, [r3, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f004 fb37 	bl	800b6b8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2209      	movs	r2, #9
 800704e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007052:	e020      	b.n	8007096 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8007054:	7dbb      	ldrb	r3, [r7, #22]
 8007056:	2b04      	cmp	r3, #4
 8007058:	d11d      	bne.n	8007096 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	220b      	movs	r2, #11
 800705e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007062:	e018      	b.n	8007096 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff fdf0 	bl	8006c4a <USBH_MSC_BOT_REQ_Reset>
 800706a:	4603      	mov	r3, r0
 800706c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d112      	bne.n	800709a <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800707c:	e00d      	b.n	800709a <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800707e:	bf00      	nop
 8007080:	e00c      	b.n	800709c <USBH_MSC_BOT_Process+0x398>
      break;
 8007082:	bf00      	nop
 8007084:	e00a      	b.n	800709c <USBH_MSC_BOT_Process+0x398>
      break;
 8007086:	bf00      	nop
 8007088:	e008      	b.n	800709c <USBH_MSC_BOT_Process+0x398>
      break;
 800708a:	bf00      	nop
 800708c:	e006      	b.n	800709c <USBH_MSC_BOT_Process+0x398>
      break;
 800708e:	bf00      	nop
 8007090:	e004      	b.n	800709c <USBH_MSC_BOT_Process+0x398>
      break;
 8007092:	bf00      	nop
 8007094:	e002      	b.n	800709c <USBH_MSC_BOT_Process+0x398>
      break;
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <USBH_MSC_BOT_Process+0x398>
      break;
 800709a:	bf00      	nop
  }
  return status;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop

080070a8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
 80070b4:	4613      	mov	r3, r2
 80070b6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80070b8:	2302      	movs	r3, #2
 80070ba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80070c6:	78bb      	ldrb	r3, [r7, #2]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <USBH_MSC_BOT_Abort+0x2a>
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d009      	beq.n	80070e4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80070d0:	e011      	b.n	80070f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	79db      	ldrb	r3, [r3, #7]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 f99c 	bl	8008416 <USBH_ClrFeature>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]
      break;
 80070e2:	e008      	b.n	80070f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	799b      	ldrb	r3, [r3, #6]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f993 	bl	8008416 <USBH_ClrFeature>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
      break;
 80070f4:	bf00      	nop
  }
  return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007112:	2301      	movs	r3, #1
 8007114:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	791b      	ldrb	r3, [r3, #4]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f004 fa0f 	bl	800b540 <USBH_LL_GetLastXferSize>
 8007122:	4603      	mov	r3, r0
 8007124:	2b0d      	cmp	r3, #13
 8007126:	d002      	beq.n	800712e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007128:	2302      	movs	r3, #2
 800712a:	73fb      	strb	r3, [r7, #15]
 800712c:	e024      	b.n	8007178 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007132:	4a14      	ldr	r2, [pc, #80]	; (8007184 <USBH_MSC_DecodeCSW+0x84>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d11d      	bne.n	8007174 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007140:	429a      	cmp	r2, r3
 8007142:	d119      	bne.n	8007178 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
 8007152:	e011      	b.n	8007178 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800715a:	2b01      	cmp	r3, #1
 800715c:	d102      	bne.n	8007164 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
 8007162:	e009      	b.n	8007178 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800716a:	2b02      	cmp	r3, #2
 800716c:	d104      	bne.n	8007178 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800716e:	2302      	movs	r3, #2
 8007170:	73fb      	strb	r3, [r7, #15]
 8007172:	e001      	b.n	8007178 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007174:	2302      	movs	r3, #2
 8007176:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	53425355 	.word	0x53425355

08007188 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007194:	2302      	movs	r3, #2
 8007196:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d002      	beq.n	80071b2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d021      	beq.n	80071f4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80071b0:	e028      	b.n	8007204 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2200      	movs	r2, #0
 80071b6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	220a      	movs	r2, #10
 80071c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	3363      	adds	r3, #99	; 0x63
 80071cc:	2210      	movs	r2, #16
 80071ce:	2100      	movs	r1, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	f004 fbae 	bl	800b932 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80071ee:	2301      	movs	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]
      break;
 80071f2:	e007      	b.n	8007204 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fd83 	bl	8006d04 <USBH_MSC_BOT_Process>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
      break;
 8007202:	bf00      	nop
  }

  return error;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	460b      	mov	r3, r1
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007230:	2b01      	cmp	r3, #1
 8007232:	d002      	beq.n	800723a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007234:	2b02      	cmp	r3, #2
 8007236:	d027      	beq.n	8007288 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007238:	e05f      	b.n	80072fa <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2208      	movs	r2, #8
 800723e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2280      	movs	r2, #128	; 0x80
 8007244:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	220a      	movs	r2, #10
 800724c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3363      	adds	r3, #99	; 0x63
 8007254:	2210      	movs	r2, #16
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f004 fb6a 	bl	800b932 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2225      	movs	r2, #37	; 0x25
 8007262:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2202      	movs	r2, #2
 8007272:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f103 0210 	add.w	r2, r3, #16
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
      break;
 8007286:	e038      	b.n	80072fa <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007288:	7afb      	ldrb	r3, [r7, #11]
 800728a:	4619      	mov	r1, r3
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fd39 	bl	8006d04 <USBH_MSC_BOT_Process>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d12d      	bne.n	80072f8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a2:	3303      	adds	r3, #3
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ae:	3302      	adds	r3, #2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072bc:	3301      	adds	r3, #1
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80072c2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072da:	3307      	adds	r3, #7
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e6:	3306      	adds	r3, #6
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	4313      	orrs	r3, r2
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	809a      	strh	r2, [r3, #4]
      break;
 80072f8:	bf00      	nop
  }

  return error;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	460b      	mov	r3, r1
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007312:	2302      	movs	r3, #2
 8007314:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007326:	2b01      	cmp	r3, #1
 8007328:	d002      	beq.n	8007330 <USBH_MSC_SCSI_Inquiry+0x2c>
 800732a:	2b02      	cmp	r3, #2
 800732c:	d03d      	beq.n	80073aa <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800732e:	e089      	b.n	8007444 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2224      	movs	r2, #36	; 0x24
 8007334:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2280      	movs	r2, #128	; 0x80
 800733a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	220a      	movs	r2, #10
 8007342:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3363      	adds	r3, #99	; 0x63
 800734a:	220a      	movs	r2, #10
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f004 faef 	bl	800b932 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2212      	movs	r2, #18
 8007358:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	015b      	lsls	r3, r3, #5
 8007360:	b2da      	uxtb	r2, r3
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2224      	movs	r2, #36	; 0x24
 800737c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f103 0210 	add.w	r2, r3, #16
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80073a4:	2301      	movs	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
      break;
 80073a8:	e04c      	b.n	8007444 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	4619      	mov	r1, r3
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fca8 	bl	8006d04 <USBH_MSC_BOT_Process>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d141      	bne.n	8007442 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80073be:	2222      	movs	r2, #34	; 0x22
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f004 fab5 	bl	800b932 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f0:	3301      	adds	r3, #1
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	b25b      	sxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da03      	bge.n	8007402 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	709a      	strb	r2, [r3, #2]
 8007400:	e002      	b.n	8007408 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	1cd8      	adds	r0, r3, #3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007412:	3308      	adds	r3, #8
 8007414:	2208      	movs	r2, #8
 8007416:	4619      	mov	r1, r3
 8007418:	f004 fa80 	bl	800b91c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f103 000c 	add.w	r0, r3, #12
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007428:	3310      	adds	r3, #16
 800742a:	2210      	movs	r2, #16
 800742c:	4619      	mov	r1, r3
 800742e:	f004 fa75 	bl	800b91c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	331d      	adds	r3, #29
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800743c:	3220      	adds	r2, #32
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	601a      	str	r2, [r3, #0]
      break;
 8007442:	bf00      	nop
  }

  return error;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b086      	sub	sp, #24
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	460b      	mov	r3, r1
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800745c:	2302      	movs	r3, #2
 800745e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007470:	2b01      	cmp	r3, #1
 8007472:	d002      	beq.n	800747a <USBH_MSC_SCSI_RequestSense+0x2c>
 8007474:	2b02      	cmp	r3, #2
 8007476:	d03d      	beq.n	80074f4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007478:	e05d      	b.n	8007536 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	220e      	movs	r2, #14
 800747e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	220a      	movs	r2, #10
 800748c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	3363      	adds	r3, #99	; 0x63
 8007494:	2210      	movs	r2, #16
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f004 fa4a 	bl	800b932 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2203      	movs	r2, #3
 80074a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	015b      	lsls	r3, r3, #5
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	220e      	movs	r2, #14
 80074c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2202      	movs	r2, #2
 80074de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f103 0210 	add.w	r2, r3, #16
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
      break;
 80074f2:	e020      	b.n	8007536 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	4619      	mov	r1, r3
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fc03 	bl	8006d04 <USBH_MSC_BOT_Process>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d115      	bne.n	8007534 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800750e:	3302      	adds	r3, #2
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	b2da      	uxtb	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007522:	7b1a      	ldrb	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800752e:	7b5a      	ldrb	r2, [r3, #13]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	709a      	strb	r2, [r3, #2]
      break;
 8007534:	bf00      	nop
  }

  return error;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	460b      	mov	r3, r1
 800754e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007550:	2302      	movs	r3, #2
 8007552:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007564:	2b01      	cmp	r3, #1
 8007566:	d002      	beq.n	800756e <USBH_MSC_SCSI_Write+0x2e>
 8007568:	2b02      	cmp	r3, #2
 800756a:	d047      	beq.n	80075fc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800756c:	e04e      	b.n	800760c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007574:	461a      	mov	r2, r3
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	fb03 f202 	mul.w	r2, r3, r2
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	220a      	movs	r2, #10
 800758c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	3363      	adds	r3, #99	; 0x63
 8007594:	2210      	movs	r2, #16
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f004 f9ca 	bl	800b932 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	222a      	movs	r2, #42	; 0x2a
 80075a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80075a6:	79fa      	ldrb	r2, [r7, #7]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80075ae:	79ba      	ldrb	r2, [r7, #6]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80075b6:	797a      	ldrb	r2, [r7, #5]
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80075be:	1d3b      	adds	r3, r7, #4
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80075c8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80075d2:	f107 0320 	add.w	r3, r7, #32
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2202      	movs	r2, #2
 80075ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
      break;
 80075fa:	e007      	b.n	800760c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	4619      	mov	r1, r3
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7ff fb7f 	bl	8006d04 <USBH_MSC_BOT_Process>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]
      break;
 800760a:	bf00      	nop
  }

  return error;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
 8007622:	460b      	mov	r3, r1
 8007624:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007626:	2302      	movs	r3, #2
 8007628:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800763a:	2b01      	cmp	r3, #1
 800763c:	d002      	beq.n	8007644 <USBH_MSC_SCSI_Read+0x2e>
 800763e:	2b02      	cmp	r3, #2
 8007640:	d047      	beq.n	80076d2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007642:	e04e      	b.n	80076e2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800764a:	461a      	mov	r2, r3
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	fb03 f202 	mul.w	r2, r3, r2
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	220a      	movs	r2, #10
 8007662:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3363      	adds	r3, #99	; 0x63
 800766a:	2210      	movs	r2, #16
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f004 f95f 	bl	800b932 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2228      	movs	r2, #40	; 0x28
 8007678:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800767c:	79fa      	ldrb	r2, [r7, #7]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007684:	79ba      	ldrb	r2, [r7, #6]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800768c:	797a      	ldrb	r2, [r7, #5]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007694:	1d3b      	adds	r3, r7, #4
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800769e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80076a8:	f107 0320 	add.w	r3, r7, #32
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
      break;
 80076d0:	e007      	b.n	80076e2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	4619      	mov	r1, r3
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff fb14 	bl	8006d04 <USBH_MSC_BOT_Process>
 80076dc:	4603      	mov	r3, r0
 80076de:	75fb      	strb	r3, [r7, #23]
      break;
 80076e0:	bf00      	nop
  }

  return error;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007700:	2302      	movs	r3, #2
 8007702:	e029      	b.n	8007758 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	79fa      	ldrb	r2, [r7, #7]
 8007708:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f81f 	bl	8007760 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f003 fe41 	bl	800b3d8 <USBH_LL_Init>

  return USBH_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	e009      	b.n	8007786 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	33e0      	adds	r3, #224	; 0xe0
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b0e      	cmp	r3, #14
 800778a:	d9f2      	bls.n	8007772 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e009      	b.n	80077a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ac:	d3f1      	bcc.n	8007792 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2240      	movs	r2, #64	; 0x40
 80077d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d016      	beq.n	800784a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10e      	bne.n	8007844 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800782c:	1c59      	adds	r1, r3, #1
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	33de      	adds	r3, #222	; 0xde
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	e004      	b.n	800784e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007844:	2302      	movs	r3, #2
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e001      	b.n	800784e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800784a:	2302      	movs	r3, #2
 800784c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007872:	78fa      	ldrb	r2, [r7, #3]
 8007874:	429a      	cmp	r2, r3
 8007876:	d204      	bcs.n	8007882 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007880:	e001      	b.n	8007886 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007882:	2302      	movs	r3, #2
 8007884:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	4608      	mov	r0, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	70fb      	strb	r3, [r7, #3]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70bb      	strb	r3, [r7, #2]
 80078aa:	4613      	mov	r3, r2
 80078ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078be:	e025      	b.n	800790c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	221a      	movs	r2, #26
 80078c4:	fb02 f303 	mul.w	r3, r2, r3
 80078c8:	3308      	adds	r3, #8
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	3302      	adds	r3, #2
 80078d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	795b      	ldrb	r3, [r3, #5]
 80078d6:	78fa      	ldrb	r2, [r7, #3]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d002      	beq.n	80078e2 <USBH_FindInterface+0x4e>
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	2bff      	cmp	r3, #255	; 0xff
 80078e0:	d111      	bne.n	8007906 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078e6:	78ba      	ldrb	r2, [r7, #2]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d002      	beq.n	80078f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078ec:	78bb      	ldrb	r3, [r7, #2]
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	d109      	bne.n	8007906 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078f6:	787a      	ldrb	r2, [r7, #1]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d002      	beq.n	8007902 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078fc:	787b      	ldrb	r3, [r7, #1]
 80078fe:	2bff      	cmp	r3, #255	; 0xff
 8007900:	d101      	bne.n	8007906 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	e006      	b.n	8007914 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	3301      	adds	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d9d6      	bls.n	80078c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007912:	23ff      	movs	r3, #255	; 0xff
}
 8007914:	4618      	mov	r0, r3
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f003 fd93 	bl	800b454 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800792e:	2101      	movs	r1, #1
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f003 feaa 	bl	800b68a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af04      	add	r7, sp, #16
 8007946:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007948:	2302      	movs	r3, #2
 800794a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	d102      	bne.n	8007962 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2203      	movs	r2, #3
 8007960:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b0b      	cmp	r3, #11
 800796a:	f200 81b3 	bhi.w	8007cd4 <USBH_Process+0x394>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <USBH_Process+0x34>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	080079a5 	.word	0x080079a5
 8007978:	080079d7 	.word	0x080079d7
 800797c:	08007a3f 	.word	0x08007a3f
 8007980:	08007c6f 	.word	0x08007c6f
 8007984:	08007cd5 	.word	0x08007cd5
 8007988:	08007ae3 	.word	0x08007ae3
 800798c:	08007c15 	.word	0x08007c15
 8007990:	08007b19 	.word	0x08007b19
 8007994:	08007b39 	.word	0x08007b39
 8007998:	08007b59 	.word	0x08007b59
 800799c:	08007b87 	.word	0x08007b87
 80079a0:	08007c57 	.word	0x08007c57
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8193 	beq.w	8007cd8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80079b8:	20c8      	movs	r0, #200	; 0xc8
 80079ba:	f003 fedd 	bl	800b778 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f003 fda3 	bl	800b50a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079d4:	e180      	b.n	8007cd8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d107      	bne.n	80079f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079ee:	e182      	b.n	8007cf6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079fa:	d914      	bls.n	8007a26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a02:	3301      	adds	r3, #1
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d903      	bls.n	8007a1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	220d      	movs	r2, #13
 8007a1a:	701a      	strb	r2, [r3, #0]
      break;
 8007a1c:	e16b      	b.n	8007cf6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
      break;
 8007a24:	e167      	b.n	8007cf6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a2c:	f103 020a 	add.w	r2, r3, #10
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007a36:	200a      	movs	r0, #10
 8007a38:	f003 fe9e 	bl	800b778 <USBH_Delay>
      break;
 8007a3c:	e15b      	b.n	8007cf6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a4e:	2104      	movs	r1, #4
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007a54:	2064      	movs	r0, #100	; 0x64
 8007a56:	f003 fe8f 	bl	800b778 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f003 fd30 	bl	800b4c0 <USBH_LL_GetSpeed>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2205      	movs	r2, #5
 8007a6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007a70:	2100      	movs	r1, #0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 f931 	bl	8008cda <USBH_AllocPipe>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007a80:	2180      	movs	r1, #128	; 0x80
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 f929 	bl	8008cda <USBH_AllocPipe>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7919      	ldrb	r1, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007aa4:	b292      	uxth	r2, r2
 8007aa6:	9202      	str	r2, [sp, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	9201      	str	r2, [sp, #4]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2280      	movs	r2, #128	; 0x80
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 f8e2 	bl	8008c7c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7959      	ldrb	r1, [r3, #5]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007acc:	b292      	uxth	r2, r2
 8007ace:	9202      	str	r2, [sp, #8]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	9201      	str	r2, [sp, #4]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2200      	movs	r2, #0
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f8ce 	bl	8008c7c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ae0:	e109      	b.n	8007cf6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f90c 	bl	8007d00 <USBH_HandleEnum>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 80f3 	bne.w	8007cdc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d103      	bne.n	8007b10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b0e:	e0e5      	b.n	8007cdc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2207      	movs	r2, #7
 8007b14:	701a      	strb	r2, [r3, #0]
      break;
 8007b16:	e0e1      	b.n	8007cdc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80de 	beq.w	8007ce0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2208      	movs	r2, #8
 8007b34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b36:	e0d3      	b.n	8007ce0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fc20 	bl	8008388 <USBH_SetCfg>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f040 80ca 	bne.w	8007ce4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2209      	movs	r2, #9
 8007b54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b56:	e0c5      	b.n	8007ce4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007b66:	2101      	movs	r1, #1
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fc30 	bl	80083ce <USBH_SetFeature>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 80b9 	bne.w	8007ce8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	220a      	movs	r2, #10
 8007b7a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b7c:	e0b4      	b.n	8007ce8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	220a      	movs	r2, #10
 8007b82:	701a      	strb	r2, [r3, #0]
      break;
 8007b84:	e0b0      	b.n	8007ce8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80ad 	beq.w	8007cec <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]
 8007b9e:	e016      	b.n	8007bce <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ba0:	7bfa      	ldrb	r2, [r7, #15]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	32de      	adds	r2, #222	; 0xde
 8007ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007baa:	791a      	ldrb	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d108      	bne.n	8007bc8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007bb6:	7bfa      	ldrb	r2, [r7, #15]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	32de      	adds	r2, #222	; 0xde
 8007bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007bc6:	e005      	b.n	8007bd4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	73fb      	strb	r3, [r7, #15]
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0e5      	beq.n	8007ba0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d109      	bne.n	8007c04 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2206      	movs	r2, #6
 8007bf4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bfc:	2103      	movs	r1, #3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c02:	e073      	b.n	8007cec <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	220d      	movs	r2, #13
 8007c08:	701a      	strb	r2, [r3, #0]
      break;
 8007c0a:	e06f      	b.n	8007cec <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	220d      	movs	r2, #13
 8007c10:	701a      	strb	r2, [r3, #0]
      break;
 8007c12:	e06b      	b.n	8007cec <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d017      	beq.n	8007c4e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d103      	bne.n	8007c3e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	220b      	movs	r2, #11
 8007c3a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c3c:	e058      	b.n	8007cf0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d154      	bne.n	8007cf0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	220d      	movs	r2, #13
 8007c4a:	701a      	strb	r2, [r3, #0]
      break;
 8007c4c:	e050      	b.n	8007cf0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	220d      	movs	r2, #13
 8007c52:	701a      	strb	r2, [r3, #0]
      break;
 8007c54:	e04c      	b.n	8007cf0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d049      	beq.n	8007cf4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	4798      	blx	r3
      }
      break;
 8007c6c:	e042      	b.n	8007cf4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fd72 	bl	8007760 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007caa:	2105      	movs	r1, #5
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d107      	bne.n	8007ccc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff fe2b 	bl	8007920 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cca:	e014      	b.n	8007cf6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f003 fbc1 	bl	800b454 <USBH_LL_Start>
      break;
 8007cd2:	e010      	b.n	8007cf6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e00e      	b.n	8007cf6 <USBH_Process+0x3b6>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e00c      	b.n	8007cf6 <USBH_Process+0x3b6>
      break;
 8007cdc:	bf00      	nop
 8007cde:	e00a      	b.n	8007cf6 <USBH_Process+0x3b6>
    break;
 8007ce0:	bf00      	nop
 8007ce2:	e008      	b.n	8007cf6 <USBH_Process+0x3b6>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e006      	b.n	8007cf6 <USBH_Process+0x3b6>
      break;
 8007ce8:	bf00      	nop
 8007cea:	e004      	b.n	8007cf6 <USBH_Process+0x3b6>
      break;
 8007cec:	bf00      	nop
 8007cee:	e002      	b.n	8007cf6 <USBH_Process+0x3b6>
      break;
 8007cf0:	bf00      	nop
 8007cf2:	e000      	b.n	8007cf6 <USBH_Process+0x3b6>
      break;
 8007cf4:	bf00      	nop
  }
  return USBH_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af04      	add	r7, sp, #16
 8007d06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	2b07      	cmp	r3, #7
 8007d16:	f200 81c1 	bhi.w	800809c <USBH_HandleEnum+0x39c>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBH_HandleEnum+0x20>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d41 	.word	0x08007d41
 8007d24:	08007dff 	.word	0x08007dff
 8007d28:	08007e69 	.word	0x08007e69
 8007d2c:	08007ef7 	.word	0x08007ef7
 8007d30:	08007f61 	.word	0x08007f61
 8007d34:	08007fd1 	.word	0x08007fd1
 8007d38:	08008017 	.word	0x08008017
 8007d3c:	0800805d 	.word	0x0800805d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007d40:	2108      	movs	r1, #8
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa50 	bl	80081e8 <USBH_Get_DevDesc>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d130      	bne.n	8007db4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7919      	ldrb	r1, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d76:	b292      	uxth	r2, r2
 8007d78:	9202      	str	r2, [sp, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	9201      	str	r2, [sp, #4]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	4603      	mov	r3, r0
 8007d82:	2280      	movs	r2, #128	; 0x80
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 ff79 	bl	8008c7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7959      	ldrb	r1, [r3, #5]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d9e:	b292      	uxth	r2, r2
 8007da0:	9202      	str	r2, [sp, #8]
 8007da2:	2200      	movs	r2, #0
 8007da4:	9201      	str	r2, [sp, #4]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	4603      	mov	r3, r0
 8007daa:	2200      	movs	r2, #0
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 ff65 	bl	8008c7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007db2:	e175      	b.n	80080a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	f040 8172 	bne.w	80080a0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d903      	bls.n	8007dde <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	220d      	movs	r2, #13
 8007dda:	701a      	strb	r2, [r3, #0]
      break;
 8007ddc:	e160      	b.n	80080a0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	795b      	ldrb	r3, [r3, #5]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 ff99 	bl	8008d1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	791b      	ldrb	r3, [r3, #4]
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 ff93 	bl	8008d1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
      break;
 8007dfc:	e150      	b.n	80080a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007dfe:	2112      	movs	r1, #18
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9f1 	bl	80081e8 <USBH_Get_DevDesc>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e16:	e145      	b.n	80080a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	f040 8142 	bne.w	80080a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e26:	3301      	adds	r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d903      	bls.n	8007e42 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	220d      	movs	r2, #13
 8007e3e:	701a      	strb	r2, [r3, #0]
      break;
 8007e40:	e130      	b.n	80080a4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	795b      	ldrb	r3, [r3, #5]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 ff67 	bl	8008d1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	791b      	ldrb	r3, [r3, #4]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 ff61 	bl	8008d1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	701a      	strb	r2, [r3, #0]
      break;
 8007e66:	e11d      	b.n	80080a4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007e68:	2101      	movs	r1, #1
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa68 	bl	8008340 <USBH_SetAddress>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d132      	bne.n	8007ee0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	f003 fc7c 	bl	800b778 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7919      	ldrb	r1, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	9202      	str	r2, [sp, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	9201      	str	r2, [sp, #4]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4603      	mov	r3, r0
 8007eae:	2280      	movs	r2, #128	; 0x80
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fee3 	bl	8008c7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7959      	ldrb	r1, [r3, #5]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	9202      	str	r2, [sp, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	9201      	str	r2, [sp, #4]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fecf 	bl	8008c7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ede:	e0e3      	b.n	80080a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	f040 80e0 	bne.w	80080a8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	220d      	movs	r2, #13
 8007eec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	705a      	strb	r2, [r3, #1]
      break;
 8007ef4:	e0d8      	b.n	80080a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ef6:	2109      	movs	r1, #9
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f99d 	bl	8008238 <USBH_Get_CfgDesc>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d103      	bne.n	8007f10 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f0e:	e0cd      	b.n	80080ac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	f040 80ca 	bne.w	80080ac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f1e:	3301      	adds	r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d903      	bls.n	8007f3a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	220d      	movs	r2, #13
 8007f36:	701a      	strb	r2, [r3, #0]
      break;
 8007f38:	e0b8      	b.n	80080ac <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	795b      	ldrb	r3, [r3, #5]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 feeb 	bl	8008d1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	791b      	ldrb	r3, [r3, #4]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fee5 	bl	8008d1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	701a      	strb	r2, [r3, #0]
      break;
 8007f5e:	e0a5      	b.n	80080ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f965 	bl	8008238 <USBH_Get_CfgDesc>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2205      	movs	r2, #5
 8007f7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f7e:	e097      	b.n	80080b0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	f040 8094 	bne.w	80080b0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f8e:	3301      	adds	r3, #1
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d903      	bls.n	8007faa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	220d      	movs	r2, #13
 8007fa6:	701a      	strb	r2, [r3, #0]
      break;
 8007fa8:	e082      	b.n	80080b0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	795b      	ldrb	r3, [r3, #5]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 feb3 	bl	8008d1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fead 	bl	8008d1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e06f      	b.n	80080b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d019      	beq.n	800800e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fe6:	23ff      	movs	r3, #255	; 0xff
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f949 	bl	8008280 <USBH_Get_StringDesc>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d103      	bne.n	8008000 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2206      	movs	r2, #6
 8007ffc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ffe:	e059      	b.n	80080b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	2b03      	cmp	r3, #3
 8008004:	d156      	bne.n	80080b4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2206      	movs	r2, #6
 800800a:	705a      	strb	r2, [r3, #1]
      break;
 800800c:	e052      	b.n	80080b4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2206      	movs	r2, #6
 8008012:	705a      	strb	r2, [r3, #1]
      break;
 8008014:	e04e      	b.n	80080b4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800801c:	2b00      	cmp	r3, #0
 800801e:	d019      	beq.n	8008054 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800802c:	23ff      	movs	r3, #255	; 0xff
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f926 	bl	8008280 <USBH_Get_StringDesc>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d103      	bne.n	8008046 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2207      	movs	r2, #7
 8008042:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008044:	e038      	b.n	80080b8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d135      	bne.n	80080b8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2207      	movs	r2, #7
 8008050:	705a      	strb	r2, [r3, #1]
      break;
 8008052:	e031      	b.n	80080b8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2207      	movs	r2, #7
 8008058:	705a      	strb	r2, [r3, #1]
      break;
 800805a:	e02d      	b.n	80080b8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008062:	2b00      	cmp	r3, #0
 8008064:	d017      	beq.n	8008096 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008072:	23ff      	movs	r3, #255	; 0xff
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f903 	bl	8008280 <USBH_Get_StringDesc>
 800807a:	4603      	mov	r3, r0
 800807c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008088:	e018      	b.n	80080bc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b03      	cmp	r3, #3
 800808e:	d115      	bne.n	80080bc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73fb      	strb	r3, [r7, #15]
      break;
 8008094:	e012      	b.n	80080bc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
      break;
 800809a:	e00f      	b.n	80080bc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800809c:	bf00      	nop
 800809e:	e00e      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080a0:	bf00      	nop
 80080a2:	e00c      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080a4:	bf00      	nop
 80080a6:	e00a      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080a8:	bf00      	nop
 80080aa:	e008      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080ac:	bf00      	nop
 80080ae:	e006      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080b0:	bf00      	nop
 80080b2:	e004      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080b4:	bf00      	nop
 80080b6:	e002      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080b8:	bf00      	nop
 80080ba:	e000      	b.n	80080be <USBH_HandleEnum+0x3be>
      break;
 80080bc:	bf00      	nop
  }
  return Status;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f804 	bl	800810a <USBH_HandleSof>
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b0b      	cmp	r3, #11
 800811a:	d10a      	bne.n	8008132 <USBH_HandleSof+0x28>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
  }
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800814a:	bf00      	nop
}
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008166:	bf00      	nop
}
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f003 f962 	bl	800b48a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	791b      	ldrb	r3, [r3, #4]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fda5 	bl	8008d1c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	795b      	ldrb	r3, [r3, #5]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fd9f 	bl	8008d1c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4613      	mov	r3, r2
 8008202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008206:	2100      	movs	r1, #0
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f864 	bl	80082d6 <USBH_GetDescriptor>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	b292      	uxth	r2, r2
 8008228:	4619      	mov	r1, r3
 800822a:	f000 f918 	bl	800845e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af02      	add	r7, sp, #8
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	331c      	adds	r3, #28
 8008248:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800824a:	887b      	ldrh	r3, [r7, #2]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008254:	2100      	movs	r1, #0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f83d 	bl	80082d6 <USBH_GetDescriptor>
 800825c:	4603      	mov	r3, r0
 800825e:	72fb      	strb	r3, [r7, #11]
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d107      	bne.n	8008276 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800826c:	887a      	ldrh	r2, [r7, #2]
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f964 	bl	800853e <USBH_ParseCfgDesc>
  }

  return status;
 8008276:	7afb      	ldrb	r3, [r7, #11]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	461a      	mov	r2, r3
 800828c:	460b      	mov	r3, r1
 800828e:	72fb      	strb	r3, [r7, #11]
 8008290:	4613      	mov	r3, r2
 8008292:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	b29b      	uxth	r3, r3
 8008298:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800829c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80082a4:	893b      	ldrh	r3, [r7, #8]
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	460b      	mov	r3, r1
 80082aa:	2100      	movs	r1, #0
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f812 	bl	80082d6 <USBH_GetDescriptor>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d107      	bne.n	80082cc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082c2:	893a      	ldrh	r2, [r7, #8]
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fa37 	bl	800873a <USBH_ParseStringDesc>
  }

  return status;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	607b      	str	r3, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	72fb      	strb	r3, [r7, #11]
 80082e4:	4613      	mov	r3, r2
 80082e6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	789b      	ldrb	r3, [r3, #2]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d11c      	bne.n	800832a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2206      	movs	r2, #6
 8008300:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	893a      	ldrh	r2, [r7, #8]
 8008306:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008308:	893b      	ldrh	r3, [r7, #8]
 800830a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800830e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008312:	d104      	bne.n	800831e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f240 4209 	movw	r2, #1033	; 0x409
 800831a:	829a      	strh	r2, [r3, #20]
 800831c:	e002      	b.n	8008324 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8b3a      	ldrh	r2, [r7, #24]
 8008328:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800832a:	8b3b      	ldrh	r3, [r7, #24]
 800832c:	461a      	mov	r2, r3
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 fa50 	bl	80087d6 <USBH_CtlReq>
 8008336:	4603      	mov	r3, r0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	789b      	ldrb	r3, [r3, #2]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d10f      	bne.n	8008374 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2205      	movs	r2, #5
 800835e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008374:	2200      	movs	r2, #0
 8008376:	2100      	movs	r1, #0
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fa2c 	bl	80087d6 <USBH_CtlReq>
 800837e:	4603      	mov	r3, r0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	789b      	ldrb	r3, [r3, #2]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d10e      	bne.n	80083ba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2209      	movs	r2, #9
 80083a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	887a      	ldrh	r2, [r7, #2]
 80083ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa09 	bl	80087d6 <USBH_CtlReq>
 80083c4:	4603      	mov	r3, r0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	789b      	ldrb	r3, [r3, #2]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d10f      	bne.n	8008402 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2203      	movs	r2, #3
 80083ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008402:	2200      	movs	r2, #0
 8008404:	2100      	movs	r1, #0
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f9e5 	bl	80087d6 <USBH_CtlReq>
 800840c:	4603      	mov	r3, r0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	789b      	ldrb	r3, [r3, #2]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d10f      	bne.n	800844a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	b29a      	uxth	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800844a:	2200      	movs	r2, #0
 800844c:	2100      	movs	r1, #0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f9c1 	bl	80087d6 <USBH_CtlReq>
 8008454:	4603      	mov	r3, r0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	4613      	mov	r3, r2
 800846a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	781a      	ldrb	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	785a      	ldrb	r2, [r3, #1]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	3302      	adds	r3, #2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b29a      	uxth	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	3303      	adds	r3, #3
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	b29b      	uxth	r3, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	791a      	ldrb	r2, [r3, #4]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	795a      	ldrb	r2, [r3, #5]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	799a      	ldrb	r2, [r3, #6]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	79da      	ldrb	r2, [r3, #7]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80084b8:	88fb      	ldrh	r3, [r7, #6]
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d939      	bls.n	8008532 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	3308      	adds	r3, #8
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3309      	adds	r3, #9
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	4313      	orrs	r3, r2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	330a      	adds	r3, #10
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	330b      	adds	r3, #11
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	330c      	adds	r3, #12
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	330d      	adds	r3, #13
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	b29b      	uxth	r3, r3
 800850a:	4313      	orrs	r3, r2
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	7b9a      	ldrb	r2, [r3, #14]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	7bda      	ldrb	r2, [r3, #15]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	7c1a      	ldrb	r2, [r3, #16]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	7c5a      	ldrb	r2, [r3, #17]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	745a      	strb	r2, [r3, #17]
  }
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b08a      	sub	sp, #40	; 0x28
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	4613      	mov	r3, r2
 800854a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	781a      	ldrb	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	785a      	ldrb	r2, [r3, #1]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	3302      	adds	r3, #2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	b29a      	uxth	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3303      	adds	r3, #3
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	b29b      	uxth	r3, r3
 8008584:	4313      	orrs	r3, r2
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	791a      	ldrb	r2, [r3, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	795a      	ldrb	r2, [r3, #5]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	799a      	ldrb	r2, [r3, #6]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	79da      	ldrb	r2, [r3, #7]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	7a1a      	ldrb	r2, [r3, #8]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	d95f      	bls.n	800867a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80085ba:	2309      	movs	r3, #9
 80085bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085c2:	e051      	b.n	8008668 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085c4:	f107 0316 	add.w	r3, r7, #22
 80085c8:	4619      	mov	r1, r3
 80085ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085cc:	f000 f8e8 	bl	80087a0 <USBH_GetNextDesc>
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d146      	bne.n	8008668 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80085da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085de:	221a      	movs	r2, #26
 80085e0:	fb02 f303 	mul.w	r3, r2, r3
 80085e4:	3308      	adds	r3, #8
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4413      	add	r3, r2
 80085ea:	3302      	adds	r3, #2
 80085ec:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80085ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f0:	69f8      	ldr	r0, [r7, #28]
 80085f2:	f000 f846 	bl	8008682 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008600:	e022      	b.n	8008648 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008602:	f107 0316 	add.w	r3, r7, #22
 8008606:	4619      	mov	r1, r3
 8008608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800860a:	f000 f8c9 	bl	80087a0 <USBH_GetNextDesc>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b05      	cmp	r3, #5
 8008616:	d117      	bne.n	8008648 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800861c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008620:	3201      	adds	r2, #1
 8008622:	00d2      	lsls	r2, r2, #3
 8008624:	211a      	movs	r1, #26
 8008626:	fb01 f303 	mul.w	r3, r1, r3
 800862a:	4413      	add	r3, r2
 800862c:	3308      	adds	r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4413      	add	r3, r2
 8008632:	3304      	adds	r3, #4
 8008634:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008638:	69b8      	ldr	r0, [r7, #24]
 800863a:	f000 f851 	bl	80086e0 <USBH_ParseEPDesc>
            ep_ix++;
 800863e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008642:	3301      	adds	r3, #1
 8008644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	791b      	ldrb	r3, [r3, #4]
 800864c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008650:	429a      	cmp	r2, r3
 8008652:	d204      	bcs.n	800865e <USBH_ParseCfgDesc+0x120>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	885a      	ldrh	r2, [r3, #2]
 8008658:	8afb      	ldrh	r3, [r7, #22]
 800865a:	429a      	cmp	r2, r3
 800865c:	d8d1      	bhi.n	8008602 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800865e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008662:	3301      	adds	r3, #1
 8008664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800866c:	2b01      	cmp	r3, #1
 800866e:	d804      	bhi.n	800867a <USBH_ParseCfgDesc+0x13c>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	885a      	ldrh	r2, [r3, #2]
 8008674:	8afb      	ldrh	r3, [r7, #22]
 8008676:	429a      	cmp	r2, r3
 8008678:	d8a4      	bhi.n	80085c4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800867a:	bf00      	nop
 800867c:	3728      	adds	r7, #40	; 0x28
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	785a      	ldrb	r2, [r3, #1]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	789a      	ldrb	r2, [r3, #2]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	78da      	ldrb	r2, [r3, #3]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	791a      	ldrb	r2, [r3, #4]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	795a      	ldrb	r2, [r3, #5]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	799a      	ldrb	r2, [r3, #6]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	79da      	ldrb	r2, [r3, #7]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	7a1a      	ldrb	r2, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	721a      	strb	r2, [r3, #8]
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781a      	ldrb	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	785a      	ldrb	r2, [r3, #1]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	789a      	ldrb	r2, [r3, #2]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	78da      	ldrb	r2, [r3, #3]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	3304      	adds	r3, #4
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	b29a      	uxth	r2, r3
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	3305      	adds	r3, #5
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	b29b      	uxth	r3, r3
 800871e:	4313      	orrs	r3, r2
 8008720:	b29a      	uxth	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	799a      	ldrb	r2, [r3, #6]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	719a      	strb	r2, [r3, #6]
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800873a:	b480      	push	{r7}
 800873c:	b087      	sub	sp, #28
 800873e:	af00      	add	r7, sp, #0
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	4613      	mov	r3, r2
 8008746:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3301      	adds	r3, #1
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b03      	cmp	r3, #3
 8008750:	d120      	bne.n	8008794 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	1e9a      	subs	r2, r3, #2
 8008758:	88fb      	ldrh	r3, [r7, #6]
 800875a:	4293      	cmp	r3, r2
 800875c:	bf28      	it	cs
 800875e:	4613      	movcs	r3, r2
 8008760:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3302      	adds	r3, #2
 8008766:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008768:	2300      	movs	r3, #0
 800876a:	82fb      	strh	r3, [r7, #22]
 800876c:	e00b      	b.n	8008786 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800876e:	8afb      	ldrh	r3, [r7, #22]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	701a      	strb	r2, [r3, #0]
      pdest++;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3301      	adds	r3, #1
 800877e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008780:	8afb      	ldrh	r3, [r7, #22]
 8008782:	3302      	adds	r3, #2
 8008784:	82fb      	strh	r3, [r7, #22]
 8008786:	8afa      	ldrh	r2, [r7, #22]
 8008788:	8abb      	ldrh	r3, [r7, #20]
 800878a:	429a      	cmp	r2, r3
 800878c:	d3ef      	bcc.n	800876e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
  }
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	881a      	ldrh	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	4413      	add	r3, r2
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4413      	add	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087c8:	68fb      	ldr	r3, [r7, #12]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	4613      	mov	r3, r2
 80087e2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087e4:	2301      	movs	r3, #1
 80087e6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	789b      	ldrb	r3, [r3, #2]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d002      	beq.n	80087f6 <USBH_CtlReq+0x20>
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d00f      	beq.n	8008814 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80087f4:	e027      	b.n	8008846 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2202      	movs	r2, #2
 800880c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800880e:	2301      	movs	r3, #1
 8008810:	75fb      	strb	r3, [r7, #23]
      break;
 8008812:	e018      	b.n	8008846 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f81b 	bl	8008850 <USBH_HandleControl>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <USBH_CtlReq+0x54>
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b03      	cmp	r3, #3
 8008828:	d106      	bne.n	8008838 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	761a      	strb	r2, [r3, #24]
      break;
 8008836:	e005      	b.n	8008844 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d102      	bne.n	8008844 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	709a      	strb	r2, [r3, #2]
      break;
 8008844:	bf00      	nop
  }
  return status;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af02      	add	r7, sp, #8
 8008856:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7e1b      	ldrb	r3, [r3, #24]
 8008864:	3b01      	subs	r3, #1
 8008866:	2b0a      	cmp	r3, #10
 8008868:	f200 8158 	bhi.w	8008b1c <USBH_HandleControl+0x2cc>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <USBH_HandleControl+0x24>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	080088a1 	.word	0x080088a1
 8008878:	080088bb 	.word	0x080088bb
 800887c:	08008925 	.word	0x08008925
 8008880:	0800894b 	.word	0x0800894b
 8008884:	08008983 	.word	0x08008983
 8008888:	080089af 	.word	0x080089af
 800888c:	08008a01 	.word	0x08008a01
 8008890:	08008a23 	.word	0x08008a23
 8008894:	08008a5f 	.word	0x08008a5f
 8008898:	08008a87 	.word	0x08008a87
 800889c:	08008ac5 	.word	0x08008ac5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f103 0110 	add.w	r1, r3, #16
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	795b      	ldrb	r3, [r3, #5]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f945 	bl	8008b3c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	761a      	strb	r2, [r3, #24]
      break;
 80088b8:	e13b      	b.n	8008b32 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	795b      	ldrb	r3, [r3, #5]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f002 fecf 	bl	800b664 <USBH_LL_GetURBState>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d11e      	bne.n	800890e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7c1b      	ldrb	r3, [r3, #16]
 80088d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	8adb      	ldrh	r3, [r3, #22]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088e2:	7b7b      	ldrb	r3, [r7, #13]
 80088e4:	2b80      	cmp	r3, #128	; 0x80
 80088e6:	d103      	bne.n	80088f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2203      	movs	r2, #3
 80088ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088ee:	e117      	b.n	8008b20 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2205      	movs	r2, #5
 80088f4:	761a      	strb	r2, [r3, #24]
      break;
 80088f6:	e113      	b.n	8008b20 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80088f8:	7b7b      	ldrb	r3, [r7, #13]
 80088fa:	2b80      	cmp	r3, #128	; 0x80
 80088fc:	d103      	bne.n	8008906 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2209      	movs	r2, #9
 8008902:	761a      	strb	r2, [r3, #24]
      break;
 8008904:	e10c      	b.n	8008b20 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2207      	movs	r2, #7
 800890a:	761a      	strb	r2, [r3, #24]
      break;
 800890c:	e108      	b.n	8008b20 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b04      	cmp	r3, #4
 8008912:	d003      	beq.n	800891c <USBH_HandleControl+0xcc>
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b02      	cmp	r3, #2
 8008918:	f040 8102 	bne.w	8008b20 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	220b      	movs	r2, #11
 8008920:	761a      	strb	r2, [r3, #24]
      break;
 8008922:	e0fd      	b.n	8008b20 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800892a:	b29a      	uxth	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6899      	ldr	r1, [r3, #8]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	899a      	ldrh	r2, [r3, #12]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	791b      	ldrb	r3, [r3, #4]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f93c 	bl	8008bba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2204      	movs	r2, #4
 8008946:	761a      	strb	r2, [r3, #24]
      break;
 8008948:	e0f3      	b.n	8008b32 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	791b      	ldrb	r3, [r3, #4]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f002 fe87 	bl	800b664 <USBH_LL_GetURBState>
 8008956:	4603      	mov	r3, r0
 8008958:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d102      	bne.n	8008966 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2209      	movs	r2, #9
 8008964:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b05      	cmp	r3, #5
 800896a:	d102      	bne.n	8008972 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800896c:	2303      	movs	r3, #3
 800896e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008970:	e0d8      	b.n	8008b24 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b04      	cmp	r3, #4
 8008976:	f040 80d5 	bne.w	8008b24 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	220b      	movs	r2, #11
 800897e:	761a      	strb	r2, [r3, #24]
      break;
 8008980:	e0d0      	b.n	8008b24 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6899      	ldr	r1, [r3, #8]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	899a      	ldrh	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	7958      	ldrb	r0, [r3, #5]
 800898e:	2301      	movs	r3, #1
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	4603      	mov	r3, r0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f8eb 	bl	8008b70 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2206      	movs	r2, #6
 80089aa:	761a      	strb	r2, [r3, #24]
      break;
 80089ac:	e0c1      	b.n	8008b32 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	795b      	ldrb	r3, [r3, #5]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f002 fe55 	bl	800b664 <USBH_LL_GetURBState>
 80089ba:	4603      	mov	r3, r0
 80089bc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d103      	bne.n	80089cc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2207      	movs	r2, #7
 80089c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089ca:	e0ad      	b.n	8008b28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d105      	bne.n	80089de <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	220c      	movs	r2, #12
 80089d6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089d8:	2303      	movs	r3, #3
 80089da:	73fb      	strb	r3, [r7, #15]
      break;
 80089dc:	e0a4      	b.n	8008b28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d103      	bne.n	80089ec <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2205      	movs	r2, #5
 80089e8:	761a      	strb	r2, [r3, #24]
      break;
 80089ea:	e09d      	b.n	8008b28 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	f040 809a 	bne.w	8008b28 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	220b      	movs	r2, #11
 80089f8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80089fa:	2302      	movs	r3, #2
 80089fc:	73fb      	strb	r3, [r7, #15]
      break;
 80089fe:	e093      	b.n	8008b28 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	791b      	ldrb	r3, [r3, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f8d6 	bl	8008bba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	761a      	strb	r2, [r3, #24]

      break;
 8008a20:	e087      	b.n	8008b32 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	791b      	ldrb	r3, [r3, #4]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f002 fe1b 	bl	800b664 <USBH_LL_GetURBState>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d105      	bne.n	8008a44 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	220d      	movs	r2, #13
 8008a3c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a42:	e073      	b.n	8008b2c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d103      	bne.n	8008a52 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	220b      	movs	r2, #11
 8008a4e:	761a      	strb	r2, [r3, #24]
      break;
 8008a50:	e06c      	b.n	8008b2c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b05      	cmp	r3, #5
 8008a56:	d169      	bne.n	8008b2c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5c:	e066      	b.n	8008b2c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	795a      	ldrb	r2, [r3, #5]
 8008a62:	2301      	movs	r3, #1
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f87f 	bl	8008b70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	220a      	movs	r2, #10
 8008a82:	761a      	strb	r2, [r3, #24]
      break;
 8008a84:	e055      	b.n	8008b32 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	795b      	ldrb	r3, [r3, #5]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f002 fde9 	bl	800b664 <USBH_LL_GetURBState>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d105      	bne.n	8008aa8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	220d      	movs	r2, #13
 8008aa4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008aa6:	e043      	b.n	8008b30 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d103      	bne.n	8008ab6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2209      	movs	r2, #9
 8008ab2:	761a      	strb	r2, [r3, #24]
      break;
 8008ab4:	e03c      	b.n	8008b30 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d139      	bne.n	8008b30 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	220b      	movs	r2, #11
 8008ac0:	761a      	strb	r2, [r3, #24]
      break;
 8008ac2:	e035      	b.n	8008b30 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7e5b      	ldrb	r3, [r3, #25]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	765a      	strb	r2, [r3, #25]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	7e5b      	ldrb	r3, [r3, #25]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d806      	bhi.n	8008ae6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ae4:	e025      	b.n	8008b32 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008aec:	2106      	movs	r1, #6
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	795b      	ldrb	r3, [r3, #5]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f90c 	bl	8008d1c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f906 	bl	8008d1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b16:	2302      	movs	r3, #2
 8008b18:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1a:	e00a      	b.n	8008b32 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008b1c:	bf00      	nop
 8008b1e:	e008      	b.n	8008b32 <USBH_HandleControl+0x2e2>
      break;
 8008b20:	bf00      	nop
 8008b22:	e006      	b.n	8008b32 <USBH_HandleControl+0x2e2>
      break;
 8008b24:	bf00      	nop
 8008b26:	e004      	b.n	8008b32 <USBH_HandleControl+0x2e2>
      break;
 8008b28:	bf00      	nop
 8008b2a:	e002      	b.n	8008b32 <USBH_HandleControl+0x2e2>
      break;
 8008b2c:	bf00      	nop
 8008b2e:	e000      	b.n	8008b32 <USBH_HandleControl+0x2e2>
      break;
 8008b30:	bf00      	nop
  }

  return status;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b4a:	79f9      	ldrb	r1, [r7, #7]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9303      	str	r3, [sp, #12]
 8008b50:	2308      	movs	r3, #8
 8008b52:	9302      	str	r3, [sp, #8]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f002 fd4e 	bl	800b602 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	460b      	mov	r3, r1
 8008b80:	80fb      	strh	r3, [r7, #6]
 8008b82:	4613      	mov	r3, r2
 8008b84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b94:	7979      	ldrb	r1, [r7, #5]
 8008b96:	7e3b      	ldrb	r3, [r7, #24]
 8008b98:	9303      	str	r3, [sp, #12]
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	9302      	str	r3, [sp, #8]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f002 fd29 	bl	800b602 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b088      	sub	sp, #32
 8008bbe:	af04      	add	r7, sp, #16
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	460b      	mov	r3, r1
 8008bca:	80fb      	strh	r3, [r7, #6]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bd0:	7979      	ldrb	r1, [r7, #5]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9303      	str	r3, [sp, #12]
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	9302      	str	r3, [sp, #8]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	2301      	movs	r3, #1
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	2300      	movs	r3, #0
 8008be4:	2201      	movs	r2, #1
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f002 fd0b 	bl	800b602 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008bec:	2300      	movs	r3, #0

}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b088      	sub	sp, #32
 8008bfa:	af04      	add	r7, sp, #16
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	4611      	mov	r1, r2
 8008c02:	461a      	mov	r2, r3
 8008c04:	460b      	mov	r3, r1
 8008c06:	80fb      	strh	r3, [r7, #6]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c1a:	7979      	ldrb	r1, [r7, #5]
 8008c1c:	7e3b      	ldrb	r3, [r7, #24]
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	9302      	str	r3, [sp, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	2200      	movs	r2, #0
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f002 fce6 	bl	800b602 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	460b      	mov	r3, r1
 8008c50:	80fb      	strh	r3, [r7, #6]
 8008c52:	4613      	mov	r3, r2
 8008c54:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c56:	7979      	ldrb	r1, [r7, #5]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	9302      	str	r3, [sp, #8]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	2301      	movs	r3, #1
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2302      	movs	r3, #2
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f002 fcc8 	bl	800b602 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af04      	add	r7, sp, #16
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	70fb      	strb	r3, [r7, #3]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	70bb      	strb	r3, [r7, #2]
 8008c92:	4613      	mov	r3, r2
 8008c94:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c96:	7878      	ldrb	r0, [r7, #1]
 8008c98:	78ba      	ldrb	r2, [r7, #2]
 8008c9a:	78f9      	ldrb	r1, [r7, #3]
 8008c9c:	8b3b      	ldrh	r3, [r7, #24]
 8008c9e:	9302      	str	r3, [sp, #8]
 8008ca0:	7d3b      	ldrb	r3, [r7, #20]
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	7c3b      	ldrb	r3, [r7, #16]
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	4603      	mov	r3, r0
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f002 fc5b 	bl	800b566 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fc7a 	bl	800b5c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f836 	bl	8008d58 <USBH_GetFreePipe>
 8008cec:	4603      	mov	r3, r0
 8008cee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008cf0:	89fb      	ldrh	r3, [r7, #14]
 8008cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00a      	beq.n	8008d10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	89fb      	ldrh	r3, [r7, #14]
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	33e0      	adds	r3, #224	; 0xe0
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	b2db      	uxtb	r3, r3
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	2b0a      	cmp	r3, #10
 8008d2c:	d80d      	bhi.n	8008d4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	33e0      	adds	r3, #224	; 0xe0
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	33e0      	adds	r3, #224	; 0xe0
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
 8008d68:	e00f      	b.n	8008d8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	33e0      	adds	r3, #224	; 0xe0
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	e007      	b.n	8008d94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	3301      	adds	r3, #1
 8008d88:	73fb      	strb	r3, [r7, #15]
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2b0a      	cmp	r3, #10
 8008d8e:	d9ec      	bls.n	8008d6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	4a08      	ldr	r2, [pc, #32]	; (8008dd0 <disk_status+0x30>)
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	79fa      	ldrb	r2, [r7, #7]
 8008db8:	4905      	ldr	r1, [pc, #20]	; (8008dd0 <disk_status+0x30>)
 8008dba:	440a      	add	r2, r1
 8008dbc:	7a12      	ldrb	r2, [r2, #8]
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4798      	blx	r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	200100dc 	.word	0x200100dc

08008dd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	4a0d      	ldr	r2, [pc, #52]	; (8008e1c <disk_initialize+0x48>)
 8008de6:	5cd3      	ldrb	r3, [r2, r3]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d111      	bne.n	8008e10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	4a0b      	ldr	r2, [pc, #44]	; (8008e1c <disk_initialize+0x48>)
 8008df0:	2101      	movs	r1, #1
 8008df2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	4a09      	ldr	r2, [pc, #36]	; (8008e1c <disk_initialize+0x48>)
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	79fa      	ldrb	r2, [r7, #7]
 8008e02:	4906      	ldr	r1, [pc, #24]	; (8008e1c <disk_initialize+0x48>)
 8008e04:	440a      	add	r2, r1
 8008e06:	7a12      	ldrb	r2, [r2, #8]
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200100dc 	.word	0x200100dc

08008e20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <disk_read+0x3c>)
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	689c      	ldr	r4, [r3, #8]
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	4a07      	ldr	r2, [pc, #28]	; (8008e5c <disk_read+0x3c>)
 8008e40:	4413      	add	r3, r2
 8008e42:	7a18      	ldrb	r0, [r3, #8]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	47a0      	blx	r4
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd90      	pop	{r4, r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200100dc 	.word	0x200100dc

08008e60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <disk_write+0x3c>)
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	68dc      	ldr	r4, [r3, #12]
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	4a07      	ldr	r2, [pc, #28]	; (8008e9c <disk_write+0x3c>)
 8008e80:	4413      	add	r3, r2
 8008e82:	7a18      	ldrb	r0, [r3, #8]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	47a0      	blx	r4
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd90      	pop	{r4, r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200100dc 	.word	0x200100dc

08008ea0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	603a      	str	r2, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
 8008eac:	460b      	mov	r3, r1
 8008eae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <disk_ioctl+0x38>)
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	79fa      	ldrb	r2, [r7, #7]
 8008ebe:	4906      	ldr	r1, [pc, #24]	; (8008ed8 <disk_ioctl+0x38>)
 8008ec0:	440a      	add	r2, r1
 8008ec2:	7a10      	ldrb	r0, [r2, #8]
 8008ec4:	79b9      	ldrb	r1, [r7, #6]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	4798      	blx	r3
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	200100dc 	.word	0x200100dc

08008edc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008eec:	89fb      	ldrh	r3, [r7, #14]
 8008eee:	021b      	lsls	r3, r3, #8
 8008ef0:	b21a      	sxth	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	b21b      	sxth	r3, r3
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	b21b      	sxth	r3, r3
 8008efc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008efe:	89fb      	ldrh	r3, [r7, #14]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3303      	adds	r3, #3
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	3202      	adds	r2, #2
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	3201      	adds	r2, #1
 8008f32:	7812      	ldrb	r2, [r2, #0]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
	return rv;
 8008f44:	68fb      	ldr	r3, [r7, #12]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	887a      	ldrh	r2, [r7, #2]
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	887b      	ldrh	r3, [r7, #2]
 8008f6c:	0a1b      	lsrs	r3, r3, #8
 8008f6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	887a      	ldrh	r2, [r7, #2]
 8008f78:	b2d2      	uxtb	r2, r2
 8008f7a:	701a      	strb	r2, [r3, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	0a1b      	lsrs	r3, r3, #8
 8008fa2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	607a      	str	r2, [r7, #4]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	0a1b      	lsrs	r3, r3, #8
 8008fb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	0a1b      	lsrs	r3, r3, #8
 8008fc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	b2d2      	uxtb	r2, r2
 8008fd2:	701a      	strb	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00d      	beq.n	8009016 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	1c53      	adds	r3, r2, #1
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	1c59      	adds	r1, r3, #1
 8009004:	6179      	str	r1, [r7, #20]
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3b01      	subs	r3, #1
 800900e:	607b      	str	r3, [r7, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1f1      	bne.n	8008ffa <mem_cpy+0x1a>
	}
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009022:	b480      	push	{r7}
 8009024:	b087      	sub	sp, #28
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	617a      	str	r2, [r7, #20]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	b2d2      	uxtb	r2, r2
 800903c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3b01      	subs	r3, #1
 8009042:	607b      	str	r3, [r7, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f3      	bne.n	8009032 <mem_set+0x10>
}
 800904a:	bf00      	nop
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009056:	b480      	push	{r7}
 8009058:	b089      	sub	sp, #36	; 0x24
 800905a:	af00      	add	r7, sp, #0
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	61fa      	str	r2, [r7, #28]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	4619      	mov	r1, r3
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	61ba      	str	r2, [r7, #24]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	1acb      	subs	r3, r1, r3
 8009082:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3b01      	subs	r3, #1
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <mem_cmp+0x40>
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0eb      	beq.n	800906e <mem_cmp+0x18>

	return r;
 8009096:	697b      	ldr	r3, [r7, #20]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3724      	adds	r7, #36	; 0x24
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80090ae:	e002      	b.n	80090b6 <chk_chr+0x12>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3301      	adds	r3, #1
 80090b4:	607b      	str	r3, [r7, #4]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <chk_chr+0x26>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d1f2      	bne.n	80090b0 <chk_chr+0xc>
	return *str;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	781b      	ldrb	r3, [r3, #0]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	e029      	b.n	8009144 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80090f0:	4a27      	ldr	r2, [pc, #156]	; (8009190 <chk_lock+0xb4>)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	4413      	add	r3, r2
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d01d      	beq.n	800913a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80090fe:	4a24      	ldr	r2, [pc, #144]	; (8009190 <chk_lock+0xb4>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	4413      	add	r3, r2
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d116      	bne.n	800913e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009110:	4a1f      	ldr	r2, [pc, #124]	; (8009190 <chk_lock+0xb4>)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	011b      	lsls	r3, r3, #4
 8009116:	4413      	add	r3, r2
 8009118:	3304      	adds	r3, #4
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009120:	429a      	cmp	r2, r3
 8009122:	d10c      	bne.n	800913e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009124:	4a1a      	ldr	r2, [pc, #104]	; (8009190 <chk_lock+0xb4>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	4413      	add	r3, r2
 800912c:	3308      	adds	r3, #8
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009134:	429a      	cmp	r2, r3
 8009136:	d102      	bne.n	800913e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009138:	e007      	b.n	800914a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800913a:	2301      	movs	r3, #1
 800913c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d9d2      	bls.n	80090f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d109      	bne.n	8009164 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <chk_lock+0x80>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d101      	bne.n	8009160 <chk_lock+0x84>
 800915c:	2300      	movs	r3, #0
 800915e:	e010      	b.n	8009182 <chk_lock+0xa6>
 8009160:	2312      	movs	r3, #18
 8009162:	e00e      	b.n	8009182 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d108      	bne.n	800917c <chk_lock+0xa0>
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <chk_lock+0xb4>)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	4413      	add	r3, r2
 8009172:	330c      	adds	r3, #12
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917a:	d101      	bne.n	8009180 <chk_lock+0xa4>
 800917c:	2310      	movs	r3, #16
 800917e:	e000      	b.n	8009182 <chk_lock+0xa6>
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	200100bc 	.word	0x200100bc

08009194 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800919a:	2300      	movs	r3, #0
 800919c:	607b      	str	r3, [r7, #4]
 800919e:	e002      	b.n	80091a6 <enq_lock+0x12>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3301      	adds	r3, #1
 80091a4:	607b      	str	r3, [r7, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d806      	bhi.n	80091ba <enq_lock+0x26>
 80091ac:	4a09      	ldr	r2, [pc, #36]	; (80091d4 <enq_lock+0x40>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	4413      	add	r3, r2
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1f2      	bne.n	80091a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	bf14      	ite	ne
 80091c0:	2301      	movne	r3, #1
 80091c2:	2300      	moveq	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	200100bc 	.word	0x200100bc

080091d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	e01f      	b.n	8009228 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80091e8:	4a41      	ldr	r2, [pc, #260]	; (80092f0 <inc_lock+0x118>)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	011b      	lsls	r3, r3, #4
 80091ee:	4413      	add	r3, r2
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d113      	bne.n	8009222 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80091fa:	4a3d      	ldr	r2, [pc, #244]	; (80092f0 <inc_lock+0x118>)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	4413      	add	r3, r2
 8009202:	3304      	adds	r3, #4
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800920a:	429a      	cmp	r2, r3
 800920c:	d109      	bne.n	8009222 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800920e:	4a38      	ldr	r2, [pc, #224]	; (80092f0 <inc_lock+0x118>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	4413      	add	r3, r2
 8009216:	3308      	adds	r3, #8
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800921e:	429a      	cmp	r2, r3
 8009220:	d006      	beq.n	8009230 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d9dc      	bls.n	80091e8 <inc_lock+0x10>
 800922e:	e000      	b.n	8009232 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009230:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d132      	bne.n	800929e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e002      	b.n	8009244 <inc_lock+0x6c>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3301      	adds	r3, #1
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d806      	bhi.n	8009258 <inc_lock+0x80>
 800924a:	4a29      	ldr	r2, [pc, #164]	; (80092f0 <inc_lock+0x118>)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	4413      	add	r3, r2
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f2      	bne.n	800923e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d101      	bne.n	8009262 <inc_lock+0x8a>
 800925e:	2300      	movs	r3, #0
 8009260:	e040      	b.n	80092e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4922      	ldr	r1, [pc, #136]	; (80092f0 <inc_lock+0x118>)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	440b      	add	r3, r1
 800926e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689a      	ldr	r2, [r3, #8]
 8009274:	491e      	ldr	r1, [pc, #120]	; (80092f0 <inc_lock+0x118>)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	011b      	lsls	r3, r3, #4
 800927a:	440b      	add	r3, r1
 800927c:	3304      	adds	r3, #4
 800927e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	695a      	ldr	r2, [r3, #20]
 8009284:	491a      	ldr	r1, [pc, #104]	; (80092f0 <inc_lock+0x118>)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	440b      	add	r3, r1
 800928c:	3308      	adds	r3, #8
 800928e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009290:	4a17      	ldr	r2, [pc, #92]	; (80092f0 <inc_lock+0x118>)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	011b      	lsls	r3, r3, #4
 8009296:	4413      	add	r3, r2
 8009298:	330c      	adds	r3, #12
 800929a:	2200      	movs	r2, #0
 800929c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d009      	beq.n	80092b8 <inc_lock+0xe0>
 80092a4:	4a12      	ldr	r2, [pc, #72]	; (80092f0 <inc_lock+0x118>)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	4413      	add	r3, r2
 80092ac:	330c      	adds	r3, #12
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <inc_lock+0xe0>
 80092b4:	2300      	movs	r3, #0
 80092b6:	e015      	b.n	80092e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d108      	bne.n	80092d0 <inc_lock+0xf8>
 80092be:	4a0c      	ldr	r2, [pc, #48]	; (80092f0 <inc_lock+0x118>)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	4413      	add	r3, r2
 80092c6:	330c      	adds	r3, #12
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	3301      	adds	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	e001      	b.n	80092d4 <inc_lock+0xfc>
 80092d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092d4:	4906      	ldr	r1, [pc, #24]	; (80092f0 <inc_lock+0x118>)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	011b      	lsls	r3, r3, #4
 80092da:	440b      	add	r3, r1
 80092dc:	330c      	adds	r3, #12
 80092de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3301      	adds	r3, #1
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	200100bc 	.word	0x200100bc

080092f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3b01      	subs	r3, #1
 8009300:	607b      	str	r3, [r7, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d825      	bhi.n	8009354 <dec_lock+0x60>
		n = Files[i].ctr;
 8009308:	4a17      	ldr	r2, [pc, #92]	; (8009368 <dec_lock+0x74>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	4413      	add	r3, r2
 8009310:	330c      	adds	r3, #12
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009316:	89fb      	ldrh	r3, [r7, #14]
 8009318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800931c:	d101      	bne.n	8009322 <dec_lock+0x2e>
 800931e:	2300      	movs	r3, #0
 8009320:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009322:	89fb      	ldrh	r3, [r7, #14]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <dec_lock+0x3a>
 8009328:	89fb      	ldrh	r3, [r7, #14]
 800932a:	3b01      	subs	r3, #1
 800932c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800932e:	4a0e      	ldr	r2, [pc, #56]	; (8009368 <dec_lock+0x74>)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	011b      	lsls	r3, r3, #4
 8009334:	4413      	add	r3, r2
 8009336:	330c      	adds	r3, #12
 8009338:	89fa      	ldrh	r2, [r7, #14]
 800933a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800933c:	89fb      	ldrh	r3, [r7, #14]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d105      	bne.n	800934e <dec_lock+0x5a>
 8009342:	4a09      	ldr	r2, [pc, #36]	; (8009368 <dec_lock+0x74>)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	4413      	add	r3, r2
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	737b      	strb	r3, [r7, #13]
 8009352:	e001      	b.n	8009358 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009354:	2302      	movs	r3, #2
 8009356:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009358:	7b7b      	ldrb	r3, [r7, #13]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	200100bc 	.word	0x200100bc

0800936c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	e010      	b.n	800939c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800937a:	4a0d      	ldr	r2, [pc, #52]	; (80093b0 <clear_lock+0x44>)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	4413      	add	r3, r2
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	429a      	cmp	r2, r3
 8009388:	d105      	bne.n	8009396 <clear_lock+0x2a>
 800938a:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <clear_lock+0x44>)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	4413      	add	r3, r2
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d9eb      	bls.n	800937a <clear_lock+0xe>
	}
}
 80093a2:	bf00      	nop
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	200100bc 	.word	0x200100bc

080093b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	78db      	ldrb	r3, [r3, #3]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d034      	beq.n	8009432 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7858      	ldrb	r0, [r3, #1]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093d8:	2301      	movs	r3, #1
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	f7ff fd40 	bl	8008e60 <disk_write>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	73fb      	strb	r3, [r7, #15]
 80093ea:	e022      	b.n	8009432 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d217      	bcs.n	8009432 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	789b      	ldrb	r3, [r3, #2]
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	e010      	b.n	800942c <sync_window+0x78>
					wsect += fs->fsize;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4413      	add	r3, r2
 8009412:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7858      	ldrb	r0, [r3, #1]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800941e:	2301      	movs	r3, #1
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	f7ff fd1d 	bl	8008e60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3b01      	subs	r3, #1
 800942a:	613b      	str	r3, [r7, #16]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d8eb      	bhi.n	800940a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009432:	7bfb      	ldrb	r3, [r7, #15]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d01b      	beq.n	800948c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ffad 	bl	80093b4 <sync_window>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d113      	bne.n	800948c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	7858      	ldrb	r0, [r3, #1]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800946e:	2301      	movs	r3, #1
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	f7ff fcd5 	bl	8008e20 <disk_read>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800947c:	f04f 33ff 	mov.w	r3, #4294967295
 8009480:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009482:	2301      	movs	r3, #1
 8009484:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800948c:	7bfb      	ldrb	r3, [r7, #15]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ff87 	bl	80093b4 <sync_window>
 80094a6:	4603      	mov	r3, r0
 80094a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d158      	bne.n	8009562 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d148      	bne.n	800954a <sync_fs+0xb2>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	791b      	ldrb	r3, [r3, #4]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d144      	bne.n	800954a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3330      	adds	r3, #48	; 0x30
 80094c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094c8:	2100      	movs	r1, #0
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff fda9 	bl	8009022 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3330      	adds	r3, #48	; 0x30
 80094d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fd38 	bl	8008f52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3330      	adds	r3, #48	; 0x30
 80094e6:	4921      	ldr	r1, [pc, #132]	; (800956c <sync_fs+0xd4>)
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff fd4d 	bl	8008f88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3330      	adds	r3, #48	; 0x30
 80094f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094f6:	491e      	ldr	r1, [pc, #120]	; (8009570 <sync_fs+0xd8>)
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7ff fd45 	bl	8008f88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	3330      	adds	r3, #48	; 0x30
 8009502:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7ff fd3b 	bl	8008f88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3330      	adds	r3, #48	; 0x30
 8009516:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f7ff fd31 	bl	8008f88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7858      	ldrb	r0, [r3, #1]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953e:	2301      	movs	r3, #1
 8009540:	f7ff fc8e 	bl	8008e60 <disk_write>
			fs->fsi_flag = 0;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	785b      	ldrb	r3, [r3, #1]
 800954e:	2200      	movs	r2, #0
 8009550:	2100      	movs	r1, #0
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff fca4 	bl	8008ea0 <disk_ioctl>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <sync_fs+0xca>
 800955e:	2301      	movs	r3, #1
 8009560:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	41615252 	.word	0x41615252
 8009570:	61417272 	.word	0x61417272

08009574 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	3b02      	subs	r3, #2
 8009582:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	3b02      	subs	r3, #2
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	429a      	cmp	r2, r3
 800958e:	d301      	bcc.n	8009594 <clust2sect+0x20>
 8009590:	2300      	movs	r3, #0
 8009592:	e008      	b.n	80095a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	895b      	ldrh	r3, [r3, #10]
 8009598:	461a      	mov	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	fb03 f202 	mul.w	r2, r3, r2
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a4:	4413      	add	r3, r2
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d904      	bls.n	80095d2 <get_fat+0x20>
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d302      	bcc.n	80095d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80095d2:	2301      	movs	r3, #1
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	e08c      	b.n	80096f2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80095d8:	f04f 33ff 	mov.w	r3, #4294967295
 80095dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d045      	beq.n	8009672 <get_fat+0xc0>
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d05d      	beq.n	80096a6 <get_fat+0xf4>
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d177      	bne.n	80096de <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	085b      	lsrs	r3, r3, #1
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4413      	add	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6a1a      	ldr	r2, [r3, #32]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	0a5b      	lsrs	r3, r3, #9
 8009604:	4413      	add	r3, r2
 8009606:	4619      	mov	r1, r3
 8009608:	6938      	ldr	r0, [r7, #16]
 800960a:	f7ff ff17 	bl	800943c <move_window>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d167      	bne.n	80096e4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	60fa      	str	r2, [r7, #12]
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4413      	add	r3, r2
 8009622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009626:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	0a5b      	lsrs	r3, r3, #9
 8009630:	4413      	add	r3, r2
 8009632:	4619      	mov	r1, r3
 8009634:	6938      	ldr	r0, [r7, #16]
 8009636:	f7ff ff01 	bl	800943c <move_window>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d153      	bne.n	80096e8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	4413      	add	r3, r2
 800964a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	461a      	mov	r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	4313      	orrs	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <get_fat+0xb6>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	091b      	lsrs	r3, r3, #4
 8009666:	e002      	b.n	800966e <get_fat+0xbc>
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800966e:	617b      	str	r3, [r7, #20]
			break;
 8009670:	e03f      	b.n	80096f2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	6a1a      	ldr	r2, [r3, #32]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	0a1b      	lsrs	r3, r3, #8
 800967a:	4413      	add	r3, r2
 800967c:	4619      	mov	r1, r3
 800967e:	6938      	ldr	r0, [r7, #16]
 8009680:	f7ff fedc 	bl	800943c <move_window>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d130      	bne.n	80096ec <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009698:	4413      	add	r3, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff fc1e 	bl	8008edc <ld_word>
 80096a0:	4603      	mov	r3, r0
 80096a2:	617b      	str	r3, [r7, #20]
			break;
 80096a4:	e025      	b.n	80096f2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	6a1a      	ldr	r2, [r3, #32]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	09db      	lsrs	r3, r3, #7
 80096ae:	4413      	add	r3, r2
 80096b0:	4619      	mov	r1, r3
 80096b2:	6938      	ldr	r0, [r7, #16]
 80096b4:	f7ff fec2 	bl	800943c <move_window>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d118      	bne.n	80096f0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096cc:	4413      	add	r3, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fc1c 	bl	8008f0c <ld_dword>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80096da:	617b      	str	r3, [r7, #20]
			break;
 80096dc:	e009      	b.n	80096f2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80096de:	2301      	movs	r3, #1
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e006      	b.n	80096f2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096e4:	bf00      	nop
 80096e6:	e004      	b.n	80096f2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096e8:	bf00      	nop
 80096ea:	e002      	b.n	80096f2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80096ec:	bf00      	nop
 80096ee:	e000      	b.n	80096f2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096f0:	bf00      	nop
		}
	}

	return val;
 80096f2:	697b      	ldr	r3, [r7, #20]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80096fc:	b590      	push	{r4, r7, lr}
 80096fe:	b089      	sub	sp, #36	; 0x24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009708:	2302      	movs	r3, #2
 800970a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b01      	cmp	r3, #1
 8009710:	f240 80d6 	bls.w	80098c0 <put_fat+0x1c4>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	429a      	cmp	r2, r3
 800971c:	f080 80d0 	bcs.w	80098c0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d073      	beq.n	8009810 <put_fat+0x114>
 8009728:	2b03      	cmp	r3, #3
 800972a:	f000 8091 	beq.w	8009850 <put_fat+0x154>
 800972e:	2b01      	cmp	r3, #1
 8009730:	f040 80c6 	bne.w	80098c0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	61bb      	str	r3, [r7, #24]
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	085b      	lsrs	r3, r3, #1
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	4413      	add	r3, r2
 8009740:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6a1a      	ldr	r2, [r3, #32]
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	0a5b      	lsrs	r3, r3, #9
 800974a:	4413      	add	r3, r2
 800974c:	4619      	mov	r1, r3
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f7ff fe74 	bl	800943c <move_window>
 8009754:	4603      	mov	r3, r0
 8009756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009758:	7ffb      	ldrb	r3, [r7, #31]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 80a9 	bne.w	80098b2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	1c59      	adds	r1, r3, #1
 800976a:	61b9      	str	r1, [r7, #24]
 800976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009770:	4413      	add	r3, r2
 8009772:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00d      	beq.n	800979a <put_fat+0x9e>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b25b      	sxtb	r3, r3
 8009784:	f003 030f 	and.w	r3, r3, #15
 8009788:	b25a      	sxtb	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	b25b      	sxtb	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	b25b      	sxtb	r3, r3
 8009796:	b2db      	uxtb	r3, r3
 8009798:	e001      	b.n	800979e <put_fat+0xa2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a1a      	ldr	r2, [r3, #32]
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	0a5b      	lsrs	r3, r3, #9
 80097b0:	4413      	add	r3, r2
 80097b2:	4619      	mov	r1, r3
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff fe41 	bl	800943c <move_window>
 80097ba:	4603      	mov	r3, r0
 80097bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097be:	7ffb      	ldrb	r3, [r7, #31]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d178      	bne.n	80098b6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d0:	4413      	add	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <put_fat+0xea>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	091b      	lsrs	r3, r3, #4
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	e00e      	b.n	8009804 <put_fat+0x108>
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b25b      	sxtb	r3, r3
 80097ec:	f023 030f 	bic.w	r3, r3, #15
 80097f0:	b25a      	sxtb	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	0a1b      	lsrs	r3, r3, #8
 80097f6:	b25b      	sxtb	r3, r3
 80097f8:	f003 030f 	and.w	r3, r3, #15
 80097fc:	b25b      	sxtb	r3, r3
 80097fe:	4313      	orrs	r3, r2
 8009800:	b25b      	sxtb	r3, r3
 8009802:	b2db      	uxtb	r3, r3
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	70da      	strb	r2, [r3, #3]
			break;
 800980e:	e057      	b.n	80098c0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6a1a      	ldr	r2, [r3, #32]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	4413      	add	r3, r2
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff fe0d 	bl	800943c <move_window>
 8009822:	4603      	mov	r3, r0
 8009824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009826:	7ffb      	ldrb	r3, [r7, #31]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d146      	bne.n	80098ba <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800983a:	4413      	add	r3, r2
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	b292      	uxth	r2, r2
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fb85 	bl	8008f52 <st_word>
			fs->wflag = 1;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	70da      	strb	r2, [r3, #3]
			break;
 800984e:	e037      	b.n	80098c0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a1a      	ldr	r2, [r3, #32]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	09db      	lsrs	r3, r3, #7
 8009858:	4413      	add	r3, r2
 800985a:	4619      	mov	r1, r3
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7ff fded 	bl	800943c <move_window>
 8009862:	4603      	mov	r3, r0
 8009864:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009866:	7ffb      	ldrb	r3, [r7, #31]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d128      	bne.n	80098be <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009880:	4413      	add	r3, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fb42 	bl	8008f0c <ld_dword>
 8009888:	4603      	mov	r3, r0
 800988a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800988e:	4323      	orrs	r3, r4
 8009890:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80098a0:	4413      	add	r3, r2
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fb6f 	bl	8008f88 <st_dword>
			fs->wflag = 1;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	70da      	strb	r2, [r3, #3]
			break;
 80098b0:	e006      	b.n	80098c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80098b2:	bf00      	nop
 80098b4:	e004      	b.n	80098c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80098b6:	bf00      	nop
 80098b8:	e002      	b.n	80098c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80098ba:	bf00      	nop
 80098bc:	e000      	b.n	80098c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80098be:	bf00      	nop
		}
	}
	return res;
 80098c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3724      	adds	r7, #36	; 0x24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd90      	pop	{r4, r7, pc}

080098ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b088      	sub	sp, #32
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d904      	bls.n	80098f0 <remove_chain+0x26>
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d301      	bcc.n	80098f4 <remove_chain+0x2a>
 80098f0:	2302      	movs	r3, #2
 80098f2:	e04b      	b.n	800998c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00c      	beq.n	8009914 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80098fa:	f04f 32ff 	mov.w	r2, #4294967295
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	69b8      	ldr	r0, [r7, #24]
 8009902:	f7ff fefb 	bl	80096fc <put_fat>
 8009906:	4603      	mov	r3, r0
 8009908:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800990a:	7ffb      	ldrb	r3, [r7, #31]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <remove_chain+0x4a>
 8009910:	7ffb      	ldrb	r3, [r7, #31]
 8009912:	e03b      	b.n	800998c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009914:	68b9      	ldr	r1, [r7, #8]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7ff fe4b 	bl	80095b2 <get_fat>
 800991c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d031      	beq.n	8009988 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d101      	bne.n	800992e <remove_chain+0x64>
 800992a:	2302      	movs	r3, #2
 800992c:	e02e      	b.n	800998c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009934:	d101      	bne.n	800993a <remove_chain+0x70>
 8009936:	2301      	movs	r3, #1
 8009938:	e028      	b.n	800998c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800993a:	2200      	movs	r2, #0
 800993c:	68b9      	ldr	r1, [r7, #8]
 800993e:	69b8      	ldr	r0, [r7, #24]
 8009940:	f7ff fedc 	bl	80096fc <put_fat>
 8009944:	4603      	mov	r3, r0
 8009946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009948:	7ffb      	ldrb	r3, [r7, #31]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <remove_chain+0x88>
 800994e:	7ffb      	ldrb	r3, [r7, #31]
 8009950:	e01c      	b.n	800998c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	691a      	ldr	r2, [r3, #16]
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	3b02      	subs	r3, #2
 800995c:	429a      	cmp	r2, r3
 800995e:	d20b      	bcs.n	8009978 <remove_chain+0xae>
			fs->free_clst++;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	791b      	ldrb	r3, [r3, #4]
 800996e:	f043 0301 	orr.w	r3, r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	d3c6      	bcc.n	8009914 <remove_chain+0x4a>
 8009986:	e000      	b.n	800998a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009988:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10d      	bne.n	80099c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <create_chain+0x2c>
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d31b      	bcc.n	80099f8 <create_chain+0x64>
 80099c0:	2301      	movs	r3, #1
 80099c2:	61bb      	str	r3, [r7, #24]
 80099c4:	e018      	b.n	80099f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff fdf2 	bl	80095b2 <get_fat>
 80099ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d801      	bhi.n	80099da <create_chain+0x46>
 80099d6:	2301      	movs	r3, #1
 80099d8:	e070      	b.n	8009abc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e0:	d101      	bne.n	80099e6 <create_chain+0x52>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	e06a      	b.n	8009abc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d201      	bcs.n	80099f4 <create_chain+0x60>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	e063      	b.n	8009abc <create_chain+0x128>
		scl = clst;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	3301      	adds	r3, #1
 8009a00:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	69fa      	ldr	r2, [r7, #28]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d307      	bcc.n	8009a1c <create_chain+0x88>
				ncl = 2;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d901      	bls.n	8009a1c <create_chain+0x88>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e04f      	b.n	8009abc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009a1c:	69f9      	ldr	r1, [r7, #28]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fdc7 	bl	80095b2 <get_fat>
 8009a24:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00e      	beq.n	8009a4a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d003      	beq.n	8009a3a <create_chain+0xa6>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d101      	bne.n	8009a3e <create_chain+0xaa>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	e03e      	b.n	8009abc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009a3e:	69fa      	ldr	r2, [r7, #28]
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d1da      	bne.n	80099fc <create_chain+0x68>
 8009a46:	2300      	movs	r3, #0
 8009a48:	e038      	b.n	8009abc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009a4a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a50:	69f9      	ldr	r1, [r7, #28]
 8009a52:	6938      	ldr	r0, [r7, #16]
 8009a54:	f7ff fe52 	bl	80096fc <put_fat>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d109      	bne.n	8009a76 <create_chain+0xe2>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d006      	beq.n	8009a76 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6938      	ldr	r0, [r7, #16]
 8009a6e:	f7ff fe45 	bl	80096fc <put_fat>
 8009a72:	4603      	mov	r3, r0
 8009a74:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d116      	bne.n	8009aaa <create_chain+0x116>
		fs->last_clst = ncl;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	3b02      	subs	r3, #2
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d804      	bhi.n	8009a9a <create_chain+0x106>
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	1e5a      	subs	r2, r3, #1
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	791b      	ldrb	r3, [r3, #4]
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	711a      	strb	r2, [r3, #4]
 8009aa8:	e007      	b.n	8009aba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d102      	bne.n	8009ab6 <create_chain+0x122>
 8009ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab4:	e000      	b.n	8009ab8 <create_chain+0x124>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009aba:	69fb      	ldr	r3, [r7, #28]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3720      	adds	r7, #32
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b087      	sub	sp, #28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	3304      	adds	r3, #4
 8009ada:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	0a5b      	lsrs	r3, r3, #9
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	8952      	ldrh	r2, [r2, #10]
 8009ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	613a      	str	r2, [r7, #16]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <clmt_clust+0x3a>
 8009afa:	2300      	movs	r3, #0
 8009afc:	e010      	b.n	8009b20 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d307      	bcc.n	8009b16 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	3304      	adds	r3, #4
 8009b12:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b14:	e7e9      	b.n	8009aea <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009b16:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	4413      	add	r3, r2
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b42:	d204      	bcs.n	8009b4e <dir_sdi+0x22>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	f003 031f 	and.w	r3, r3, #31
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e063      	b.n	8009c1a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d106      	bne.n	8009b72 <dir_sdi+0x46>
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d902      	bls.n	8009b72 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10c      	bne.n	8009b92 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	8912      	ldrh	r2, [r2, #8]
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d301      	bcc.n	8009b88 <dir_sdi+0x5c>
 8009b84:	2302      	movs	r3, #2
 8009b86:	e048      	b.n	8009c1a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	61da      	str	r2, [r3, #28]
 8009b90:	e029      	b.n	8009be6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	895b      	ldrh	r3, [r3, #10]
 8009b96:	025b      	lsls	r3, r3, #9
 8009b98:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b9a:	e019      	b.n	8009bd0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6979      	ldr	r1, [r7, #20]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fd06 	bl	80095b2 <get_fat>
 8009ba6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d101      	bne.n	8009bb4 <dir_sdi+0x88>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e032      	b.n	8009c1a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d904      	bls.n	8009bc4 <dir_sdi+0x98>
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d301      	bcc.n	8009bc8 <dir_sdi+0x9c>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e028      	b.n	8009c1a <dir_sdi+0xee>
			ofs -= csz;
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d2e1      	bcs.n	8009b9c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009bd8:	6979      	ldr	r1, [r7, #20]
 8009bda:	6938      	ldr	r0, [r7, #16]
 8009bdc:	f7ff fcca 	bl	8009574 <clust2sect>
 8009be0:	4602      	mov	r2, r0
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <dir_sdi+0xcc>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e010      	b.n	8009c1a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	69da      	ldr	r2, [r3, #28]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	0a5b      	lsrs	r3, r3, #9
 8009c00:	441a      	add	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	441a      	add	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b086      	sub	sp, #24
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	3320      	adds	r3, #32
 8009c38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <dir_next+0x28>
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c48:	d301      	bcc.n	8009c4e <dir_next+0x2c>
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	e0aa      	b.n	8009da4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 8098 	bne.w	8009d8a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10b      	bne.n	8009c84 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	095b      	lsrs	r3, r3, #5
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	8912      	ldrh	r2, [r2, #8]
 8009c74:	4293      	cmp	r3, r2
 8009c76:	f0c0 8088 	bcc.w	8009d8a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	61da      	str	r2, [r3, #28]
 8009c80:	2304      	movs	r3, #4
 8009c82:	e08f      	b.n	8009da4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	0a5b      	lsrs	r3, r3, #9
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	8952      	ldrh	r2, [r2, #10]
 8009c8c:	3a01      	subs	r2, #1
 8009c8e:	4013      	ands	r3, r2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d17a      	bne.n	8009d8a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f7ff fc88 	bl	80095b2 <get_fat>
 8009ca2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d801      	bhi.n	8009cae <dir_next+0x8c>
 8009caa:	2302      	movs	r3, #2
 8009cac:	e07a      	b.n	8009da4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb4:	d101      	bne.n	8009cba <dir_next+0x98>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e074      	b.n	8009da4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d358      	bcc.n	8009d76 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	61da      	str	r2, [r3, #28]
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	e067      	b.n	8009da4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7ff fe59 	bl	8009994 <create_chain>
 8009ce2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <dir_next+0xcc>
 8009cea:	2307      	movs	r3, #7
 8009cec:	e05a      	b.n	8009da4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <dir_next+0xd6>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e055      	b.n	8009da4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfe:	d101      	bne.n	8009d04 <dir_next+0xe2>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e04f      	b.n	8009da4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7ff fb55 	bl	80093b4 <sync_window>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <dir_next+0xf2>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e047      	b.n	8009da4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3330      	adds	r3, #48	; 0x30
 8009d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff f97f 	bl	8009022 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d24:	2300      	movs	r3, #0
 8009d26:	613b      	str	r3, [r7, #16]
 8009d28:	6979      	ldr	r1, [r7, #20]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f7ff fc22 	bl	8009574 <clust2sect>
 8009d30:	4602      	mov	r2, r0
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d36:	e012      	b.n	8009d5e <dir_next+0x13c>
						fs->wflag = 1;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fb38 	bl	80093b4 <sync_window>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <dir_next+0x12c>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e02a      	b.n	8009da4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	3301      	adds	r3, #1
 8009d52:	613b      	str	r3, [r7, #16]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	895b      	ldrh	r3, [r3, #10]
 8009d62:	461a      	mov	r2, r3
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d3e6      	bcc.n	8009d38 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	1ad2      	subs	r2, r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009d7c:	6979      	ldr	r1, [r7, #20]
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f7ff fbf8 	bl	8009574 <clust2sect>
 8009d84:	4602      	mov	r2, r0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	441a      	add	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff feb4 	bl	8009b2c <dir_sdi>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d12b      	bne.n	8009e26 <dir_alloc+0x7a>
		n = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff fb2f 	bl	800943c <move_window>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d11d      	bne.n	8009e24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2be5      	cmp	r3, #229	; 0xe5
 8009df0:	d004      	beq.n	8009dfc <dir_alloc+0x50>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d107      	bne.n	8009e0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	613b      	str	r3, [r7, #16]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d102      	bne.n	8009e10 <dir_alloc+0x64>
 8009e0a:	e00c      	b.n	8009e26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009e10:	2101      	movs	r1, #1
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff ff05 	bl	8009c22 <dir_next>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0d7      	beq.n	8009dd2 <dir_alloc+0x26>
 8009e22:	e000      	b.n	8009e26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009e24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	d101      	bne.n	8009e30 <dir_alloc+0x84>
 8009e2c:	2307      	movs	r3, #7
 8009e2e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	331a      	adds	r3, #26
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff f847 	bl	8008edc <ld_word>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d109      	bne.n	8009e6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	3314      	adds	r3, #20
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff f83c 	bl	8008edc <ld_word>
 8009e64:	4603      	mov	r3, r0
 8009e66:	041b      	lsls	r3, r3, #16
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	331a      	adds	r3, #26
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff f85f 	bl	8008f52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d109      	bne.n	8009eb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f103 0214 	add.w	r2, r3, #20
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	0c1b      	lsrs	r3, r3, #16
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7ff f851 	bl	8008f52 <st_word>
	}
}
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff fe2f 	bl	8009b2c <dir_sdi>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <dir_find+0x24>
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	e03e      	b.n	8009f5a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6938      	ldr	r0, [r7, #16]
 8009ee4:	f7ff faaa 	bl	800943c <move_window>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d12f      	bne.n	8009f52 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <dir_find+0x4e>
 8009f00:	2304      	movs	r3, #4
 8009f02:	75fb      	strb	r3, [r7, #23]
 8009f04:	e028      	b.n	8009f58 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	330b      	adds	r3, #11
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	330b      	adds	r3, #11
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 0308 	and.w	r3, r3, #8
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <dir_find+0x86>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a18      	ldr	r0, [r3, #32]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3324      	adds	r3, #36	; 0x24
 8009f30:	220b      	movs	r2, #11
 8009f32:	4619      	mov	r1, r3
 8009f34:	f7ff f88f 	bl	8009056 <mem_cmp>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00b      	beq.n	8009f56 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009f3e:	2100      	movs	r1, #0
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff fe6e 	bl	8009c22 <dir_next>
 8009f46:	4603      	mov	r3, r0
 8009f48:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0c5      	beq.n	8009edc <dir_find+0x24>
 8009f50:	e002      	b.n	8009f58 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009f52:	bf00      	nop
 8009f54:	e000      	b.n	8009f58 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f56:	bf00      	nop

	return res;
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3718      	adds	r7, #24
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009f70:	2101      	movs	r1, #1
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff ff1a 	bl	8009dac <dir_alloc>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d11c      	bne.n	8009fbc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	4619      	mov	r1, r3
 8009f88:	68b8      	ldr	r0, [r7, #8]
 8009f8a:	f7ff fa57 	bl	800943c <move_window>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d111      	bne.n	8009fbc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff f83e 	bl	8009022 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a18      	ldr	r0, [r3, #32]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3324      	adds	r3, #36	; 0x24
 8009fae:	220b      	movs	r2, #11
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	f7ff f815 	bl	8008fe0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b086      	sub	sp, #24
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d04e      	beq.n	800a07c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009fe6:	e021      	b.n	800a02c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a1a      	ldr	r2, [r3, #32]
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	6179      	str	r1, [r7, #20]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	d100      	bne.n	800a000 <get_fileinfo+0x3a>
 8009ffe:	e015      	b.n	800a02c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	2b05      	cmp	r3, #5
 800a004:	d101      	bne.n	800a00a <get_fileinfo+0x44>
 800a006:	23e5      	movs	r3, #229	; 0xe5
 800a008:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2b09      	cmp	r3, #9
 800a00e:	d106      	bne.n	800a01e <get_fileinfo+0x58>
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	613a      	str	r2, [r7, #16]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	4413      	add	r3, r2
 800a01a:	222e      	movs	r2, #46	; 0x2e
 800a01c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	613a      	str	r2, [r7, #16]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	4413      	add	r3, r2
 800a028:	7bfa      	ldrb	r2, [r7, #15]
 800a02a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b0a      	cmp	r3, #10
 800a030:	d9da      	bls.n	8009fe8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	3309      	adds	r3, #9
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	7ada      	ldrb	r2, [r3, #11]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	331c      	adds	r3, #28
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe ff5c 	bl	8008f0c <ld_dword>
 800a054:	4602      	mov	r2, r0
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	3316      	adds	r3, #22
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe ff53 	bl	8008f0c <ld_dword>
 800a066:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	80da      	strh	r2, [r3, #6]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	0c1b      	lsrs	r3, r3, #16
 800a074:	b29a      	uxth	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	809a      	strh	r2, [r3, #4]
 800a07a:	e000      	b.n	800a07e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a07c:	bf00      	nop
}
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3324      	adds	r3, #36	; 0x24
 800a098:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a09a:	220b      	movs	r2, #11
 800a09c:	2120      	movs	r1, #32
 800a09e:	68b8      	ldr	r0, [r7, #8]
 800a0a0:	f7fe ffbf 	bl	8009022 <mem_set>
	si = i = 0; ni = 8;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	613b      	str	r3, [r7, #16]
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	2308      	movs	r3, #8
 800a0ae:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	617a      	str	r2, [r7, #20]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0be:	7ffb      	ldrb	r3, [r7, #31]
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	d94e      	bls.n	800a162 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a0c4:	7ffb      	ldrb	r3, [r7, #31]
 800a0c6:	2b2f      	cmp	r3, #47	; 0x2f
 800a0c8:	d006      	beq.n	800a0d8 <create_name+0x54>
 800a0ca:	7ffb      	ldrb	r3, [r7, #31]
 800a0cc:	2b5c      	cmp	r3, #92	; 0x5c
 800a0ce:	d110      	bne.n	800a0f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a0d0:	e002      	b.n	800a0d8 <create_name+0x54>
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	4413      	add	r3, r2
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b2f      	cmp	r3, #47	; 0x2f
 800a0e2:	d0f6      	beq.n	800a0d2 <create_name+0x4e>
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b5c      	cmp	r3, #92	; 0x5c
 800a0ee:	d0f0      	beq.n	800a0d2 <create_name+0x4e>
			break;
 800a0f0:	e038      	b.n	800a164 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a0f2:	7ffb      	ldrb	r3, [r7, #31]
 800a0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f6:	d003      	beq.n	800a100 <create_name+0x7c>
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d30c      	bcc.n	800a11a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	2b0b      	cmp	r3, #11
 800a104:	d002      	beq.n	800a10c <create_name+0x88>
 800a106:	7ffb      	ldrb	r3, [r7, #31]
 800a108:	2b2e      	cmp	r3, #46	; 0x2e
 800a10a:	d001      	beq.n	800a110 <create_name+0x8c>
 800a10c:	2306      	movs	r3, #6
 800a10e:	e044      	b.n	800a19a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a110:	2308      	movs	r3, #8
 800a112:	613b      	str	r3, [r7, #16]
 800a114:	230b      	movs	r3, #11
 800a116:	61bb      	str	r3, [r7, #24]
			continue;
 800a118:	e022      	b.n	800a160 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a11a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	da04      	bge.n	800a12c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a122:	7ffb      	ldrb	r3, [r7, #31]
 800a124:	3b80      	subs	r3, #128	; 0x80
 800a126:	4a1f      	ldr	r2, [pc, #124]	; (800a1a4 <create_name+0x120>)
 800a128:	5cd3      	ldrb	r3, [r2, r3]
 800a12a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a12c:	7ffb      	ldrb	r3, [r7, #31]
 800a12e:	4619      	mov	r1, r3
 800a130:	481d      	ldr	r0, [pc, #116]	; (800a1a8 <create_name+0x124>)
 800a132:	f7fe ffb7 	bl	80090a4 <chk_chr>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <create_name+0xbc>
 800a13c:	2306      	movs	r3, #6
 800a13e:	e02c      	b.n	800a19a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a140:	7ffb      	ldrb	r3, [r7, #31]
 800a142:	2b60      	cmp	r3, #96	; 0x60
 800a144:	d905      	bls.n	800a152 <create_name+0xce>
 800a146:	7ffb      	ldrb	r3, [r7, #31]
 800a148:	2b7a      	cmp	r3, #122	; 0x7a
 800a14a:	d802      	bhi.n	800a152 <create_name+0xce>
 800a14c:	7ffb      	ldrb	r3, [r7, #31]
 800a14e:	3b20      	subs	r3, #32
 800a150:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	613a      	str	r2, [r7, #16]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	4413      	add	r3, r2
 800a15c:	7ffa      	ldrb	r2, [r7, #31]
 800a15e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a160:	e7a6      	b.n	800a0b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a162:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	441a      	add	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <create_name+0xf4>
 800a174:	2306      	movs	r3, #6
 800a176:	e010      	b.n	800a19a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2be5      	cmp	r3, #229	; 0xe5
 800a17e:	d102      	bne.n	800a186 <create_name+0x102>
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	2205      	movs	r2, #5
 800a184:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a186:	7ffb      	ldrb	r3, [r7, #31]
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d801      	bhi.n	800a190 <create_name+0x10c>
 800a18c:	2204      	movs	r2, #4
 800a18e:	e000      	b.n	800a192 <create_name+0x10e>
 800a190:	2200      	movs	r2, #0
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	330b      	adds	r3, #11
 800a196:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a198:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800c9c8 	.word	0x0800c9c8
 800a1a8:	0800c958 	.word	0x0800c958

0800a1ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a1c0:	e002      	b.n	800a1c8 <follow_path+0x1c>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b2f      	cmp	r3, #47	; 0x2f
 800a1ce:	d0f8      	beq.n	800a1c2 <follow_path+0x16>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b5c      	cmp	r3, #92	; 0x5c
 800a1d6:	d0f4      	beq.n	800a1c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	2b1f      	cmp	r3, #31
 800a1e4:	d80a      	bhi.n	800a1fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2280      	movs	r2, #128	; 0x80
 800a1ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff fc9b 	bl	8009b2c <dir_sdi>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	75fb      	strb	r3, [r7, #23]
 800a1fa:	e043      	b.n	800a284 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1fc:	463b      	mov	r3, r7
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff ff3f 	bl	800a084 <create_name>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d134      	bne.n	800a27a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff fe51 	bl	8009eb8 <dir_find>
 800a216:	4603      	mov	r3, r0
 800a218:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a220:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d127      	bne.n	800a27e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a22e:	7afb      	ldrb	r3, [r7, #11]
 800a230:	f003 0304 	and.w	r3, r3, #4
 800a234:	2b00      	cmp	r3, #0
 800a236:	d122      	bne.n	800a27e <follow_path+0xd2>
 800a238:	2305      	movs	r3, #5
 800a23a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a23c:	e01f      	b.n	800a27e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d11c      	bne.n	800a282 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	799b      	ldrb	r3, [r3, #6]
 800a24c:	f003 0310 	and.w	r3, r3, #16
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a254:	2305      	movs	r3, #5
 800a256:	75fb      	strb	r3, [r7, #23]
 800a258:	e014      	b.n	800a284 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a268:	4413      	add	r3, r2
 800a26a:	4619      	mov	r1, r3
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f7ff fde4 	bl	8009e3a <ld_clust>
 800a272:	4602      	mov	r2, r0
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a278:	e7c0      	b.n	800a1fc <follow_path+0x50>
			if (res != FR_OK) break;
 800a27a:	bf00      	nop
 800a27c:	e002      	b.n	800a284 <follow_path+0xd8>
				break;
 800a27e:	bf00      	nop
 800a280:	e000      	b.n	800a284 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a282:	bf00      	nop
			}
		}
	}

	return res;
 800a284:	7dfb      	ldrb	r3, [r7, #23]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a28e:	b480      	push	{r7}
 800a290:	b087      	sub	sp, #28
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a296:	f04f 33ff 	mov.w	r3, #4294967295
 800a29a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d031      	beq.n	800a308 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	617b      	str	r3, [r7, #20]
 800a2aa:	e002      	b.n	800a2b2 <get_ldnumber+0x24>
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	617b      	str	r3, [r7, #20]
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d903      	bls.n	800a2c2 <get_ldnumber+0x34>
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b3a      	cmp	r3, #58	; 0x3a
 800a2c0:	d1f4      	bne.n	800a2ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b3a      	cmp	r3, #58	; 0x3a
 800a2c8:	d11c      	bne.n	800a304 <get_ldnumber+0x76>
			tp = *path;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	60fa      	str	r2, [r7, #12]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	3b30      	subs	r3, #48	; 0x30
 800a2da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	2b09      	cmp	r3, #9
 800a2e0:	d80e      	bhi.n	800a300 <get_ldnumber+0x72>
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d10a      	bne.n	800a300 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <get_ldnumber+0x72>
					vol = (int)i;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	e002      	b.n	800a30a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a304:	2300      	movs	r3, #0
 800a306:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a308:	693b      	ldr	r3, [r7, #16]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	70da      	strb	r2, [r3, #3]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f04f 32ff 	mov.w	r2, #4294967295
 800a32e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff f882 	bl	800943c <move_window>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <check_fs+0x2a>
 800a33e:	2304      	movs	r3, #4
 800a340:	e038      	b.n	800a3b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3330      	adds	r3, #48	; 0x30
 800a346:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe fdc6 	bl	8008edc <ld_word>
 800a350:	4603      	mov	r3, r0
 800a352:	461a      	mov	r2, r3
 800a354:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a358:	429a      	cmp	r2, r3
 800a35a:	d001      	beq.n	800a360 <check_fs+0x48>
 800a35c:	2303      	movs	r3, #3
 800a35e:	e029      	b.n	800a3b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a366:	2be9      	cmp	r3, #233	; 0xe9
 800a368:	d009      	beq.n	800a37e <check_fs+0x66>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a370:	2beb      	cmp	r3, #235	; 0xeb
 800a372:	d11e      	bne.n	800a3b2 <check_fs+0x9a>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a37a:	2b90      	cmp	r3, #144	; 0x90
 800a37c:	d119      	bne.n	800a3b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3330      	adds	r3, #48	; 0x30
 800a382:	3336      	adds	r3, #54	; 0x36
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fdc1 	bl	8008f0c <ld_dword>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a390:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <check_fs+0xa4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d101      	bne.n	800a39a <check_fs+0x82>
 800a396:	2300      	movs	r3, #0
 800a398:	e00c      	b.n	800a3b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3330      	adds	r3, #48	; 0x30
 800a39e:	3352      	adds	r3, #82	; 0x52
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fe fdb3 	bl	8008f0c <ld_dword>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <check_fs+0xa8>)
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d101      	bne.n	800a3b2 <check_fs+0x9a>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e000      	b.n	800a3b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a3b2:	2302      	movs	r3, #2
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	00544146 	.word	0x00544146
 800a3c0:	33544146 	.word	0x33544146

0800a3c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b096      	sub	sp, #88	; 0x58
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f7ff ff58 	bl	800a28e <get_ldnumber>
 800a3de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da01      	bge.n	800a3ea <find_volume+0x26>
 800a3e6:	230b      	movs	r3, #11
 800a3e8:	e22e      	b.n	800a848 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a3ea:	4aa8      	ldr	r2, [pc, #672]	; (800a68c <find_volume+0x2c8>)
 800a3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <find_volume+0x3a>
 800a3fa:	230c      	movs	r3, #12
 800a3fc:	e224      	b.n	800a848 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a402:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	f023 0301 	bic.w	r3, r3, #1
 800a40a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01a      	beq.n	800a44a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	785b      	ldrb	r3, [r3, #1]
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fe fcc1 	bl	8008da0 <disk_status>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10c      	bne.n	800a44a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d007      	beq.n	800a446 <find_volume+0x82>
 800a436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a43a:	f003 0304 	and.w	r3, r3, #4
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a442:	230a      	movs	r3, #10
 800a444:	e200      	b.n	800a848 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a446:	2300      	movs	r3, #0
 800a448:	e1fe      	b.n	800a848 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2200      	movs	r2, #0
 800a44e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a452:	b2da      	uxtb	r2, r3
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	785b      	ldrb	r3, [r3, #1]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fcb9 	bl	8008dd4 <disk_initialize>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a474:	2303      	movs	r3, #3
 800a476:	e1e7      	b.n	800a848 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d007      	beq.n	800a48e <find_volume+0xca>
 800a47e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a48a:	230a      	movs	r3, #10
 800a48c:	e1dc      	b.n	800a848 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a492:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a496:	f7ff ff3f 	bl	800a318 <check_fs>
 800a49a:	4603      	mov	r3, r0
 800a49c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d14b      	bne.n	800a540 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ac:	e01f      	b.n	800a4ee <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a4bc:	4413      	add	r3, r2
 800a4be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d006      	beq.n	800a4d8 <find_volume+0x114>
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fd1c 	bl	8008f0c <ld_dword>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	e000      	b.n	800a4da <find_volume+0x116>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a4e2:	440b      	add	r3, r1
 800a4e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d9dc      	bls.n	800a4ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <find_volume+0x140>
 800a4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a500:	3b01      	subs	r3, #1
 800a502:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a50c:	4413      	add	r3, r2
 800a50e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a512:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <find_volume+0x162>
 800a51a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a51c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a51e:	f7ff fefb 	bl	800a318 <check_fs>
 800a522:	4603      	mov	r3, r0
 800a524:	e000      	b.n	800a528 <find_volume+0x164>
 800a526:	2303      	movs	r3, #3
 800a528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a52c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a530:	2b01      	cmp	r3, #1
 800a532:	d905      	bls.n	800a540 <find_volume+0x17c>
 800a534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a536:	3301      	adds	r3, #1
 800a538:	643b      	str	r3, [r7, #64]	; 0x40
 800a53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d9e1      	bls.n	800a504 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a544:	2b04      	cmp	r3, #4
 800a546:	d101      	bne.n	800a54c <find_volume+0x188>
 800a548:	2301      	movs	r3, #1
 800a54a:	e17d      	b.n	800a848 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a54c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a550:	2b01      	cmp	r3, #1
 800a552:	d901      	bls.n	800a558 <find_volume+0x194>
 800a554:	230d      	movs	r3, #13
 800a556:	e177      	b.n	800a848 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	3330      	adds	r3, #48	; 0x30
 800a55c:	330b      	adds	r3, #11
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fcbc 	bl	8008edc <ld_word>
 800a564:	4603      	mov	r3, r0
 800a566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a56a:	d001      	beq.n	800a570 <find_volume+0x1ac>
 800a56c:	230d      	movs	r3, #13
 800a56e:	e16b      	b.n	800a848 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	3330      	adds	r3, #48	; 0x30
 800a574:	3316      	adds	r3, #22
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fcb0 	bl	8008edc <ld_word>
 800a57c:	4603      	mov	r3, r0
 800a57e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <find_volume+0x1d0>
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	3330      	adds	r3, #48	; 0x30
 800a58a:	3324      	adds	r3, #36	; 0x24
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fcbd 	bl	8008f0c <ld_dword>
 800a592:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a598:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	789b      	ldrb	r3, [r3, #2]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d005      	beq.n	800a5b8 <find_volume+0x1f4>
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	789b      	ldrb	r3, [r3, #2]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d001      	beq.n	800a5b8 <find_volume+0x1f4>
 800a5b4:	230d      	movs	r3, #13
 800a5b6:	e147      	b.n	800a848 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	789b      	ldrb	r3, [r3, #2]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
 800a5c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d4:	895b      	ldrh	r3, [r3, #10]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d008      	beq.n	800a5ec <find_volume+0x228>
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	895b      	ldrh	r3, [r3, #10]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	895b      	ldrh	r3, [r3, #10]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <find_volume+0x22c>
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	e12b      	b.n	800a848 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	3330      	adds	r3, #48	; 0x30
 800a5f4:	3311      	adds	r3, #17
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fc70 	bl	8008edc <ld_word>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	461a      	mov	r2, r3
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	891b      	ldrh	r3, [r3, #8]
 800a608:	f003 030f 	and.w	r3, r3, #15
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <find_volume+0x252>
 800a612:	230d      	movs	r3, #13
 800a614:	e118      	b.n	800a848 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a618:	3330      	adds	r3, #48	; 0x30
 800a61a:	3313      	adds	r3, #19
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe fc5d 	bl	8008edc <ld_word>
 800a622:	4603      	mov	r3, r0
 800a624:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <find_volume+0x276>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	3330      	adds	r3, #48	; 0x30
 800a630:	3320      	adds	r3, #32
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fc6a 	bl	8008f0c <ld_dword>
 800a638:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	3330      	adds	r3, #48	; 0x30
 800a63e:	330e      	adds	r3, #14
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fc4b 	bl	8008edc <ld_word>
 800a646:	4603      	mov	r3, r0
 800a648:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a64a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <find_volume+0x290>
 800a650:	230d      	movs	r3, #13
 800a652:	e0f9      	b.n	800a848 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a654:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a658:	4413      	add	r3, r2
 800a65a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a65c:	8912      	ldrh	r2, [r2, #8]
 800a65e:	0912      	lsrs	r2, r2, #4
 800a660:	b292      	uxth	r2, r2
 800a662:	4413      	add	r3, r2
 800a664:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d201      	bcs.n	800a672 <find_volume+0x2ae>
 800a66e:	230d      	movs	r3, #13
 800a670:	e0ea      	b.n	800a848 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a67a:	8952      	ldrh	r2, [r2, #10]
 800a67c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <find_volume+0x2cc>
 800a688:	230d      	movs	r3, #13
 800a68a:	e0dd      	b.n	800a848 <find_volume+0x484>
 800a68c:	200100b4 	.word	0x200100b4
		fmt = FS_FAT32;
 800a690:	2303      	movs	r3, #3
 800a692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d802      	bhi.n	800a6a6 <find_volume+0x2e2>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d802      	bhi.n	800a6b6 <find_volume+0x2f2>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	1c9a      	adds	r2, r3, #2
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6c2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a6c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6c8:	441a      	add	r2, r3
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a6ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	441a      	add	r2, r3
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a6d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d11e      	bne.n	800a71e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	3330      	adds	r3, #48	; 0x30
 800a6e4:	332a      	adds	r3, #42	; 0x2a
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fbf8 	bl	8008edc <ld_word>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <find_volume+0x332>
 800a6f2:	230d      	movs	r3, #13
 800a6f4:	e0a8      	b.n	800a848 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	891b      	ldrh	r3, [r3, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <find_volume+0x33e>
 800a6fe:	230d      	movs	r3, #13
 800a700:	e0a2      	b.n	800a848 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	3330      	adds	r3, #48	; 0x30
 800a706:	332c      	adds	r3, #44	; 0x2c
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe fbff 	bl	8008f0c <ld_dword>
 800a70e:	4602      	mov	r2, r0
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	647b      	str	r3, [r7, #68]	; 0x44
 800a71c:	e01f      	b.n	800a75e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a720:	891b      	ldrh	r3, [r3, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <find_volume+0x366>
 800a726:	230d      	movs	r3, #13
 800a728:	e08e      	b.n	800a848 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	6a1a      	ldr	r2, [r3, #32]
 800a72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a730:	441a      	add	r2, r3
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a736:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d103      	bne.n	800a746 <find_volume+0x382>
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	e00a      	b.n	800a75c <find_volume+0x398>
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	695a      	ldr	r2, [r3, #20]
 800a74a:	4613      	mov	r3, r2
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	4413      	add	r3, r2
 800a750:	085a      	lsrs	r2, r3, #1
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a75c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	699a      	ldr	r2, [r3, #24]
 800a762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a764:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a768:	0a5b      	lsrs	r3, r3, #9
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d201      	bcs.n	800a772 <find_volume+0x3ae>
 800a76e:	230d      	movs	r3, #13
 800a770:	e06a      	b.n	800a848 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	f04f 32ff 	mov.w	r2, #4294967295
 800a778:	611a      	str	r2, [r3, #16]
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	691a      	ldr	r2, [r3, #16]
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a784:	2280      	movs	r2, #128	; 0x80
 800a786:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d149      	bne.n	800a824 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	3330      	adds	r3, #48	; 0x30
 800a794:	3330      	adds	r3, #48	; 0x30
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fba0 	bl	8008edc <ld_word>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d140      	bne.n	800a824 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7aa:	f7fe fe47 	bl	800943c <move_window>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d137      	bne.n	800a824 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	3330      	adds	r3, #48	; 0x30
 800a7be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fb8a 	bl	8008edc <ld_word>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d127      	bne.n	800a824 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	3330      	adds	r3, #48	; 0x30
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fb97 	bl	8008f0c <ld_dword>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <find_volume+0x48c>)
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d11e      	bne.n	800a824 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	3330      	adds	r3, #48	; 0x30
 800a7ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe fb8c 	bl	8008f0c <ld_dword>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	4b17      	ldr	r3, [pc, #92]	; (800a854 <find_volume+0x490>)
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d113      	bne.n	800a824 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	3330      	adds	r3, #48	; 0x30
 800a800:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fb81 	bl	8008f0c <ld_dword>
 800a80a:	4602      	mov	r2, r0
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	3330      	adds	r3, #48	; 0x30
 800a814:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe fb77 	bl	8008f0c <ld_dword>
 800a81e:	4602      	mov	r2, r0
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a82a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a82c:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <find_volume+0x494>)
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	b29a      	uxth	r2, r3
 800a834:	4b08      	ldr	r3, [pc, #32]	; (800a858 <find_volume+0x494>)
 800a836:	801a      	strh	r2, [r3, #0]
 800a838:	4b07      	ldr	r3, [pc, #28]	; (800a858 <find_volume+0x494>)
 800a83a:	881a      	ldrh	r2, [r3, #0]
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a842:	f7fe fd93 	bl	800936c <clear_lock>
#endif
	return FR_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3758      	adds	r7, #88	; 0x58
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	41615252 	.word	0x41615252
 800a854:	61417272 	.word	0x61417272
 800a858:	200100b8 	.word	0x200100b8

0800a85c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a866:	2309      	movs	r3, #9
 800a868:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d01c      	beq.n	800a8aa <validate+0x4e>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d018      	beq.n	800a8aa <validate+0x4e>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d013      	beq.n	800a8aa <validate+0x4e>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	889a      	ldrh	r2, [r3, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	88db      	ldrh	r3, [r3, #6]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d10c      	bne.n	800a8aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	785b      	ldrb	r3, [r3, #1]
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe fa82 	bl	8008da0 <disk_status>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f003 0301 	and.w	r3, r3, #1
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <validate+0x4e>
			res = FR_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d102      	bne.n	800a8b6 <validate+0x5a>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	e000      	b.n	800a8b8 <validate+0x5c>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	6013      	str	r3, [r2, #0]
	return res;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a8da:	f107 0310 	add.w	r3, r7, #16
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff fcd5 	bl	800a28e <get_ldnumber>
 800a8e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da01      	bge.n	800a8f0 <f_mount+0x28>
 800a8ec:	230b      	movs	r3, #11
 800a8ee:	e02b      	b.n	800a948 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a8f0:	4a17      	ldr	r2, [pc, #92]	; (800a950 <f_mount+0x88>)
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a900:	69b8      	ldr	r0, [r7, #24]
 800a902:	f7fe fd33 	bl	800936c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2200      	movs	r2, #0
 800a90a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	490d      	ldr	r1, [pc, #52]	; (800a950 <f_mount+0x88>)
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <f_mount+0x66>
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d001      	beq.n	800a932 <f_mount+0x6a>
 800a92e:	2300      	movs	r3, #0
 800a930:	e00a      	b.n	800a948 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a932:	f107 010c 	add.w	r1, r7, #12
 800a936:	f107 0308 	add.w	r3, r7, #8
 800a93a:	2200      	movs	r2, #0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff fd41 	bl	800a3c4 <find_volume>
 800a942:	4603      	mov	r3, r0
 800a944:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a946:	7dfb      	ldrb	r3, [r7, #23]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	200100b4 	.word	0x200100b4

0800a954 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b098      	sub	sp, #96	; 0x60
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <f_open+0x18>
 800a968:	2309      	movs	r3, #9
 800a96a:	e1ad      	b.n	800acc8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a972:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a974:	79fa      	ldrb	r2, [r7, #7]
 800a976:	f107 0110 	add.w	r1, r7, #16
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fd20 	bl	800a3c4 <find_volume>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a98a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f040 8191 	bne.w	800acb6 <f_open+0x362>
		dj.obj.fs = fs;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	f107 0314 	add.w	r3, r7, #20
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff fc03 	bl	800a1ac <follow_path>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a9ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d11a      	bne.n	800a9ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a9b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9b8:	b25b      	sxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	da03      	bge.n	800a9c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a9be:	2306      	movs	r3, #6
 800a9c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9c4:	e011      	b.n	800a9ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bf14      	ite	ne
 800a9d0:	2301      	movne	r3, #1
 800a9d2:	2300      	moveq	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f107 0314 	add.w	r3, r7, #20
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fb7c 	bl	80090dc <chk_lock>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	f003 031c 	and.w	r3, r3, #28
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d07f      	beq.n	800aaf4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a9f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d017      	beq.n	800aa2c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a9fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d10e      	bne.n	800aa22 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aa04:	f7fe fbc6 	bl	8009194 <enq_lock>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d006      	beq.n	800aa1c <f_open+0xc8>
 800aa0e:	f107 0314 	add.w	r3, r7, #20
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff faa5 	bl	8009f62 <dir_register>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	e000      	b.n	800aa1e <f_open+0xca>
 800aa1c:	2312      	movs	r3, #18
 800aa1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	f043 0308 	orr.w	r3, r3, #8
 800aa28:	71fb      	strb	r3, [r7, #7]
 800aa2a:	e010      	b.n	800aa4e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aa2c:	7ebb      	ldrb	r3, [r7, #26]
 800aa2e:	f003 0311 	and.w	r3, r3, #17
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <f_open+0xea>
					res = FR_DENIED;
 800aa36:	2307      	movs	r3, #7
 800aa38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa3c:	e007      	b.n	800aa4e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <f_open+0xfa>
 800aa48:	2308      	movs	r3, #8
 800aa4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aa4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d168      	bne.n	800ab28 <f_open+0x1d4>
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	f003 0308 	and.w	r3, r3, #8
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d063      	beq.n	800ab28 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aa60:	f7fb f9a6 	bl	8005db0 <get_fattime>
 800aa64:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa68:	330e      	adds	r3, #14
 800aa6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe fa8b 	bl	8008f88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa74:	3316      	adds	r3, #22
 800aa76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe fa85 	bl	8008f88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	330b      	adds	r3, #11
 800aa82:	2220      	movs	r2, #32
 800aa84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff f9d4 	bl	8009e3a <ld_clust>
 800aa92:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff f9ec 	bl	8009e78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa2:	331c      	adds	r3, #28
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fa6e 	bl	8008f88 <st_dword>
					fs->wflag = 1;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2201      	movs	r2, #1
 800aab0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d037      	beq.n	800ab28 <f_open+0x1d4>
						dw = fs->winsect;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800aabe:	f107 0314 	add.w	r3, r7, #20
 800aac2:	2200      	movs	r2, #0
 800aac4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe feff 	bl	80098ca <remove_chain>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800aad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d126      	bne.n	800ab28 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe fcac 	bl	800943c <move_window>
 800aae4:	4603      	mov	r3, r0
 800aae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aaee:	3a01      	subs	r2, #1
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	e019      	b.n	800ab28 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aaf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d115      	bne.n	800ab28 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aafc:	7ebb      	ldrb	r3, [r7, #26]
 800aafe:	f003 0310 	and.w	r3, r3, #16
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d003      	beq.n	800ab0e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ab06:	2304      	movs	r3, #4
 800ab08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab0c:	e00c      	b.n	800ab28 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <f_open+0x1d4>
 800ab18:	7ebb      	ldrb	r3, [r7, #26]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <f_open+0x1d4>
						res = FR_DENIED;
 800ab22:	2307      	movs	r3, #7
 800ab24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ab28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d128      	bne.n	800ab82 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	f003 0308 	and.w	r3, r3, #8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ab4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	f023 0301 	bic.w	r3, r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	bf14      	ite	ne
 800ab5a:	2301      	movne	r3, #1
 800ab5c:	2300      	moveq	r3, #0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	f107 0314 	add.w	r3, r7, #20
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fb35 	bl	80091d8 <inc_lock>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <f_open+0x22e>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ab82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f040 8095 	bne.w	800acb6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab90:	4611      	mov	r1, r2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7ff f951 	bl	8009e3a <ld_clust>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba0:	331c      	adds	r3, #28
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe f9b2 	bl	8008f0c <ld_dword>
 800aba8:	4602      	mov	r2, r0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	88da      	ldrh	r2, [r3, #6]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	79fa      	ldrb	r2, [r7, #7]
 800abc6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3330      	adds	r3, #48	; 0x30
 800abde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abe2:	2100      	movs	r1, #0
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fe fa1c 	bl	8009022 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	f003 0320 	and.w	r3, r3, #32
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d060      	beq.n	800acb6 <f_open+0x362>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d05c      	beq.n	800acb6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	895b      	ldrh	r3, [r3, #10]
 800ac08:	025b      	lsls	r3, r3, #9
 800ac0a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	657b      	str	r3, [r7, #84]	; 0x54
 800ac18:	e016      	b.n	800ac48 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe fcc7 	bl	80095b2 <get_fat>
 800ac24:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ac26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d802      	bhi.n	800ac32 <f_open+0x2de>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d102      	bne.n	800ac40 <f_open+0x2ec>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	657b      	str	r3, [r7, #84]	; 0x54
 800ac48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <f_open+0x304>
 800ac50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d8e0      	bhi.n	800ac1a <f_open+0x2c6>
				}
				fp->clust = clst;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d127      	bne.n	800acb6 <f_open+0x362>
 800ac66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d022      	beq.n	800acb6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fe fc7d 	bl	8009574 <clust2sect>
 800ac7a:	6478      	str	r0, [r7, #68]	; 0x44
 800ac7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <f_open+0x336>
						res = FR_INT_ERR;
 800ac82:	2302      	movs	r3, #2
 800ac84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac88:	e015      	b.n	800acb6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac8c:	0a5a      	lsrs	r2, r3, #9
 800ac8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac90:	441a      	add	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	7858      	ldrb	r0, [r3, #1]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6a1a      	ldr	r2, [r3, #32]
 800aca4:	2301      	movs	r3, #1
 800aca6:	f7fe f8bb 	bl	8008e20 <disk_read>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <f_open+0x362>
 800acb0:	2301      	movs	r3, #1
 800acb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800acb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <f_open+0x370>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800acc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3760      	adds	r7, #96	; 0x60
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08e      	sub	sp, #56	; 0x38
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2200      	movs	r2, #0
 800ace6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f107 0214 	add.w	r2, r7, #20
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff fdb3 	bl	800a85c <validate>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800acfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d107      	bne.n	800ad14 <f_read+0x44>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	7d5b      	ldrb	r3, [r3, #21]
 800ad08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ad0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <f_read+0x4a>
 800ad14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad18:	e115      	b.n	800af46 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	7d1b      	ldrb	r3, [r3, #20]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <f_read+0x5a>
 800ad26:	2307      	movs	r3, #7
 800ad28:	e10d      	b.n	800af46 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	68da      	ldr	r2, [r3, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	f240 80fe 	bls.w	800af3c <f_read+0x26c>
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ad44:	e0fa      	b.n	800af3c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f040 80c6 	bne.w	800aee0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	0a5b      	lsrs	r3, r3, #9
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	8952      	ldrh	r2, [r2, #10]
 800ad5e:	3a01      	subs	r2, #1
 800ad60:	4013      	ands	r3, r2
 800ad62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d12f      	bne.n	800adca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d103      	bne.n	800ad7a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	633b      	str	r3, [r7, #48]	; 0x30
 800ad78:	e013      	b.n	800ada2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d007      	beq.n	800ad92 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	4619      	mov	r1, r3
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7fe fe9b 	bl	8009ac4 <clmt_clust>
 800ad8e:	6338      	str	r0, [r7, #48]	; 0x30
 800ad90:	e007      	b.n	800ada2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fe fc09 	bl	80095b2 <get_fat>
 800ada0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d804      	bhi.n	800adb2 <f_read+0xe2>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2202      	movs	r2, #2
 800adac:	755a      	strb	r2, [r3, #21]
 800adae:	2302      	movs	r3, #2
 800adb0:	e0c9      	b.n	800af46 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb8:	d104      	bne.n	800adc4 <f_read+0xf4>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2201      	movs	r2, #1
 800adbe:	755a      	strb	r2, [r3, #21]
 800adc0:	2301      	movs	r3, #1
 800adc2:	e0c0      	b.n	800af46 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adc8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7fe fbce 	bl	8009574 <clust2sect>
 800add8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <f_read+0x11a>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2202      	movs	r2, #2
 800ade4:	755a      	strb	r2, [r3, #21]
 800ade6:	2302      	movs	r3, #2
 800ade8:	e0ad      	b.n	800af46 <f_read+0x276>
			sect += csect;
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	4413      	add	r3, r2
 800adf0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	0a5b      	lsrs	r3, r3, #9
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d039      	beq.n	800ae72 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adfe:	69fa      	ldr	r2, [r7, #28]
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	4413      	add	r3, r2
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	8952      	ldrh	r2, [r2, #10]
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d905      	bls.n	800ae18 <f_read+0x148>
					cc = fs->csize - csect;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	895b      	ldrh	r3, [r3, #10]
 800ae10:	461a      	mov	r2, r3
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	7858      	ldrb	r0, [r3, #1]
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	69ba      	ldr	r2, [r7, #24]
 800ae20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae22:	f7fd fffd 	bl	8008e20 <disk_read>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d004      	beq.n	800ae36 <f_read+0x166>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	755a      	strb	r2, [r3, #21]
 800ae32:	2301      	movs	r3, #1
 800ae34:	e087      	b.n	800af46 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	7d1b      	ldrb	r3, [r3, #20]
 800ae3a:	b25b      	sxtb	r3, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da14      	bge.n	800ae6a <f_read+0x19a>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a1a      	ldr	r2, [r3, #32]
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d90d      	bls.n	800ae6a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6a1a      	ldr	r2, [r3, #32]
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	025b      	lsls	r3, r3, #9
 800ae58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5a:	18d0      	adds	r0, r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3330      	adds	r3, #48	; 0x30
 800ae60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae64:	4619      	mov	r1, r3
 800ae66:	f7fe f8bb 	bl	8008fe0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	025b      	lsls	r3, r3, #9
 800ae6e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ae70:	e050      	b.n	800af14 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d02e      	beq.n	800aeda <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	7d1b      	ldrb	r3, [r3, #20]
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da18      	bge.n	800aeb8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	7858      	ldrb	r0, [r3, #1]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6a1a      	ldr	r2, [r3, #32]
 800ae94:	2301      	movs	r3, #1
 800ae96:	f7fd ffe3 	bl	8008e60 <disk_write>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d004      	beq.n	800aeaa <f_read+0x1da>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2201      	movs	r2, #1
 800aea4:	755a      	strb	r2, [r3, #21]
 800aea6:	2301      	movs	r3, #1
 800aea8:	e04d      	b.n	800af46 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	7d1b      	ldrb	r3, [r3, #20]
 800aeae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	7858      	ldrb	r0, [r3, #1]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aec2:	2301      	movs	r3, #1
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	f7fd ffab 	bl	8008e20 <disk_read>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d004      	beq.n	800aeda <f_read+0x20a>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2201      	movs	r2, #1
 800aed4:	755a      	strb	r2, [r3, #21]
 800aed6:	2301      	movs	r3, #1
 800aed8:	e035      	b.n	800af46 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800aeee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d901      	bls.n	800aefa <f_read+0x22a>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af08:	4413      	add	r3, r2
 800af0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af0c:	4619      	mov	r1, r3
 800af0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af10:	f7fe f866 	bl	8008fe0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800af14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	4413      	add	r3, r2
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	699a      	ldr	r2, [r3, #24]
 800af20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af22:	441a      	add	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	619a      	str	r2, [r3, #24]
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2e:	441a      	add	r2, r3
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f47f af01 	bne.w	800ad46 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3738      	adds	r7, #56	; 0x38
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b086      	sub	sp, #24
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f107 0208 	add.w	r2, r7, #8
 800af5c:	4611      	mov	r1, r2
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fc7c 	bl	800a85c <validate>
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d168      	bne.n	800b040 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7d1b      	ldrb	r3, [r3, #20]
 800af72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af76:	2b00      	cmp	r3, #0
 800af78:	d062      	beq.n	800b040 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	7d1b      	ldrb	r3, [r3, #20]
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	da15      	bge.n	800afb0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	7858      	ldrb	r0, [r3, #1]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1a      	ldr	r2, [r3, #32]
 800af92:	2301      	movs	r3, #1
 800af94:	f7fd ff64 	bl	8008e60 <disk_write>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <f_sync+0x54>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e04f      	b.n	800b042 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7d1b      	ldrb	r3, [r3, #20]
 800afa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800afb0:	f7fa fefe 	bl	8005db0 <get_fattime>
 800afb4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	4619      	mov	r1, r3
 800afbe:	4610      	mov	r0, r2
 800afc0:	f7fe fa3c 	bl	800943c <move_window>
 800afc4:	4603      	mov	r3, r0
 800afc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d138      	bne.n	800b040 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	330b      	adds	r3, #11
 800afd8:	781a      	ldrb	r2, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	330b      	adds	r3, #11
 800afde:	f042 0220 	orr.w	r2, r2, #32
 800afe2:	b2d2      	uxtb	r2, r2
 800afe4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	461a      	mov	r2, r3
 800aff0:	68f9      	ldr	r1, [r7, #12]
 800aff2:	f7fe ff41 	bl	8009e78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f103 021c 	add.w	r2, r3, #28
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	4619      	mov	r1, r3
 800b002:	4610      	mov	r0, r2
 800b004:	f7fd ffc0 	bl	8008f88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3316      	adds	r3, #22
 800b00c:	6939      	ldr	r1, [r7, #16]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd ffba 	bl	8008f88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3312      	adds	r3, #18
 800b018:	2100      	movs	r1, #0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fd ff99 	bl	8008f52 <st_word>
					fs->wflag = 1;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2201      	movs	r2, #1
 800b024:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe fa35 	bl	8009498 <sync_fs>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7d1b      	ldrb	r3, [r3, #20]
 800b036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b040:	7dfb      	ldrb	r3, [r7, #23]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff ff7b 	bl	800af4e <f_sync>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d118      	bne.n	800b094 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f107 0208 	add.w	r2, r7, #8
 800b068:	4611      	mov	r1, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fbf6 	bl	800a85c <validate>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10c      	bne.n	800b094 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe f938 	bl	80092f4 <dec_lock>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b094:	7bfb      	ldrb	r3, [r7, #15]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b090      	sub	sp, #64	; 0x40
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b0a8:	f107 010c 	add.w	r1, r7, #12
 800b0ac:	1d3b      	adds	r3, r7, #4
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff f987 	bl	800a3c4 <find_volume>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b0bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d11f      	bne.n	800b104 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	f107 030c 	add.w	r3, r7, #12
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7ff f86d 	bl	800a1ac <follow_path>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b0d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d111      	bne.n	800b104 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b0e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b0e4:	b25b      	sxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	da03      	bge.n	800b0f2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b0ea:	2306      	movs	r3, #6
 800b0ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b0f0:	e008      	b.n	800b104 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d005      	beq.n	800b104 <f_stat+0x66>
 800b0f8:	f107 030c 	add.w	r3, r7, #12
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe ff61 	bl	8009fc6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b104:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3740      	adds	r7, #64	; 0x40
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b110:	b480      	push	{r7}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	4613      	mov	r3, r2
 800b11c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b11e:	2301      	movs	r3, #1
 800b120:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b126:	4b1f      	ldr	r3, [pc, #124]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b128:	7a5b      	ldrb	r3, [r3, #9]
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d131      	bne.n	800b194 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b130:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b132:	7a5b      	ldrb	r3, [r3, #9]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	461a      	mov	r2, r3
 800b138:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b13a:	2100      	movs	r1, #0
 800b13c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b13e:	4b19      	ldr	r3, [pc, #100]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b140:	7a5b      	ldrb	r3, [r3, #9]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	4a17      	ldr	r2, [pc, #92]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b14e:	4b15      	ldr	r3, [pc, #84]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b150:	7a5b      	ldrb	r3, [r3, #9]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	461a      	mov	r2, r3
 800b156:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b158:	4413      	add	r3, r2
 800b15a:	79fa      	ldrb	r2, [r7, #7]
 800b15c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b15e:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b160:	7a5b      	ldrb	r3, [r3, #9]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	b2d1      	uxtb	r1, r2
 800b168:	4a0e      	ldr	r2, [pc, #56]	; (800b1a4 <FATFS_LinkDriverEx+0x94>)
 800b16a:	7251      	strb	r1, [r2, #9]
 800b16c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b16e:	7dbb      	ldrb	r3, [r7, #22]
 800b170:	3330      	adds	r3, #48	; 0x30
 800b172:	b2da      	uxtb	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	3301      	adds	r3, #1
 800b17c:	223a      	movs	r2, #58	; 0x3a
 800b17e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	3302      	adds	r3, #2
 800b184:	222f      	movs	r2, #47	; 0x2f
 800b186:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	3303      	adds	r3, #3
 800b18c:	2200      	movs	r2, #0
 800b18e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
}
 800b196:	4618      	mov	r0, r3
 800b198:	371c      	adds	r7, #28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	200100dc 	.word	0x200100dc

0800b1a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff ffaa 	bl	800b110 <FATFS_LinkDriverEx>
 800b1bc:	4603      	mov	r3, r0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	490e      	ldr	r1, [pc, #56]	; (800b208 <MX_USB_HOST_Init+0x40>)
 800b1d0:	480e      	ldr	r0, [pc, #56]	; (800b20c <MX_USB_HOST_Init+0x44>)
 800b1d2:	f7fc fa8b 	bl	80076ec <USBH_Init>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b1dc:	f7f5 fc62 	bl	8000aa4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b1e0:	490b      	ldr	r1, [pc, #44]	; (800b210 <MX_USB_HOST_Init+0x48>)
 800b1e2:	480a      	ldr	r0, [pc, #40]	; (800b20c <MX_USB_HOST_Init+0x44>)
 800b1e4:	f7fc fb10 	bl	8007808 <USBH_RegisterClass>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b1ee:	f7f5 fc59 	bl	8000aa4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b1f2:	4806      	ldr	r0, [pc, #24]	; (800b20c <MX_USB_HOST_Init+0x44>)
 800b1f4:	f7fc fb94 	bl	8007920 <USBH_Start>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b1fe:	f7f5 fc51 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b202:	bf00      	nop
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	0800b229 	.word	0x0800b229
 800b20c:	20010ca4 	.word	0x20010ca4
 800b210:	2000000c 	.word	0x2000000c

0800b214 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b218:	4802      	ldr	r0, [pc, #8]	; (800b224 <MX_USB_HOST_Process+0x10>)
 800b21a:	f7fc fb91 	bl	8007940 <USBH_Process>
}
 800b21e:	bf00      	nop
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20010ca4 	.word	0x20010ca4

0800b228 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	3b01      	subs	r3, #1
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d819      	bhi.n	800b270 <USBH_UserProcess+0x48>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <USBH_UserProcess+0x1c>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b271 	.word	0x0800b271
 800b248:	0800b261 	.word	0x0800b261
 800b24c:	0800b271 	.word	0x0800b271
 800b250:	0800b269 	.word	0x0800b269
 800b254:	0800b259 	.word	0x0800b259
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b258:	4b09      	ldr	r3, [pc, #36]	; (800b280 <USBH_UserProcess+0x58>)
 800b25a:	2203      	movs	r2, #3
 800b25c:	701a      	strb	r2, [r3, #0]
  break;
 800b25e:	e008      	b.n	800b272 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <USBH_UserProcess+0x58>)
 800b262:	2202      	movs	r2, #2
 800b264:	701a      	strb	r2, [r3, #0]
  break;
 800b266:	e004      	b.n	800b272 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <USBH_UserProcess+0x58>)
 800b26a:	2201      	movs	r2, #1
 800b26c:	701a      	strb	r2, [r3, #0]
  break;
 800b26e:	e000      	b.n	800b272 <USBH_UserProcess+0x4a>

  default:
  break;
 800b270:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b272:	bf00      	nop
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	200100e8 	.word	0x200100e8

0800b284 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08a      	sub	sp, #40	; 0x28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	605a      	str	r2, [r3, #4]
 800b296:	609a      	str	r2, [r3, #8]
 800b298:	60da      	str	r2, [r3, #12]
 800b29a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2a4:	d13c      	bne.n	800b320 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2a6:	4b20      	ldr	r3, [pc, #128]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2aa:	4a1f      	ldr	r2, [pc, #124]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2b2:	4b1d      	ldr	r3, [pc, #116]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	613b      	str	r3, [r7, #16]
 800b2bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b2c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2d0:	230a      	movs	r3, #10
 800b2d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2d4:	f107 0314 	add.w	r3, r7, #20
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4814      	ldr	r0, [pc, #80]	; (800b32c <HAL_HCD_MspInit+0xa8>)
 800b2dc:	f7f6 f9a8 	bl	8001630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2e0:	4b11      	ldr	r3, [pc, #68]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e4:	4a10      	ldr	r2, [pc, #64]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ea:	6353      	str	r3, [r2, #52]	; 0x34
 800b2ec:	4b0e      	ldr	r3, [pc, #56]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f4:	60fb      	str	r3, [r7, #12]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	4b0b      	ldr	r3, [pc, #44]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2fc:	4a0a      	ldr	r2, [pc, #40]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b2fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b302:	6453      	str	r3, [r2, #68]	; 0x44
 800b304:	4b08      	ldr	r3, [pc, #32]	; (800b328 <HAL_HCD_MspInit+0xa4>)
 800b306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b30c:	60bb      	str	r3, [r7, #8]
 800b30e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b310:	2200      	movs	r2, #0
 800b312:	2100      	movs	r1, #0
 800b314:	2043      	movs	r0, #67	; 0x43
 800b316:	f7f5 feb4 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b31a:	2043      	movs	r0, #67	; 0x43
 800b31c:	f7f5 fecd 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b320:	bf00      	nop
 800b322:	3728      	adds	r7, #40	; 0x28
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40023800 	.word	0x40023800
 800b32c:	40020000 	.word	0x40020000

0800b330 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fc fed1 	bl	80080e6 <USBH_LL_IncTimer>
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fc ff09 	bl	8008172 <USBH_LL_Connect>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b376:	4618      	mov	r0, r3
 800b378:	f7fc ff12 	bl	80081a0 <USBH_LL_Disconnect>
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	70fb      	strb	r3, [r7, #3]
 800b390:	4613      	mov	r3, r2
 800b392:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fc fec3 	bl	800813a <USBH_LL_PortEnabled>
}
 800b3b4:	bf00      	nop
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fc fec3 	bl	8008156 <USBH_LL_PortDisabled>
}
 800b3d0:	bf00      	nop
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d12d      	bne.n	800b446 <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b3ea:	4a19      	ldr	r2, [pc, #100]	; (800b450 <USBH_LL_Init+0x78>)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a16      	ldr	r2, [pc, #88]	; (800b450 <USBH_LL_Init+0x78>)
 800b3f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <USBH_LL_Init+0x78>)
 800b3fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b400:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800b402:	4b13      	ldr	r3, [pc, #76]	; (800b450 <USBH_LL_Init+0x78>)
 800b404:	220c      	movs	r2, #12
 800b406:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800b408:	4b11      	ldr	r3, [pc, #68]	; (800b450 <USBH_LL_Init+0x78>)
 800b40a:	2203      	movs	r2, #3
 800b40c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <USBH_LL_Init+0x78>)
 800b410:	2200      	movs	r2, #0
 800b412:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b414:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <USBH_LL_Init+0x78>)
 800b416:	2202      	movs	r2, #2
 800b418:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b41a:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <USBH_LL_Init+0x78>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b420:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <USBH_LL_Init+0x78>)
 800b422:	2200      	movs	r2, #0
 800b424:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b426:	480a      	ldr	r0, [pc, #40]	; (800b450 <USBH_LL_Init+0x78>)
 800b428:	f7f6 fab5 	bl	8001996 <HAL_HCD_Init>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800b432:	f7f5 fb37 	bl	8000aa4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b436:	4806      	ldr	r0, [pc, #24]	; (800b450 <USBH_LL_Init+0x78>)
 800b438:	f7f6 fe92 	bl	8002160 <HAL_HCD_GetCurrentFrame>
 800b43c:	4603      	mov	r3, r0
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7fc fe41 	bl	80080c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	2001107c 	.word	0x2001107c

0800b454 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7f6 fe02 	bl	8002074 <HAL_HCD_Start>
 800b470:	4603      	mov	r3, r0
 800b472:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b474:	7bfb      	ldrb	r3, [r7, #15]
 800b476:	4618      	mov	r0, r3
 800b478:	f000 f98a 	bl	800b790 <USBH_Get_USB_Status>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b480:	7bbb      	ldrb	r3, [r7, #14]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7f6 fe0a 	bl	80020ba <HAL_HCD_Stop>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 f96f 	bl	800b790 <USBH_Get_USB_Status>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f6 fe52 	bl	800217c <HAL_HCD_GetCurrentSpeed>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d007      	beq.n	800b4ee <USBH_LL_GetSpeed+0x2e>
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d302      	bcc.n	800b4e8 <USBH_LL_GetSpeed+0x28>
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d006      	beq.n	800b4f4 <USBH_LL_GetSpeed+0x34>
 800b4e6:	e008      	b.n	800b4fa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ec:	e008      	b.n	800b500 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f2:	e005      	b.n	800b500 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f8:	e002      	b.n	800b500 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b4fe:	bf00      	nop
  }
  return  speed;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b520:	4618      	mov	r0, r3
 800b522:	f7f6 fde7 	bl	80020f4 <HAL_HCD_ResetPort>
 800b526:	4603      	mov	r3, r0
 800b528:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 f92f 	bl	800b790 <USBH_Get_USB_Status>
 800b532:	4603      	mov	r3, r0
 800b534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b536:	7bbb      	ldrb	r3, [r7, #14]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b552:	78fa      	ldrb	r2, [r7, #3]
 800b554:	4611      	mov	r1, r2
 800b556:	4618      	mov	r0, r3
 800b558:	f7f6 fdee 	bl	8002138 <HAL_HCD_HC_GetXferCount>
 800b55c:	4603      	mov	r3, r0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b566:	b590      	push	{r4, r7, lr}
 800b568:	b089      	sub	sp, #36	; 0x24
 800b56a:	af04      	add	r7, sp, #16
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	4608      	mov	r0, r1
 800b570:	4611      	mov	r1, r2
 800b572:	461a      	mov	r2, r3
 800b574:	4603      	mov	r3, r0
 800b576:	70fb      	strb	r3, [r7, #3]
 800b578:	460b      	mov	r3, r1
 800b57a:	70bb      	strb	r3, [r7, #2]
 800b57c:	4613      	mov	r3, r2
 800b57e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b58e:	787c      	ldrb	r4, [r7, #1]
 800b590:	78ba      	ldrb	r2, [r7, #2]
 800b592:	78f9      	ldrb	r1, [r7, #3]
 800b594:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b596:	9302      	str	r3, [sp, #8]
 800b598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	4623      	mov	r3, r4
 800b5a6:	f7f6 fa58 	bl	8001a5a <HAL_HCD_HC_Init>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 f8ed 	bl	800b790 <USBH_Get_USB_Status>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd90      	pop	{r4, r7, pc}

0800b5c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5de:	78fa      	ldrb	r2, [r7, #3]
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f6 fac8 	bl	8001b78 <HAL_HCD_HC_Halt>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 f8ce 	bl	800b790 <USBH_Get_USB_Status>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b602:	b590      	push	{r4, r7, lr}
 800b604:	b089      	sub	sp, #36	; 0x24
 800b606:	af04      	add	r7, sp, #16
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	4608      	mov	r0, r1
 800b60c:	4611      	mov	r1, r2
 800b60e:	461a      	mov	r2, r3
 800b610:	4603      	mov	r3, r0
 800b612:	70fb      	strb	r3, [r7, #3]
 800b614:	460b      	mov	r3, r1
 800b616:	70bb      	strb	r3, [r7, #2]
 800b618:	4613      	mov	r3, r2
 800b61a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b62a:	787c      	ldrb	r4, [r7, #1]
 800b62c:	78ba      	ldrb	r2, [r7, #2]
 800b62e:	78f9      	ldrb	r1, [r7, #3]
 800b630:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b638:	9302      	str	r3, [sp, #8]
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4623      	mov	r3, r4
 800b646:	f7f6 fabb 	bl	8001bc0 <HAL_HCD_HC_SubmitRequest>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f89d 	bl	800b790 <USBH_Get_USB_Status>
 800b656:	4603      	mov	r3, r0
 800b658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	bd90      	pop	{r4, r7, pc}

0800b664 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b676:	78fa      	ldrb	r2, [r7, #3]
 800b678:	4611      	mov	r1, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f6 fd48 	bl	8002110 <HAL_HCD_HC_GetURBState>
 800b680:	4603      	mov	r3, r0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b082      	sub	sp, #8
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d103      	bne.n	800b6a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 f8a0 	bl	800b7e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b6a8:	20c8      	movs	r0, #200	; 0xc8
 800b6aa:	f7f5 fbed 	bl	8000e88 <HAL_Delay>
  return USBH_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	212c      	movs	r1, #44	; 0x2c
 800b6d6:	fb01 f303 	mul.w	r3, r1, r3
 800b6da:	4413      	add	r3, r2
 800b6dc:	333b      	adds	r3, #59	; 0x3b
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d009      	beq.n	800b6f8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	212c      	movs	r1, #44	; 0x2c
 800b6ea:	fb01 f303 	mul.w	r3, r1, r3
 800b6ee:	4413      	add	r3, r2
 800b6f0:	3354      	adds	r3, #84	; 0x54
 800b6f2:	78ba      	ldrb	r2, [r7, #2]
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	e008      	b.n	800b70a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b6f8:	78fb      	ldrb	r3, [r7, #3]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	212c      	movs	r1, #44	; 0x2c
 800b6fe:	fb01 f303 	mul.w	r3, r1, r3
 800b702:	4413      	add	r3, r2
 800b704:	3355      	adds	r3, #85	; 0x55
 800b706:	78ba      	ldrb	r2, [r7, #2]
 800b708:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b72e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	212c      	movs	r1, #44	; 0x2c
 800b736:	fb01 f303 	mul.w	r3, r1, r3
 800b73a:	4413      	add	r3, r2
 800b73c:	333b      	adds	r3, #59	; 0x3b
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	212c      	movs	r1, #44	; 0x2c
 800b74a:	fb01 f303 	mul.w	r3, r1, r3
 800b74e:	4413      	add	r3, r2
 800b750:	3354      	adds	r3, #84	; 0x54
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	73fb      	strb	r3, [r7, #15]
 800b756:	e008      	b.n	800b76a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b758:	78fb      	ldrb	r3, [r7, #3]
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	212c      	movs	r1, #44	; 0x2c
 800b75e:	fb01 f303 	mul.w	r3, r1, r3
 800b762:	4413      	add	r3, r2
 800b764:	3355      	adds	r3, #85	; 0x55
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7f5 fb81 	bl	8000e88 <HAL_Delay>
}
 800b786:	bf00      	nop
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	4603      	mov	r3, r0
 800b798:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b79e:	79fb      	ldrb	r3, [r7, #7]
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d817      	bhi.n	800b7d4 <USBH_Get_USB_Status+0x44>
 800b7a4:	a201      	add	r2, pc, #4	; (adr r2, 800b7ac <USBH_Get_USB_Status+0x1c>)
 800b7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7aa:	bf00      	nop
 800b7ac:	0800b7bd 	.word	0x0800b7bd
 800b7b0:	0800b7c3 	.word	0x0800b7c3
 800b7b4:	0800b7c9 	.word	0x0800b7c9
 800b7b8:	0800b7cf 	.word	0x0800b7cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c0:	e00b      	b.n	800b7da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c6:	e008      	b.n	800b7da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b7cc:	e005      	b.n	800b7da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d2:	e002      	b.n	800b7da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d8:	bf00      	nop
  }
  return usb_status;
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b7f2:	79fb      	ldrb	r3, [r7, #7]
 800b7f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d102      	bne.n	800b802 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	73fb      	strb	r3, [r7, #15]
 800b800:	e001      	b.n	800b806 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,(GPIO_PinState)data);
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	461a      	mov	r2, r3
 800b80a:	2140      	movs	r1, #64	; 0x40
 800b80c:	4803      	ldr	r0, [pc, #12]	; (800b81c <MX_DriverVbusFS+0x34>)
 800b80e:	f7f6 f8a9 	bl	8001964 <HAL_GPIO_WritePin>
}
 800b812:	bf00      	nop
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	40020800 	.word	0x40020800

0800b820 <BootAppImage>:
#define uint32_t unsigned int
#define uint8_t unsigned char


void BootAppImage(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	75fb      	strb	r3, [r7, #23]
	uint32_t msp_value = *(volatile uint32_t *)0x08020000;
 800b82a:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <BootAppImage+0x78>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	613b      	str	r3, [r7, #16]
	if(msp_value == 0xFFFFFFFF)
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d02a      	beq.n	800b88e <BootAppImage+0x6e>
	{
		return;
	}
	uint32_t resest_address = *(volatile uint32_t *)0x08020004;
 800b838:	4b18      	ldr	r3, [pc, #96]	; (800b89c <BootAppImage+0x7c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f383 8808 	msr	MSP, r3
	__set_MSP(msp_value);
	AppEntry Jump = (void *)resest_address;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800b84c:	b672      	cpsid	i
	__disable_irq();
	SysTick->CTRL = 0;
 800b84e:	4b14      	ldr	r3, [pc, #80]	; (800b8a0 <BootAppImage+0x80>)
 800b850:	2200      	movs	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
	HAL_RCC_DeInit();
 800b854:	f7f7 fe08 	bl	8003468 <HAL_RCC_DeInit>
	for (i=0;i<5;i++)
 800b858:	2300      	movs	r3, #0
 800b85a:	75fb      	strb	r3, [r7, #23]
 800b85c:	e010      	b.n	800b880 <BootAppImage+0x60>
	{
		NVIC->ICER[i]=0xFFFFFFFF;
 800b85e:	4a11      	ldr	r2, [pc, #68]	; (800b8a4 <BootAppImage+0x84>)
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	3320      	adds	r3, #32
 800b864:	f04f 31ff 	mov.w	r1, #4294967295
 800b868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i]=0xFFFFFFFF;
 800b86c:	4a0d      	ldr	r2, [pc, #52]	; (800b8a4 <BootAppImage+0x84>)
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	3360      	adds	r3, #96	; 0x60
 800b872:	f04f 31ff 	mov.w	r1, #4294967295
 800b876:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<5;i++)
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	3301      	adds	r3, #1
 800b87e:	75fb      	strb	r3, [r7, #23]
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	2b04      	cmp	r3, #4
 800b884:	d9eb      	bls.n	800b85e <BootAppImage+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
 800b886:	b662      	cpsie	i
	}
	__enable_irq();
	Jump();
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	4798      	blx	r3
 800b88c:	e000      	b.n	800b890 <BootAppImage+0x70>
		return;
 800b88e:	bf00      	nop
}
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	08020000 	.word	0x08020000
 800b89c:	08020004 	.word	0x08020004
 800b8a0:	e000e010 	.word	0xe000e010
 800b8a4:	e000e100 	.word	0xe000e100

0800b8a8 <__errno>:
 800b8a8:	4b01      	ldr	r3, [pc, #4]	; (800b8b0 <__errno+0x8>)
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	2000002c 	.word	0x2000002c

0800b8b4 <__libc_init_array>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	4e0d      	ldr	r6, [pc, #52]	; (800b8ec <__libc_init_array+0x38>)
 800b8b8:	4c0d      	ldr	r4, [pc, #52]	; (800b8f0 <__libc_init_array+0x3c>)
 800b8ba:	1ba4      	subs	r4, r4, r6
 800b8bc:	10a4      	asrs	r4, r4, #2
 800b8be:	2500      	movs	r5, #0
 800b8c0:	42a5      	cmp	r5, r4
 800b8c2:	d109      	bne.n	800b8d8 <__libc_init_array+0x24>
 800b8c4:	4e0b      	ldr	r6, [pc, #44]	; (800b8f4 <__libc_init_array+0x40>)
 800b8c6:	4c0c      	ldr	r4, [pc, #48]	; (800b8f8 <__libc_init_array+0x44>)
 800b8c8:	f000 ff84 	bl	800c7d4 <_init>
 800b8cc:	1ba4      	subs	r4, r4, r6
 800b8ce:	10a4      	asrs	r4, r4, #2
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	42a5      	cmp	r5, r4
 800b8d4:	d105      	bne.n	800b8e2 <__libc_init_array+0x2e>
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8dc:	4798      	blx	r3
 800b8de:	3501      	adds	r5, #1
 800b8e0:	e7ee      	b.n	800b8c0 <__libc_init_array+0xc>
 800b8e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8e6:	4798      	blx	r3
 800b8e8:	3501      	adds	r5, #1
 800b8ea:	e7f2      	b.n	800b8d2 <__libc_init_array+0x1e>
 800b8ec:	0800cae8 	.word	0x0800cae8
 800b8f0:	0800cae8 	.word	0x0800cae8
 800b8f4:	0800cae8 	.word	0x0800cae8
 800b8f8:	0800caec 	.word	0x0800caec

0800b8fc <malloc>:
 800b8fc:	4b02      	ldr	r3, [pc, #8]	; (800b908 <malloc+0xc>)
 800b8fe:	4601      	mov	r1, r0
 800b900:	6818      	ldr	r0, [r3, #0]
 800b902:	f000 b86d 	b.w	800b9e0 <_malloc_r>
 800b906:	bf00      	nop
 800b908:	2000002c 	.word	0x2000002c

0800b90c <free>:
 800b90c:	4b02      	ldr	r3, [pc, #8]	; (800b918 <free+0xc>)
 800b90e:	4601      	mov	r1, r0
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	f000 b817 	b.w	800b944 <_free_r>
 800b916:	bf00      	nop
 800b918:	2000002c 	.word	0x2000002c

0800b91c <memcpy>:
 800b91c:	b510      	push	{r4, lr}
 800b91e:	1e43      	subs	r3, r0, #1
 800b920:	440a      	add	r2, r1
 800b922:	4291      	cmp	r1, r2
 800b924:	d100      	bne.n	800b928 <memcpy+0xc>
 800b926:	bd10      	pop	{r4, pc}
 800b928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b930:	e7f7      	b.n	800b922 <memcpy+0x6>

0800b932 <memset>:
 800b932:	4402      	add	r2, r0
 800b934:	4603      	mov	r3, r0
 800b936:	4293      	cmp	r3, r2
 800b938:	d100      	bne.n	800b93c <memset+0xa>
 800b93a:	4770      	bx	lr
 800b93c:	f803 1b01 	strb.w	r1, [r3], #1
 800b940:	e7f9      	b.n	800b936 <memset+0x4>
	...

0800b944 <_free_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4605      	mov	r5, r0
 800b948:	2900      	cmp	r1, #0
 800b94a:	d045      	beq.n	800b9d8 <_free_r+0x94>
 800b94c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b950:	1f0c      	subs	r4, r1, #4
 800b952:	2b00      	cmp	r3, #0
 800b954:	bfb8      	it	lt
 800b956:	18e4      	addlt	r4, r4, r3
 800b958:	f000 fbc6 	bl	800c0e8 <__malloc_lock>
 800b95c:	4a1f      	ldr	r2, [pc, #124]	; (800b9dc <_free_r+0x98>)
 800b95e:	6813      	ldr	r3, [r2, #0]
 800b960:	4610      	mov	r0, r2
 800b962:	b933      	cbnz	r3, 800b972 <_free_r+0x2e>
 800b964:	6063      	str	r3, [r4, #4]
 800b966:	6014      	str	r4, [r2, #0]
 800b968:	4628      	mov	r0, r5
 800b96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b96e:	f000 bbbc 	b.w	800c0ea <__malloc_unlock>
 800b972:	42a3      	cmp	r3, r4
 800b974:	d90c      	bls.n	800b990 <_free_r+0x4c>
 800b976:	6821      	ldr	r1, [r4, #0]
 800b978:	1862      	adds	r2, r4, r1
 800b97a:	4293      	cmp	r3, r2
 800b97c:	bf04      	itt	eq
 800b97e:	681a      	ldreq	r2, [r3, #0]
 800b980:	685b      	ldreq	r3, [r3, #4]
 800b982:	6063      	str	r3, [r4, #4]
 800b984:	bf04      	itt	eq
 800b986:	1852      	addeq	r2, r2, r1
 800b988:	6022      	streq	r2, [r4, #0]
 800b98a:	6004      	str	r4, [r0, #0]
 800b98c:	e7ec      	b.n	800b968 <_free_r+0x24>
 800b98e:	4613      	mov	r3, r2
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	b10a      	cbz	r2, 800b998 <_free_r+0x54>
 800b994:	42a2      	cmp	r2, r4
 800b996:	d9fa      	bls.n	800b98e <_free_r+0x4a>
 800b998:	6819      	ldr	r1, [r3, #0]
 800b99a:	1858      	adds	r0, r3, r1
 800b99c:	42a0      	cmp	r0, r4
 800b99e:	d10b      	bne.n	800b9b8 <_free_r+0x74>
 800b9a0:	6820      	ldr	r0, [r4, #0]
 800b9a2:	4401      	add	r1, r0
 800b9a4:	1858      	adds	r0, r3, r1
 800b9a6:	4282      	cmp	r2, r0
 800b9a8:	6019      	str	r1, [r3, #0]
 800b9aa:	d1dd      	bne.n	800b968 <_free_r+0x24>
 800b9ac:	6810      	ldr	r0, [r2, #0]
 800b9ae:	6852      	ldr	r2, [r2, #4]
 800b9b0:	605a      	str	r2, [r3, #4]
 800b9b2:	4401      	add	r1, r0
 800b9b4:	6019      	str	r1, [r3, #0]
 800b9b6:	e7d7      	b.n	800b968 <_free_r+0x24>
 800b9b8:	d902      	bls.n	800b9c0 <_free_r+0x7c>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	602b      	str	r3, [r5, #0]
 800b9be:	e7d3      	b.n	800b968 <_free_r+0x24>
 800b9c0:	6820      	ldr	r0, [r4, #0]
 800b9c2:	1821      	adds	r1, r4, r0
 800b9c4:	428a      	cmp	r2, r1
 800b9c6:	bf04      	itt	eq
 800b9c8:	6811      	ldreq	r1, [r2, #0]
 800b9ca:	6852      	ldreq	r2, [r2, #4]
 800b9cc:	6062      	str	r2, [r4, #4]
 800b9ce:	bf04      	itt	eq
 800b9d0:	1809      	addeq	r1, r1, r0
 800b9d2:	6021      	streq	r1, [r4, #0]
 800b9d4:	605c      	str	r4, [r3, #4]
 800b9d6:	e7c7      	b.n	800b968 <_free_r+0x24>
 800b9d8:	bd38      	pop	{r3, r4, r5, pc}
 800b9da:	bf00      	nop
 800b9dc:	200100ec 	.word	0x200100ec

0800b9e0 <_malloc_r>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	1ccd      	adds	r5, r1, #3
 800b9e4:	f025 0503 	bic.w	r5, r5, #3
 800b9e8:	3508      	adds	r5, #8
 800b9ea:	2d0c      	cmp	r5, #12
 800b9ec:	bf38      	it	cc
 800b9ee:	250c      	movcc	r5, #12
 800b9f0:	2d00      	cmp	r5, #0
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	db01      	blt.n	800b9fa <_malloc_r+0x1a>
 800b9f6:	42a9      	cmp	r1, r5
 800b9f8:	d903      	bls.n	800ba02 <_malloc_r+0x22>
 800b9fa:	230c      	movs	r3, #12
 800b9fc:	6033      	str	r3, [r6, #0]
 800b9fe:	2000      	movs	r0, #0
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	f000 fb71 	bl	800c0e8 <__malloc_lock>
 800ba06:	4a21      	ldr	r2, [pc, #132]	; (800ba8c <_malloc_r+0xac>)
 800ba08:	6814      	ldr	r4, [r2, #0]
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	b991      	cbnz	r1, 800ba34 <_malloc_r+0x54>
 800ba0e:	4c20      	ldr	r4, [pc, #128]	; (800ba90 <_malloc_r+0xb0>)
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	b91b      	cbnz	r3, 800ba1c <_malloc_r+0x3c>
 800ba14:	4630      	mov	r0, r6
 800ba16:	f000 f8b9 	bl	800bb8c <_sbrk_r>
 800ba1a:	6020      	str	r0, [r4, #0]
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f000 f8b4 	bl	800bb8c <_sbrk_r>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d124      	bne.n	800ba72 <_malloc_r+0x92>
 800ba28:	230c      	movs	r3, #12
 800ba2a:	6033      	str	r3, [r6, #0]
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f000 fb5c 	bl	800c0ea <__malloc_unlock>
 800ba32:	e7e4      	b.n	800b9fe <_malloc_r+0x1e>
 800ba34:	680b      	ldr	r3, [r1, #0]
 800ba36:	1b5b      	subs	r3, r3, r5
 800ba38:	d418      	bmi.n	800ba6c <_malloc_r+0x8c>
 800ba3a:	2b0b      	cmp	r3, #11
 800ba3c:	d90f      	bls.n	800ba5e <_malloc_r+0x7e>
 800ba3e:	600b      	str	r3, [r1, #0]
 800ba40:	50cd      	str	r5, [r1, r3]
 800ba42:	18cc      	adds	r4, r1, r3
 800ba44:	4630      	mov	r0, r6
 800ba46:	f000 fb50 	bl	800c0ea <__malloc_unlock>
 800ba4a:	f104 000b 	add.w	r0, r4, #11
 800ba4e:	1d23      	adds	r3, r4, #4
 800ba50:	f020 0007 	bic.w	r0, r0, #7
 800ba54:	1ac3      	subs	r3, r0, r3
 800ba56:	d0d3      	beq.n	800ba00 <_malloc_r+0x20>
 800ba58:	425a      	negs	r2, r3
 800ba5a:	50e2      	str	r2, [r4, r3]
 800ba5c:	e7d0      	b.n	800ba00 <_malloc_r+0x20>
 800ba5e:	428c      	cmp	r4, r1
 800ba60:	684b      	ldr	r3, [r1, #4]
 800ba62:	bf16      	itet	ne
 800ba64:	6063      	strne	r3, [r4, #4]
 800ba66:	6013      	streq	r3, [r2, #0]
 800ba68:	460c      	movne	r4, r1
 800ba6a:	e7eb      	b.n	800ba44 <_malloc_r+0x64>
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	6849      	ldr	r1, [r1, #4]
 800ba70:	e7cc      	b.n	800ba0c <_malloc_r+0x2c>
 800ba72:	1cc4      	adds	r4, r0, #3
 800ba74:	f024 0403 	bic.w	r4, r4, #3
 800ba78:	42a0      	cmp	r0, r4
 800ba7a:	d005      	beq.n	800ba88 <_malloc_r+0xa8>
 800ba7c:	1a21      	subs	r1, r4, r0
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f000 f884 	bl	800bb8c <_sbrk_r>
 800ba84:	3001      	adds	r0, #1
 800ba86:	d0cf      	beq.n	800ba28 <_malloc_r+0x48>
 800ba88:	6025      	str	r5, [r4, #0]
 800ba8a:	e7db      	b.n	800ba44 <_malloc_r+0x64>
 800ba8c:	200100ec 	.word	0x200100ec
 800ba90:	200100f0 	.word	0x200100f0

0800ba94 <iprintf>:
 800ba94:	b40f      	push	{r0, r1, r2, r3}
 800ba96:	4b0a      	ldr	r3, [pc, #40]	; (800bac0 <iprintf+0x2c>)
 800ba98:	b513      	push	{r0, r1, r4, lr}
 800ba9a:	681c      	ldr	r4, [r3, #0]
 800ba9c:	b124      	cbz	r4, 800baa8 <iprintf+0x14>
 800ba9e:	69a3      	ldr	r3, [r4, #24]
 800baa0:	b913      	cbnz	r3, 800baa8 <iprintf+0x14>
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fa32 	bl	800bf0c <__sinit>
 800baa8:	ab05      	add	r3, sp, #20
 800baaa:	9a04      	ldr	r2, [sp, #16]
 800baac:	68a1      	ldr	r1, [r4, #8]
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fb45 	bl	800c140 <_vfiprintf_r>
 800bab6:	b002      	add	sp, #8
 800bab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800babc:	b004      	add	sp, #16
 800babe:	4770      	bx	lr
 800bac0:	2000002c 	.word	0x2000002c

0800bac4 <_puts_r>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	460e      	mov	r6, r1
 800bac8:	4605      	mov	r5, r0
 800baca:	b118      	cbz	r0, 800bad4 <_puts_r+0x10>
 800bacc:	6983      	ldr	r3, [r0, #24]
 800bace:	b90b      	cbnz	r3, 800bad4 <_puts_r+0x10>
 800bad0:	f000 fa1c 	bl	800bf0c <__sinit>
 800bad4:	69ab      	ldr	r3, [r5, #24]
 800bad6:	68ac      	ldr	r4, [r5, #8]
 800bad8:	b913      	cbnz	r3, 800bae0 <_puts_r+0x1c>
 800bada:	4628      	mov	r0, r5
 800badc:	f000 fa16 	bl	800bf0c <__sinit>
 800bae0:	4b23      	ldr	r3, [pc, #140]	; (800bb70 <_puts_r+0xac>)
 800bae2:	429c      	cmp	r4, r3
 800bae4:	d117      	bne.n	800bb16 <_puts_r+0x52>
 800bae6:	686c      	ldr	r4, [r5, #4]
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	071b      	lsls	r3, r3, #28
 800baec:	d51d      	bpl.n	800bb2a <_puts_r+0x66>
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	b1db      	cbz	r3, 800bb2a <_puts_r+0x66>
 800baf2:	3e01      	subs	r6, #1
 800baf4:	68a3      	ldr	r3, [r4, #8]
 800baf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bafa:	3b01      	subs	r3, #1
 800bafc:	60a3      	str	r3, [r4, #8]
 800bafe:	b9e9      	cbnz	r1, 800bb3c <_puts_r+0x78>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	da2e      	bge.n	800bb62 <_puts_r+0x9e>
 800bb04:	4622      	mov	r2, r4
 800bb06:	210a      	movs	r1, #10
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f000 f84f 	bl	800bbac <__swbuf_r>
 800bb0e:	3001      	adds	r0, #1
 800bb10:	d011      	beq.n	800bb36 <_puts_r+0x72>
 800bb12:	200a      	movs	r0, #10
 800bb14:	e011      	b.n	800bb3a <_puts_r+0x76>
 800bb16:	4b17      	ldr	r3, [pc, #92]	; (800bb74 <_puts_r+0xb0>)
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	d101      	bne.n	800bb20 <_puts_r+0x5c>
 800bb1c:	68ac      	ldr	r4, [r5, #8]
 800bb1e:	e7e3      	b.n	800bae8 <_puts_r+0x24>
 800bb20:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <_puts_r+0xb4>)
 800bb22:	429c      	cmp	r4, r3
 800bb24:	bf08      	it	eq
 800bb26:	68ec      	ldreq	r4, [r5, #12]
 800bb28:	e7de      	b.n	800bae8 <_puts_r+0x24>
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	f000 f88f 	bl	800bc50 <__swsetup_r>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0dd      	beq.n	800baf2 <_puts_r+0x2e>
 800bb36:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	da04      	bge.n	800bb4a <_puts_r+0x86>
 800bb40:	69a2      	ldr	r2, [r4, #24]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	dc06      	bgt.n	800bb54 <_puts_r+0x90>
 800bb46:	290a      	cmp	r1, #10
 800bb48:	d004      	beq.n	800bb54 <_puts_r+0x90>
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	6022      	str	r2, [r4, #0]
 800bb50:	7019      	strb	r1, [r3, #0]
 800bb52:	e7cf      	b.n	800baf4 <_puts_r+0x30>
 800bb54:	4622      	mov	r2, r4
 800bb56:	4628      	mov	r0, r5
 800bb58:	f000 f828 	bl	800bbac <__swbuf_r>
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d1c9      	bne.n	800baf4 <_puts_r+0x30>
 800bb60:	e7e9      	b.n	800bb36 <_puts_r+0x72>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	200a      	movs	r0, #10
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	6022      	str	r2, [r4, #0]
 800bb6a:	7018      	strb	r0, [r3, #0]
 800bb6c:	e7e5      	b.n	800bb3a <_puts_r+0x76>
 800bb6e:	bf00      	nop
 800bb70:	0800ca6c 	.word	0x0800ca6c
 800bb74:	0800ca8c 	.word	0x0800ca8c
 800bb78:	0800ca4c 	.word	0x0800ca4c

0800bb7c <puts>:
 800bb7c:	4b02      	ldr	r3, [pc, #8]	; (800bb88 <puts+0xc>)
 800bb7e:	4601      	mov	r1, r0
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	f7ff bf9f 	b.w	800bac4 <_puts_r>
 800bb86:	bf00      	nop
 800bb88:	2000002c 	.word	0x2000002c

0800bb8c <_sbrk_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4c06      	ldr	r4, [pc, #24]	; (800bba8 <_sbrk_r+0x1c>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4605      	mov	r5, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	f7f5 f8a8 	bl	8000cec <_sbrk>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_sbrk_r+0x1a>
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_sbrk_r+0x1a>
 800bba4:	602b      	str	r3, [r5, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	20011380 	.word	0x20011380

0800bbac <__swbuf_r>:
 800bbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbae:	460e      	mov	r6, r1
 800bbb0:	4614      	mov	r4, r2
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	b118      	cbz	r0, 800bbbe <__swbuf_r+0x12>
 800bbb6:	6983      	ldr	r3, [r0, #24]
 800bbb8:	b90b      	cbnz	r3, 800bbbe <__swbuf_r+0x12>
 800bbba:	f000 f9a7 	bl	800bf0c <__sinit>
 800bbbe:	4b21      	ldr	r3, [pc, #132]	; (800bc44 <__swbuf_r+0x98>)
 800bbc0:	429c      	cmp	r4, r3
 800bbc2:	d12a      	bne.n	800bc1a <__swbuf_r+0x6e>
 800bbc4:	686c      	ldr	r4, [r5, #4]
 800bbc6:	69a3      	ldr	r3, [r4, #24]
 800bbc8:	60a3      	str	r3, [r4, #8]
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	071a      	lsls	r2, r3, #28
 800bbce:	d52e      	bpl.n	800bc2e <__swbuf_r+0x82>
 800bbd0:	6923      	ldr	r3, [r4, #16]
 800bbd2:	b363      	cbz	r3, 800bc2e <__swbuf_r+0x82>
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	6820      	ldr	r0, [r4, #0]
 800bbd8:	1ac0      	subs	r0, r0, r3
 800bbda:	6963      	ldr	r3, [r4, #20]
 800bbdc:	b2f6      	uxtb	r6, r6
 800bbde:	4283      	cmp	r3, r0
 800bbe0:	4637      	mov	r7, r6
 800bbe2:	dc04      	bgt.n	800bbee <__swbuf_r+0x42>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f000 f926 	bl	800be38 <_fflush_r>
 800bbec:	bb28      	cbnz	r0, 800bc3a <__swbuf_r+0x8e>
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	60a3      	str	r3, [r4, #8]
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	6022      	str	r2, [r4, #0]
 800bbfa:	701e      	strb	r6, [r3, #0]
 800bbfc:	6963      	ldr	r3, [r4, #20]
 800bbfe:	3001      	adds	r0, #1
 800bc00:	4283      	cmp	r3, r0
 800bc02:	d004      	beq.n	800bc0e <__swbuf_r+0x62>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	07db      	lsls	r3, r3, #31
 800bc08:	d519      	bpl.n	800bc3e <__swbuf_r+0x92>
 800bc0a:	2e0a      	cmp	r6, #10
 800bc0c:	d117      	bne.n	800bc3e <__swbuf_r+0x92>
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4628      	mov	r0, r5
 800bc12:	f000 f911 	bl	800be38 <_fflush_r>
 800bc16:	b190      	cbz	r0, 800bc3e <__swbuf_r+0x92>
 800bc18:	e00f      	b.n	800bc3a <__swbuf_r+0x8e>
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <__swbuf_r+0x9c>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	d101      	bne.n	800bc24 <__swbuf_r+0x78>
 800bc20:	68ac      	ldr	r4, [r5, #8]
 800bc22:	e7d0      	b.n	800bbc6 <__swbuf_r+0x1a>
 800bc24:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <__swbuf_r+0xa0>)
 800bc26:	429c      	cmp	r4, r3
 800bc28:	bf08      	it	eq
 800bc2a:	68ec      	ldreq	r4, [r5, #12]
 800bc2c:	e7cb      	b.n	800bbc6 <__swbuf_r+0x1a>
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 f80d 	bl	800bc50 <__swsetup_r>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d0cc      	beq.n	800bbd4 <__swbuf_r+0x28>
 800bc3a:	f04f 37ff 	mov.w	r7, #4294967295
 800bc3e:	4638      	mov	r0, r7
 800bc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc42:	bf00      	nop
 800bc44:	0800ca6c 	.word	0x0800ca6c
 800bc48:	0800ca8c 	.word	0x0800ca8c
 800bc4c:	0800ca4c 	.word	0x0800ca4c

0800bc50 <__swsetup_r>:
 800bc50:	4b32      	ldr	r3, [pc, #200]	; (800bd1c <__swsetup_r+0xcc>)
 800bc52:	b570      	push	{r4, r5, r6, lr}
 800bc54:	681d      	ldr	r5, [r3, #0]
 800bc56:	4606      	mov	r6, r0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	b125      	cbz	r5, 800bc66 <__swsetup_r+0x16>
 800bc5c:	69ab      	ldr	r3, [r5, #24]
 800bc5e:	b913      	cbnz	r3, 800bc66 <__swsetup_r+0x16>
 800bc60:	4628      	mov	r0, r5
 800bc62:	f000 f953 	bl	800bf0c <__sinit>
 800bc66:	4b2e      	ldr	r3, [pc, #184]	; (800bd20 <__swsetup_r+0xd0>)
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	d10f      	bne.n	800bc8c <__swsetup_r+0x3c>
 800bc6c:	686c      	ldr	r4, [r5, #4]
 800bc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	0715      	lsls	r5, r2, #28
 800bc76:	d42c      	bmi.n	800bcd2 <__swsetup_r+0x82>
 800bc78:	06d0      	lsls	r0, r2, #27
 800bc7a:	d411      	bmi.n	800bca0 <__swsetup_r+0x50>
 800bc7c:	2209      	movs	r2, #9
 800bc7e:	6032      	str	r2, [r6, #0]
 800bc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8a:	e03e      	b.n	800bd0a <__swsetup_r+0xba>
 800bc8c:	4b25      	ldr	r3, [pc, #148]	; (800bd24 <__swsetup_r+0xd4>)
 800bc8e:	429c      	cmp	r4, r3
 800bc90:	d101      	bne.n	800bc96 <__swsetup_r+0x46>
 800bc92:	68ac      	ldr	r4, [r5, #8]
 800bc94:	e7eb      	b.n	800bc6e <__swsetup_r+0x1e>
 800bc96:	4b24      	ldr	r3, [pc, #144]	; (800bd28 <__swsetup_r+0xd8>)
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	bf08      	it	eq
 800bc9c:	68ec      	ldreq	r4, [r5, #12]
 800bc9e:	e7e6      	b.n	800bc6e <__swsetup_r+0x1e>
 800bca0:	0751      	lsls	r1, r2, #29
 800bca2:	d512      	bpl.n	800bcca <__swsetup_r+0x7a>
 800bca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bca6:	b141      	cbz	r1, 800bcba <__swsetup_r+0x6a>
 800bca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcac:	4299      	cmp	r1, r3
 800bcae:	d002      	beq.n	800bcb6 <__swsetup_r+0x66>
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f7ff fe47 	bl	800b944 <_free_r>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	6363      	str	r3, [r4, #52]	; 0x34
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6063      	str	r3, [r4, #4]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f043 0308 	orr.w	r3, r3, #8
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	b94b      	cbnz	r3, 800bcea <__swsetup_r+0x9a>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bce0:	d003      	beq.n	800bcea <__swsetup_r+0x9a>
 800bce2:	4621      	mov	r1, r4
 800bce4:	4630      	mov	r0, r6
 800bce6:	f000 f9bf 	bl	800c068 <__smakebuf_r>
 800bcea:	89a2      	ldrh	r2, [r4, #12]
 800bcec:	f012 0301 	ands.w	r3, r2, #1
 800bcf0:	d00c      	beq.n	800bd0c <__swsetup_r+0xbc>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60a3      	str	r3, [r4, #8]
 800bcf6:	6963      	ldr	r3, [r4, #20]
 800bcf8:	425b      	negs	r3, r3
 800bcfa:	61a3      	str	r3, [r4, #24]
 800bcfc:	6923      	ldr	r3, [r4, #16]
 800bcfe:	b953      	cbnz	r3, 800bd16 <__swsetup_r+0xc6>
 800bd00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bd08:	d1ba      	bne.n	800bc80 <__swsetup_r+0x30>
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	0792      	lsls	r2, r2, #30
 800bd0e:	bf58      	it	pl
 800bd10:	6963      	ldrpl	r3, [r4, #20]
 800bd12:	60a3      	str	r3, [r4, #8]
 800bd14:	e7f2      	b.n	800bcfc <__swsetup_r+0xac>
 800bd16:	2000      	movs	r0, #0
 800bd18:	e7f7      	b.n	800bd0a <__swsetup_r+0xba>
 800bd1a:	bf00      	nop
 800bd1c:	2000002c 	.word	0x2000002c
 800bd20:	0800ca6c 	.word	0x0800ca6c
 800bd24:	0800ca8c 	.word	0x0800ca8c
 800bd28:	0800ca4c 	.word	0x0800ca4c

0800bd2c <__sflush_r>:
 800bd2c:	898a      	ldrh	r2, [r1, #12]
 800bd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd32:	4605      	mov	r5, r0
 800bd34:	0710      	lsls	r0, r2, #28
 800bd36:	460c      	mov	r4, r1
 800bd38:	d458      	bmi.n	800bdec <__sflush_r+0xc0>
 800bd3a:	684b      	ldr	r3, [r1, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	dc05      	bgt.n	800bd4c <__sflush_r+0x20>
 800bd40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	dc02      	bgt.n	800bd4c <__sflush_r+0x20>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd4e:	2e00      	cmp	r6, #0
 800bd50:	d0f9      	beq.n	800bd46 <__sflush_r+0x1a>
 800bd52:	2300      	movs	r3, #0
 800bd54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd58:	682f      	ldr	r7, [r5, #0]
 800bd5a:	6a21      	ldr	r1, [r4, #32]
 800bd5c:	602b      	str	r3, [r5, #0]
 800bd5e:	d032      	beq.n	800bdc6 <__sflush_r+0x9a>
 800bd60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	075a      	lsls	r2, r3, #29
 800bd66:	d505      	bpl.n	800bd74 <__sflush_r+0x48>
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	1ac0      	subs	r0, r0, r3
 800bd6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd6e:	b10b      	cbz	r3, 800bd74 <__sflush_r+0x48>
 800bd70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd72:	1ac0      	subs	r0, r0, r3
 800bd74:	2300      	movs	r3, #0
 800bd76:	4602      	mov	r2, r0
 800bd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd7a:	6a21      	ldr	r1, [r4, #32]
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b0      	blx	r6
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	d106      	bne.n	800bd94 <__sflush_r+0x68>
 800bd86:	6829      	ldr	r1, [r5, #0]
 800bd88:	291d      	cmp	r1, #29
 800bd8a:	d848      	bhi.n	800be1e <__sflush_r+0xf2>
 800bd8c:	4a29      	ldr	r2, [pc, #164]	; (800be34 <__sflush_r+0x108>)
 800bd8e:	40ca      	lsrs	r2, r1
 800bd90:	07d6      	lsls	r6, r2, #31
 800bd92:	d544      	bpl.n	800be1e <__sflush_r+0xf2>
 800bd94:	2200      	movs	r2, #0
 800bd96:	6062      	str	r2, [r4, #4]
 800bd98:	04d9      	lsls	r1, r3, #19
 800bd9a:	6922      	ldr	r2, [r4, #16]
 800bd9c:	6022      	str	r2, [r4, #0]
 800bd9e:	d504      	bpl.n	800bdaa <__sflush_r+0x7e>
 800bda0:	1c42      	adds	r2, r0, #1
 800bda2:	d101      	bne.n	800bda8 <__sflush_r+0x7c>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b903      	cbnz	r3, 800bdaa <__sflush_r+0x7e>
 800bda8:	6560      	str	r0, [r4, #84]	; 0x54
 800bdaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdac:	602f      	str	r7, [r5, #0]
 800bdae:	2900      	cmp	r1, #0
 800bdb0:	d0c9      	beq.n	800bd46 <__sflush_r+0x1a>
 800bdb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdb6:	4299      	cmp	r1, r3
 800bdb8:	d002      	beq.n	800bdc0 <__sflush_r+0x94>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	f7ff fdc2 	bl	800b944 <_free_r>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	6360      	str	r0, [r4, #52]	; 0x34
 800bdc4:	e7c0      	b.n	800bd48 <__sflush_r+0x1c>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	4628      	mov	r0, r5
 800bdca:	47b0      	blx	r6
 800bdcc:	1c41      	adds	r1, r0, #1
 800bdce:	d1c8      	bne.n	800bd62 <__sflush_r+0x36>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0c5      	beq.n	800bd62 <__sflush_r+0x36>
 800bdd6:	2b1d      	cmp	r3, #29
 800bdd8:	d001      	beq.n	800bdde <__sflush_r+0xb2>
 800bdda:	2b16      	cmp	r3, #22
 800bddc:	d101      	bne.n	800bde2 <__sflush_r+0xb6>
 800bdde:	602f      	str	r7, [r5, #0]
 800bde0:	e7b1      	b.n	800bd46 <__sflush_r+0x1a>
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	e7ad      	b.n	800bd48 <__sflush_r+0x1c>
 800bdec:	690f      	ldr	r7, [r1, #16]
 800bdee:	2f00      	cmp	r7, #0
 800bdf0:	d0a9      	beq.n	800bd46 <__sflush_r+0x1a>
 800bdf2:	0793      	lsls	r3, r2, #30
 800bdf4:	680e      	ldr	r6, [r1, #0]
 800bdf6:	bf08      	it	eq
 800bdf8:	694b      	ldreq	r3, [r1, #20]
 800bdfa:	600f      	str	r7, [r1, #0]
 800bdfc:	bf18      	it	ne
 800bdfe:	2300      	movne	r3, #0
 800be00:	eba6 0807 	sub.w	r8, r6, r7
 800be04:	608b      	str	r3, [r1, #8]
 800be06:	f1b8 0f00 	cmp.w	r8, #0
 800be0a:	dd9c      	ble.n	800bd46 <__sflush_r+0x1a>
 800be0c:	4643      	mov	r3, r8
 800be0e:	463a      	mov	r2, r7
 800be10:	6a21      	ldr	r1, [r4, #32]
 800be12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be14:	4628      	mov	r0, r5
 800be16:	47b0      	blx	r6
 800be18:	2800      	cmp	r0, #0
 800be1a:	dc06      	bgt.n	800be2a <__sflush_r+0xfe>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	f04f 30ff 	mov.w	r0, #4294967295
 800be28:	e78e      	b.n	800bd48 <__sflush_r+0x1c>
 800be2a:	4407      	add	r7, r0
 800be2c:	eba8 0800 	sub.w	r8, r8, r0
 800be30:	e7e9      	b.n	800be06 <__sflush_r+0xda>
 800be32:	bf00      	nop
 800be34:	20400001 	.word	0x20400001

0800be38 <_fflush_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	690b      	ldr	r3, [r1, #16]
 800be3c:	4605      	mov	r5, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	b1db      	cbz	r3, 800be7a <_fflush_r+0x42>
 800be42:	b118      	cbz	r0, 800be4c <_fflush_r+0x14>
 800be44:	6983      	ldr	r3, [r0, #24]
 800be46:	b90b      	cbnz	r3, 800be4c <_fflush_r+0x14>
 800be48:	f000 f860 	bl	800bf0c <__sinit>
 800be4c:	4b0c      	ldr	r3, [pc, #48]	; (800be80 <_fflush_r+0x48>)
 800be4e:	429c      	cmp	r4, r3
 800be50:	d109      	bne.n	800be66 <_fflush_r+0x2e>
 800be52:	686c      	ldr	r4, [r5, #4]
 800be54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be58:	b17b      	cbz	r3, 800be7a <_fflush_r+0x42>
 800be5a:	4621      	mov	r1, r4
 800be5c:	4628      	mov	r0, r5
 800be5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be62:	f7ff bf63 	b.w	800bd2c <__sflush_r>
 800be66:	4b07      	ldr	r3, [pc, #28]	; (800be84 <_fflush_r+0x4c>)
 800be68:	429c      	cmp	r4, r3
 800be6a:	d101      	bne.n	800be70 <_fflush_r+0x38>
 800be6c:	68ac      	ldr	r4, [r5, #8]
 800be6e:	e7f1      	b.n	800be54 <_fflush_r+0x1c>
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <_fflush_r+0x50>)
 800be72:	429c      	cmp	r4, r3
 800be74:	bf08      	it	eq
 800be76:	68ec      	ldreq	r4, [r5, #12]
 800be78:	e7ec      	b.n	800be54 <_fflush_r+0x1c>
 800be7a:	2000      	movs	r0, #0
 800be7c:	bd38      	pop	{r3, r4, r5, pc}
 800be7e:	bf00      	nop
 800be80:	0800ca6c 	.word	0x0800ca6c
 800be84:	0800ca8c 	.word	0x0800ca8c
 800be88:	0800ca4c 	.word	0x0800ca4c

0800be8c <std>:
 800be8c:	2300      	movs	r3, #0
 800be8e:	b510      	push	{r4, lr}
 800be90:	4604      	mov	r4, r0
 800be92:	e9c0 3300 	strd	r3, r3, [r0]
 800be96:	6083      	str	r3, [r0, #8]
 800be98:	8181      	strh	r1, [r0, #12]
 800be9a:	6643      	str	r3, [r0, #100]	; 0x64
 800be9c:	81c2      	strh	r2, [r0, #14]
 800be9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bea2:	6183      	str	r3, [r0, #24]
 800bea4:	4619      	mov	r1, r3
 800bea6:	2208      	movs	r2, #8
 800bea8:	305c      	adds	r0, #92	; 0x5c
 800beaa:	f7ff fd42 	bl	800b932 <memset>
 800beae:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <std+0x38>)
 800beb0:	6263      	str	r3, [r4, #36]	; 0x24
 800beb2:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <std+0x3c>)
 800beb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800beb6:	4b05      	ldr	r3, [pc, #20]	; (800becc <std+0x40>)
 800beb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beba:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <std+0x44>)
 800bebc:	6224      	str	r4, [r4, #32]
 800bebe:	6323      	str	r3, [r4, #48]	; 0x30
 800bec0:	bd10      	pop	{r4, pc}
 800bec2:	bf00      	nop
 800bec4:	0800c67d 	.word	0x0800c67d
 800bec8:	0800c69f 	.word	0x0800c69f
 800becc:	0800c6d7 	.word	0x0800c6d7
 800bed0:	0800c6fb 	.word	0x0800c6fb

0800bed4 <_cleanup_r>:
 800bed4:	4901      	ldr	r1, [pc, #4]	; (800bedc <_cleanup_r+0x8>)
 800bed6:	f000 b885 	b.w	800bfe4 <_fwalk_reent>
 800beda:	bf00      	nop
 800bedc:	0800be39 	.word	0x0800be39

0800bee0 <__sfmoreglue>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	1e4a      	subs	r2, r1, #1
 800bee4:	2568      	movs	r5, #104	; 0x68
 800bee6:	4355      	muls	r5, r2
 800bee8:	460e      	mov	r6, r1
 800beea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800beee:	f7ff fd77 	bl	800b9e0 <_malloc_r>
 800bef2:	4604      	mov	r4, r0
 800bef4:	b140      	cbz	r0, 800bf08 <__sfmoreglue+0x28>
 800bef6:	2100      	movs	r1, #0
 800bef8:	e9c0 1600 	strd	r1, r6, [r0]
 800befc:	300c      	adds	r0, #12
 800befe:	60a0      	str	r0, [r4, #8]
 800bf00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf04:	f7ff fd15 	bl	800b932 <memset>
 800bf08:	4620      	mov	r0, r4
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}

0800bf0c <__sinit>:
 800bf0c:	6983      	ldr	r3, [r0, #24]
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	4604      	mov	r4, r0
 800bf12:	bb33      	cbnz	r3, 800bf62 <__sinit+0x56>
 800bf14:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bf18:	6503      	str	r3, [r0, #80]	; 0x50
 800bf1a:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <__sinit+0x58>)
 800bf1c:	4a12      	ldr	r2, [pc, #72]	; (800bf68 <__sinit+0x5c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6282      	str	r2, [r0, #40]	; 0x28
 800bf22:	4298      	cmp	r0, r3
 800bf24:	bf04      	itt	eq
 800bf26:	2301      	moveq	r3, #1
 800bf28:	6183      	streq	r3, [r0, #24]
 800bf2a:	f000 f81f 	bl	800bf6c <__sfp>
 800bf2e:	6060      	str	r0, [r4, #4]
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 f81b 	bl	800bf6c <__sfp>
 800bf36:	60a0      	str	r0, [r4, #8]
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f000 f817 	bl	800bf6c <__sfp>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	60e0      	str	r0, [r4, #12]
 800bf42:	2104      	movs	r1, #4
 800bf44:	6860      	ldr	r0, [r4, #4]
 800bf46:	f7ff ffa1 	bl	800be8c <std>
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	2109      	movs	r1, #9
 800bf4e:	68a0      	ldr	r0, [r4, #8]
 800bf50:	f7ff ff9c 	bl	800be8c <std>
 800bf54:	2202      	movs	r2, #2
 800bf56:	2112      	movs	r1, #18
 800bf58:	68e0      	ldr	r0, [r4, #12]
 800bf5a:	f7ff ff97 	bl	800be8c <std>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	61a3      	str	r3, [r4, #24]
 800bf62:	bd10      	pop	{r4, pc}
 800bf64:	0800ca48 	.word	0x0800ca48
 800bf68:	0800bed5 	.word	0x0800bed5

0800bf6c <__sfp>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	4b1b      	ldr	r3, [pc, #108]	; (800bfdc <__sfp+0x70>)
 800bf70:	681e      	ldr	r6, [r3, #0]
 800bf72:	69b3      	ldr	r3, [r6, #24]
 800bf74:	4607      	mov	r7, r0
 800bf76:	b913      	cbnz	r3, 800bf7e <__sfp+0x12>
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7ff ffc7 	bl	800bf0c <__sinit>
 800bf7e:	3648      	adds	r6, #72	; 0x48
 800bf80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	d503      	bpl.n	800bf90 <__sfp+0x24>
 800bf88:	6833      	ldr	r3, [r6, #0]
 800bf8a:	b133      	cbz	r3, 800bf9a <__sfp+0x2e>
 800bf8c:	6836      	ldr	r6, [r6, #0]
 800bf8e:	e7f7      	b.n	800bf80 <__sfp+0x14>
 800bf90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf94:	b16d      	cbz	r5, 800bfb2 <__sfp+0x46>
 800bf96:	3468      	adds	r4, #104	; 0x68
 800bf98:	e7f4      	b.n	800bf84 <__sfp+0x18>
 800bf9a:	2104      	movs	r1, #4
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	f7ff ff9f 	bl	800bee0 <__sfmoreglue>
 800bfa2:	6030      	str	r0, [r6, #0]
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1f1      	bne.n	800bf8c <__sfp+0x20>
 800bfa8:	230c      	movs	r3, #12
 800bfaa:	603b      	str	r3, [r7, #0]
 800bfac:	4604      	mov	r4, r0
 800bfae:	4620      	mov	r0, r4
 800bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb2:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <__sfp+0x74>)
 800bfb4:	6665      	str	r5, [r4, #100]	; 0x64
 800bfb6:	e9c4 5500 	strd	r5, r5, [r4]
 800bfba:	60a5      	str	r5, [r4, #8]
 800bfbc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bfc0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bfc4:	2208      	movs	r2, #8
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfcc:	f7ff fcb1 	bl	800b932 <memset>
 800bfd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfd8:	e7e9      	b.n	800bfae <__sfp+0x42>
 800bfda:	bf00      	nop
 800bfdc:	0800ca48 	.word	0x0800ca48
 800bfe0:	ffff0001 	.word	0xffff0001

0800bfe4 <_fwalk_reent>:
 800bfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe8:	4680      	mov	r8, r0
 800bfea:	4689      	mov	r9, r1
 800bfec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bff0:	2600      	movs	r6, #0
 800bff2:	b914      	cbnz	r4, 800bffa <_fwalk_reent+0x16>
 800bff4:	4630      	mov	r0, r6
 800bff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bffa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bffe:	3f01      	subs	r7, #1
 800c000:	d501      	bpl.n	800c006 <_fwalk_reent+0x22>
 800c002:	6824      	ldr	r4, [r4, #0]
 800c004:	e7f5      	b.n	800bff2 <_fwalk_reent+0xe>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d907      	bls.n	800c01c <_fwalk_reent+0x38>
 800c00c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c010:	3301      	adds	r3, #1
 800c012:	d003      	beq.n	800c01c <_fwalk_reent+0x38>
 800c014:	4629      	mov	r1, r5
 800c016:	4640      	mov	r0, r8
 800c018:	47c8      	blx	r9
 800c01a:	4306      	orrs	r6, r0
 800c01c:	3568      	adds	r5, #104	; 0x68
 800c01e:	e7ee      	b.n	800bffe <_fwalk_reent+0x1a>

0800c020 <__swhatbuf_r>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	460e      	mov	r6, r1
 800c024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c028:	2900      	cmp	r1, #0
 800c02a:	b096      	sub	sp, #88	; 0x58
 800c02c:	4614      	mov	r4, r2
 800c02e:	461d      	mov	r5, r3
 800c030:	da07      	bge.n	800c042 <__swhatbuf_r+0x22>
 800c032:	2300      	movs	r3, #0
 800c034:	602b      	str	r3, [r5, #0]
 800c036:	89b3      	ldrh	r3, [r6, #12]
 800c038:	061a      	lsls	r2, r3, #24
 800c03a:	d410      	bmi.n	800c05e <__swhatbuf_r+0x3e>
 800c03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c040:	e00e      	b.n	800c060 <__swhatbuf_r+0x40>
 800c042:	466a      	mov	r2, sp
 800c044:	f000 fb80 	bl	800c748 <_fstat_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	dbf2      	blt.n	800c032 <__swhatbuf_r+0x12>
 800c04c:	9a01      	ldr	r2, [sp, #4]
 800c04e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c052:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c056:	425a      	negs	r2, r3
 800c058:	415a      	adcs	r2, r3
 800c05a:	602a      	str	r2, [r5, #0]
 800c05c:	e7ee      	b.n	800c03c <__swhatbuf_r+0x1c>
 800c05e:	2340      	movs	r3, #64	; 0x40
 800c060:	2000      	movs	r0, #0
 800c062:	6023      	str	r3, [r4, #0]
 800c064:	b016      	add	sp, #88	; 0x58
 800c066:	bd70      	pop	{r4, r5, r6, pc}

0800c068 <__smakebuf_r>:
 800c068:	898b      	ldrh	r3, [r1, #12]
 800c06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c06c:	079d      	lsls	r5, r3, #30
 800c06e:	4606      	mov	r6, r0
 800c070:	460c      	mov	r4, r1
 800c072:	d507      	bpl.n	800c084 <__smakebuf_r+0x1c>
 800c074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	6123      	str	r3, [r4, #16]
 800c07c:	2301      	movs	r3, #1
 800c07e:	6163      	str	r3, [r4, #20]
 800c080:	b002      	add	sp, #8
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	ab01      	add	r3, sp, #4
 800c086:	466a      	mov	r2, sp
 800c088:	f7ff ffca 	bl	800c020 <__swhatbuf_r>
 800c08c:	9900      	ldr	r1, [sp, #0]
 800c08e:	4605      	mov	r5, r0
 800c090:	4630      	mov	r0, r6
 800c092:	f7ff fca5 	bl	800b9e0 <_malloc_r>
 800c096:	b948      	cbnz	r0, 800c0ac <__smakebuf_r+0x44>
 800c098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c09c:	059a      	lsls	r2, r3, #22
 800c09e:	d4ef      	bmi.n	800c080 <__smakebuf_r+0x18>
 800c0a0:	f023 0303 	bic.w	r3, r3, #3
 800c0a4:	f043 0302 	orr.w	r3, r3, #2
 800c0a8:	81a3      	strh	r3, [r4, #12]
 800c0aa:	e7e3      	b.n	800c074 <__smakebuf_r+0xc>
 800c0ac:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <__smakebuf_r+0x7c>)
 800c0ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	6020      	str	r0, [r4, #0]
 800c0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	9b00      	ldr	r3, [sp, #0]
 800c0bc:	6163      	str	r3, [r4, #20]
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	6120      	str	r0, [r4, #16]
 800c0c2:	b15b      	cbz	r3, 800c0dc <__smakebuf_r+0x74>
 800c0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f000 fb4f 	bl	800c76c <_isatty_r>
 800c0ce:	b128      	cbz	r0, 800c0dc <__smakebuf_r+0x74>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	f023 0303 	bic.w	r3, r3, #3
 800c0d6:	f043 0301 	orr.w	r3, r3, #1
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	431d      	orrs	r5, r3
 800c0e0:	81a5      	strh	r5, [r4, #12]
 800c0e2:	e7cd      	b.n	800c080 <__smakebuf_r+0x18>
 800c0e4:	0800bed5 	.word	0x0800bed5

0800c0e8 <__malloc_lock>:
 800c0e8:	4770      	bx	lr

0800c0ea <__malloc_unlock>:
 800c0ea:	4770      	bx	lr

0800c0ec <__sfputc_r>:
 800c0ec:	6893      	ldr	r3, [r2, #8]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	b410      	push	{r4}
 800c0f4:	6093      	str	r3, [r2, #8]
 800c0f6:	da08      	bge.n	800c10a <__sfputc_r+0x1e>
 800c0f8:	6994      	ldr	r4, [r2, #24]
 800c0fa:	42a3      	cmp	r3, r4
 800c0fc:	db01      	blt.n	800c102 <__sfputc_r+0x16>
 800c0fe:	290a      	cmp	r1, #10
 800c100:	d103      	bne.n	800c10a <__sfputc_r+0x1e>
 800c102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c106:	f7ff bd51 	b.w	800bbac <__swbuf_r>
 800c10a:	6813      	ldr	r3, [r2, #0]
 800c10c:	1c58      	adds	r0, r3, #1
 800c10e:	6010      	str	r0, [r2, #0]
 800c110:	7019      	strb	r1, [r3, #0]
 800c112:	4608      	mov	r0, r1
 800c114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <__sfputs_r>:
 800c11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11c:	4606      	mov	r6, r0
 800c11e:	460f      	mov	r7, r1
 800c120:	4614      	mov	r4, r2
 800c122:	18d5      	adds	r5, r2, r3
 800c124:	42ac      	cmp	r4, r5
 800c126:	d101      	bne.n	800c12c <__sfputs_r+0x12>
 800c128:	2000      	movs	r0, #0
 800c12a:	e007      	b.n	800c13c <__sfputs_r+0x22>
 800c12c:	463a      	mov	r2, r7
 800c12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff ffda 	bl	800c0ec <__sfputc_r>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d1f3      	bne.n	800c124 <__sfputs_r+0xa>
 800c13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c140 <_vfiprintf_r>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	460c      	mov	r4, r1
 800c146:	b09d      	sub	sp, #116	; 0x74
 800c148:	4617      	mov	r7, r2
 800c14a:	461d      	mov	r5, r3
 800c14c:	4606      	mov	r6, r0
 800c14e:	b118      	cbz	r0, 800c158 <_vfiprintf_r+0x18>
 800c150:	6983      	ldr	r3, [r0, #24]
 800c152:	b90b      	cbnz	r3, 800c158 <_vfiprintf_r+0x18>
 800c154:	f7ff feda 	bl	800bf0c <__sinit>
 800c158:	4b7c      	ldr	r3, [pc, #496]	; (800c34c <_vfiprintf_r+0x20c>)
 800c15a:	429c      	cmp	r4, r3
 800c15c:	d158      	bne.n	800c210 <_vfiprintf_r+0xd0>
 800c15e:	6874      	ldr	r4, [r6, #4]
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	0718      	lsls	r0, r3, #28
 800c164:	d55e      	bpl.n	800c224 <_vfiprintf_r+0xe4>
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d05b      	beq.n	800c224 <_vfiprintf_r+0xe4>
 800c16c:	2300      	movs	r3, #0
 800c16e:	9309      	str	r3, [sp, #36]	; 0x24
 800c170:	2320      	movs	r3, #32
 800c172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c176:	2330      	movs	r3, #48	; 0x30
 800c178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c17c:	9503      	str	r5, [sp, #12]
 800c17e:	f04f 0b01 	mov.w	fp, #1
 800c182:	46b8      	mov	r8, r7
 800c184:	4645      	mov	r5, r8
 800c186:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c18a:	b10b      	cbz	r3, 800c190 <_vfiprintf_r+0x50>
 800c18c:	2b25      	cmp	r3, #37	; 0x25
 800c18e:	d154      	bne.n	800c23a <_vfiprintf_r+0xfa>
 800c190:	ebb8 0a07 	subs.w	sl, r8, r7
 800c194:	d00b      	beq.n	800c1ae <_vfiprintf_r+0x6e>
 800c196:	4653      	mov	r3, sl
 800c198:	463a      	mov	r2, r7
 800c19a:	4621      	mov	r1, r4
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff ffbc 	bl	800c11a <__sfputs_r>
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f000 80c2 	beq.w	800c32c <_vfiprintf_r+0x1ec>
 800c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1aa:	4453      	add	r3, sl
 800c1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ae:	f898 3000 	ldrb.w	r3, [r8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 80ba 	beq.w	800c32c <_vfiprintf_r+0x1ec>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	9307      	str	r3, [sp, #28]
 800c1c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c1cc:	46a8      	mov	r8, r5
 800c1ce:	2205      	movs	r2, #5
 800c1d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c1d4:	485e      	ldr	r0, [pc, #376]	; (800c350 <_vfiprintf_r+0x210>)
 800c1d6:	f7f4 f823 	bl	8000220 <memchr>
 800c1da:	9b04      	ldr	r3, [sp, #16]
 800c1dc:	bb78      	cbnz	r0, 800c23e <_vfiprintf_r+0xfe>
 800c1de:	06d9      	lsls	r1, r3, #27
 800c1e0:	bf44      	itt	mi
 800c1e2:	2220      	movmi	r2, #32
 800c1e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1e8:	071a      	lsls	r2, r3, #28
 800c1ea:	bf44      	itt	mi
 800c1ec:	222b      	movmi	r2, #43	; 0x2b
 800c1ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1f2:	782a      	ldrb	r2, [r5, #0]
 800c1f4:	2a2a      	cmp	r2, #42	; 0x2a
 800c1f6:	d02a      	beq.n	800c24e <_vfiprintf_r+0x10e>
 800c1f8:	9a07      	ldr	r2, [sp, #28]
 800c1fa:	46a8      	mov	r8, r5
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	250a      	movs	r5, #10
 800c200:	4641      	mov	r1, r8
 800c202:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c206:	3b30      	subs	r3, #48	; 0x30
 800c208:	2b09      	cmp	r3, #9
 800c20a:	d969      	bls.n	800c2e0 <_vfiprintf_r+0x1a0>
 800c20c:	b360      	cbz	r0, 800c268 <_vfiprintf_r+0x128>
 800c20e:	e024      	b.n	800c25a <_vfiprintf_r+0x11a>
 800c210:	4b50      	ldr	r3, [pc, #320]	; (800c354 <_vfiprintf_r+0x214>)
 800c212:	429c      	cmp	r4, r3
 800c214:	d101      	bne.n	800c21a <_vfiprintf_r+0xda>
 800c216:	68b4      	ldr	r4, [r6, #8]
 800c218:	e7a2      	b.n	800c160 <_vfiprintf_r+0x20>
 800c21a:	4b4f      	ldr	r3, [pc, #316]	; (800c358 <_vfiprintf_r+0x218>)
 800c21c:	429c      	cmp	r4, r3
 800c21e:	bf08      	it	eq
 800c220:	68f4      	ldreq	r4, [r6, #12]
 800c222:	e79d      	b.n	800c160 <_vfiprintf_r+0x20>
 800c224:	4621      	mov	r1, r4
 800c226:	4630      	mov	r0, r6
 800c228:	f7ff fd12 	bl	800bc50 <__swsetup_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d09d      	beq.n	800c16c <_vfiprintf_r+0x2c>
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	b01d      	add	sp, #116	; 0x74
 800c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23a:	46a8      	mov	r8, r5
 800c23c:	e7a2      	b.n	800c184 <_vfiprintf_r+0x44>
 800c23e:	4a44      	ldr	r2, [pc, #272]	; (800c350 <_vfiprintf_r+0x210>)
 800c240:	1a80      	subs	r0, r0, r2
 800c242:	fa0b f000 	lsl.w	r0, fp, r0
 800c246:	4318      	orrs	r0, r3
 800c248:	9004      	str	r0, [sp, #16]
 800c24a:	4645      	mov	r5, r8
 800c24c:	e7be      	b.n	800c1cc <_vfiprintf_r+0x8c>
 800c24e:	9a03      	ldr	r2, [sp, #12]
 800c250:	1d11      	adds	r1, r2, #4
 800c252:	6812      	ldr	r2, [r2, #0]
 800c254:	9103      	str	r1, [sp, #12]
 800c256:	2a00      	cmp	r2, #0
 800c258:	db01      	blt.n	800c25e <_vfiprintf_r+0x11e>
 800c25a:	9207      	str	r2, [sp, #28]
 800c25c:	e004      	b.n	800c268 <_vfiprintf_r+0x128>
 800c25e:	4252      	negs	r2, r2
 800c260:	f043 0302 	orr.w	r3, r3, #2
 800c264:	9207      	str	r2, [sp, #28]
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	f898 3000 	ldrb.w	r3, [r8]
 800c26c:	2b2e      	cmp	r3, #46	; 0x2e
 800c26e:	d10e      	bne.n	800c28e <_vfiprintf_r+0x14e>
 800c270:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c274:	2b2a      	cmp	r3, #42	; 0x2a
 800c276:	d138      	bne.n	800c2ea <_vfiprintf_r+0x1aa>
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	1d1a      	adds	r2, r3, #4
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	9203      	str	r2, [sp, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	bfb8      	it	lt
 800c284:	f04f 33ff 	movlt.w	r3, #4294967295
 800c288:	f108 0802 	add.w	r8, r8, #2
 800c28c:	9305      	str	r3, [sp, #20]
 800c28e:	4d33      	ldr	r5, [pc, #204]	; (800c35c <_vfiprintf_r+0x21c>)
 800c290:	f898 1000 	ldrb.w	r1, [r8]
 800c294:	2203      	movs	r2, #3
 800c296:	4628      	mov	r0, r5
 800c298:	f7f3 ffc2 	bl	8000220 <memchr>
 800c29c:	b140      	cbz	r0, 800c2b0 <_vfiprintf_r+0x170>
 800c29e:	2340      	movs	r3, #64	; 0x40
 800c2a0:	1b40      	subs	r0, r0, r5
 800c2a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	4303      	orrs	r3, r0
 800c2aa:	f108 0801 	add.w	r8, r8, #1
 800c2ae:	9304      	str	r3, [sp, #16]
 800c2b0:	f898 1000 	ldrb.w	r1, [r8]
 800c2b4:	482a      	ldr	r0, [pc, #168]	; (800c360 <_vfiprintf_r+0x220>)
 800c2b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2ba:	2206      	movs	r2, #6
 800c2bc:	f108 0701 	add.w	r7, r8, #1
 800c2c0:	f7f3 ffae 	bl	8000220 <memchr>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d037      	beq.n	800c338 <_vfiprintf_r+0x1f8>
 800c2c8:	4b26      	ldr	r3, [pc, #152]	; (800c364 <_vfiprintf_r+0x224>)
 800c2ca:	bb1b      	cbnz	r3, 800c314 <_vfiprintf_r+0x1d4>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	3307      	adds	r3, #7
 800c2d0:	f023 0307 	bic.w	r3, r3, #7
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2da:	444b      	add	r3, r9
 800c2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2de:	e750      	b.n	800c182 <_vfiprintf_r+0x42>
 800c2e0:	fb05 3202 	mla	r2, r5, r2, r3
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	4688      	mov	r8, r1
 800c2e8:	e78a      	b.n	800c200 <_vfiprintf_r+0xc0>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f108 0801 	add.w	r8, r8, #1
 800c2f0:	9305      	str	r3, [sp, #20]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	250a      	movs	r5, #10
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2fc:	3a30      	subs	r2, #48	; 0x30
 800c2fe:	2a09      	cmp	r2, #9
 800c300:	d903      	bls.n	800c30a <_vfiprintf_r+0x1ca>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0c3      	beq.n	800c28e <_vfiprintf_r+0x14e>
 800c306:	9105      	str	r1, [sp, #20]
 800c308:	e7c1      	b.n	800c28e <_vfiprintf_r+0x14e>
 800c30a:	fb05 2101 	mla	r1, r5, r1, r2
 800c30e:	2301      	movs	r3, #1
 800c310:	4680      	mov	r8, r0
 800c312:	e7f0      	b.n	800c2f6 <_vfiprintf_r+0x1b6>
 800c314:	ab03      	add	r3, sp, #12
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	4622      	mov	r2, r4
 800c31a:	4b13      	ldr	r3, [pc, #76]	; (800c368 <_vfiprintf_r+0x228>)
 800c31c:	a904      	add	r1, sp, #16
 800c31e:	4630      	mov	r0, r6
 800c320:	f3af 8000 	nop.w
 800c324:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c328:	4681      	mov	r9, r0
 800c32a:	d1d5      	bne.n	800c2d8 <_vfiprintf_r+0x198>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	065b      	lsls	r3, r3, #25
 800c330:	f53f af7e 	bmi.w	800c230 <_vfiprintf_r+0xf0>
 800c334:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c336:	e77d      	b.n	800c234 <_vfiprintf_r+0xf4>
 800c338:	ab03      	add	r3, sp, #12
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	4622      	mov	r2, r4
 800c33e:	4b0a      	ldr	r3, [pc, #40]	; (800c368 <_vfiprintf_r+0x228>)
 800c340:	a904      	add	r1, sp, #16
 800c342:	4630      	mov	r0, r6
 800c344:	f000 f888 	bl	800c458 <_printf_i>
 800c348:	e7ec      	b.n	800c324 <_vfiprintf_r+0x1e4>
 800c34a:	bf00      	nop
 800c34c:	0800ca6c 	.word	0x0800ca6c
 800c350:	0800caac 	.word	0x0800caac
 800c354:	0800ca8c 	.word	0x0800ca8c
 800c358:	0800ca4c 	.word	0x0800ca4c
 800c35c:	0800cab2 	.word	0x0800cab2
 800c360:	0800cab6 	.word	0x0800cab6
 800c364:	00000000 	.word	0x00000000
 800c368:	0800c11b 	.word	0x0800c11b

0800c36c <_printf_common>:
 800c36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c370:	4691      	mov	r9, r2
 800c372:	461f      	mov	r7, r3
 800c374:	688a      	ldr	r2, [r1, #8]
 800c376:	690b      	ldr	r3, [r1, #16]
 800c378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c37c:	4293      	cmp	r3, r2
 800c37e:	bfb8      	it	lt
 800c380:	4613      	movlt	r3, r2
 800c382:	f8c9 3000 	str.w	r3, [r9]
 800c386:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c38a:	4606      	mov	r6, r0
 800c38c:	460c      	mov	r4, r1
 800c38e:	b112      	cbz	r2, 800c396 <_printf_common+0x2a>
 800c390:	3301      	adds	r3, #1
 800c392:	f8c9 3000 	str.w	r3, [r9]
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	0699      	lsls	r1, r3, #26
 800c39a:	bf42      	ittt	mi
 800c39c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c3a0:	3302      	addmi	r3, #2
 800c3a2:	f8c9 3000 	strmi.w	r3, [r9]
 800c3a6:	6825      	ldr	r5, [r4, #0]
 800c3a8:	f015 0506 	ands.w	r5, r5, #6
 800c3ac:	d107      	bne.n	800c3be <_printf_common+0x52>
 800c3ae:	f104 0a19 	add.w	sl, r4, #25
 800c3b2:	68e3      	ldr	r3, [r4, #12]
 800c3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800c3b8:	1a9b      	subs	r3, r3, r2
 800c3ba:	42ab      	cmp	r3, r5
 800c3bc:	dc28      	bgt.n	800c410 <_printf_common+0xa4>
 800c3be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c3c2:	6822      	ldr	r2, [r4, #0]
 800c3c4:	3300      	adds	r3, #0
 800c3c6:	bf18      	it	ne
 800c3c8:	2301      	movne	r3, #1
 800c3ca:	0692      	lsls	r2, r2, #26
 800c3cc:	d42d      	bmi.n	800c42a <_printf_common+0xbe>
 800c3ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	47c0      	blx	r8
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d020      	beq.n	800c41e <_printf_common+0xb2>
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	68e5      	ldr	r5, [r4, #12]
 800c3e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c3e4:	f003 0306 	and.w	r3, r3, #6
 800c3e8:	2b04      	cmp	r3, #4
 800c3ea:	bf08      	it	eq
 800c3ec:	1aad      	subeq	r5, r5, r2
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	bf0c      	ite	eq
 800c3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3f8:	2500      	movne	r5, #0
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	bfc4      	itt	gt
 800c3fe:	1a9b      	subgt	r3, r3, r2
 800c400:	18ed      	addgt	r5, r5, r3
 800c402:	f04f 0900 	mov.w	r9, #0
 800c406:	341a      	adds	r4, #26
 800c408:	454d      	cmp	r5, r9
 800c40a:	d11a      	bne.n	800c442 <_printf_common+0xd6>
 800c40c:	2000      	movs	r0, #0
 800c40e:	e008      	b.n	800c422 <_printf_common+0xb6>
 800c410:	2301      	movs	r3, #1
 800c412:	4652      	mov	r2, sl
 800c414:	4639      	mov	r1, r7
 800c416:	4630      	mov	r0, r6
 800c418:	47c0      	blx	r8
 800c41a:	3001      	adds	r0, #1
 800c41c:	d103      	bne.n	800c426 <_printf_common+0xba>
 800c41e:	f04f 30ff 	mov.w	r0, #4294967295
 800c422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c426:	3501      	adds	r5, #1
 800c428:	e7c3      	b.n	800c3b2 <_printf_common+0x46>
 800c42a:	18e1      	adds	r1, r4, r3
 800c42c:	1c5a      	adds	r2, r3, #1
 800c42e:	2030      	movs	r0, #48	; 0x30
 800c430:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c434:	4422      	add	r2, r4
 800c436:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c43a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c43e:	3302      	adds	r3, #2
 800c440:	e7c5      	b.n	800c3ce <_printf_common+0x62>
 800c442:	2301      	movs	r3, #1
 800c444:	4622      	mov	r2, r4
 800c446:	4639      	mov	r1, r7
 800c448:	4630      	mov	r0, r6
 800c44a:	47c0      	blx	r8
 800c44c:	3001      	adds	r0, #1
 800c44e:	d0e6      	beq.n	800c41e <_printf_common+0xb2>
 800c450:	f109 0901 	add.w	r9, r9, #1
 800c454:	e7d8      	b.n	800c408 <_printf_common+0x9c>
	...

0800c458 <_printf_i>:
 800c458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c45c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c460:	460c      	mov	r4, r1
 800c462:	7e09      	ldrb	r1, [r1, #24]
 800c464:	b085      	sub	sp, #20
 800c466:	296e      	cmp	r1, #110	; 0x6e
 800c468:	4617      	mov	r7, r2
 800c46a:	4606      	mov	r6, r0
 800c46c:	4698      	mov	r8, r3
 800c46e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c470:	f000 80b3 	beq.w	800c5da <_printf_i+0x182>
 800c474:	d822      	bhi.n	800c4bc <_printf_i+0x64>
 800c476:	2963      	cmp	r1, #99	; 0x63
 800c478:	d036      	beq.n	800c4e8 <_printf_i+0x90>
 800c47a:	d80a      	bhi.n	800c492 <_printf_i+0x3a>
 800c47c:	2900      	cmp	r1, #0
 800c47e:	f000 80b9 	beq.w	800c5f4 <_printf_i+0x19c>
 800c482:	2958      	cmp	r1, #88	; 0x58
 800c484:	f000 8083 	beq.w	800c58e <_printf_i+0x136>
 800c488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c48c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c490:	e032      	b.n	800c4f8 <_printf_i+0xa0>
 800c492:	2964      	cmp	r1, #100	; 0x64
 800c494:	d001      	beq.n	800c49a <_printf_i+0x42>
 800c496:	2969      	cmp	r1, #105	; 0x69
 800c498:	d1f6      	bne.n	800c488 <_printf_i+0x30>
 800c49a:	6820      	ldr	r0, [r4, #0]
 800c49c:	6813      	ldr	r3, [r2, #0]
 800c49e:	0605      	lsls	r5, r0, #24
 800c4a0:	f103 0104 	add.w	r1, r3, #4
 800c4a4:	d52a      	bpl.n	800c4fc <_printf_i+0xa4>
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6011      	str	r1, [r2, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	da03      	bge.n	800c4b6 <_printf_i+0x5e>
 800c4ae:	222d      	movs	r2, #45	; 0x2d
 800c4b0:	425b      	negs	r3, r3
 800c4b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c4b6:	486f      	ldr	r0, [pc, #444]	; (800c674 <_printf_i+0x21c>)
 800c4b8:	220a      	movs	r2, #10
 800c4ba:	e039      	b.n	800c530 <_printf_i+0xd8>
 800c4bc:	2973      	cmp	r1, #115	; 0x73
 800c4be:	f000 809d 	beq.w	800c5fc <_printf_i+0x1a4>
 800c4c2:	d808      	bhi.n	800c4d6 <_printf_i+0x7e>
 800c4c4:	296f      	cmp	r1, #111	; 0x6f
 800c4c6:	d020      	beq.n	800c50a <_printf_i+0xb2>
 800c4c8:	2970      	cmp	r1, #112	; 0x70
 800c4ca:	d1dd      	bne.n	800c488 <_printf_i+0x30>
 800c4cc:	6823      	ldr	r3, [r4, #0]
 800c4ce:	f043 0320 	orr.w	r3, r3, #32
 800c4d2:	6023      	str	r3, [r4, #0]
 800c4d4:	e003      	b.n	800c4de <_printf_i+0x86>
 800c4d6:	2975      	cmp	r1, #117	; 0x75
 800c4d8:	d017      	beq.n	800c50a <_printf_i+0xb2>
 800c4da:	2978      	cmp	r1, #120	; 0x78
 800c4dc:	d1d4      	bne.n	800c488 <_printf_i+0x30>
 800c4de:	2378      	movs	r3, #120	; 0x78
 800c4e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4e4:	4864      	ldr	r0, [pc, #400]	; (800c678 <_printf_i+0x220>)
 800c4e6:	e055      	b.n	800c594 <_printf_i+0x13c>
 800c4e8:	6813      	ldr	r3, [r2, #0]
 800c4ea:	1d19      	adds	r1, r3, #4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6011      	str	r1, [r2, #0]
 800c4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e08c      	b.n	800c616 <_printf_i+0x1be>
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6011      	str	r1, [r2, #0]
 800c500:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c504:	bf18      	it	ne
 800c506:	b21b      	sxthne	r3, r3
 800c508:	e7cf      	b.n	800c4aa <_printf_i+0x52>
 800c50a:	6813      	ldr	r3, [r2, #0]
 800c50c:	6825      	ldr	r5, [r4, #0]
 800c50e:	1d18      	adds	r0, r3, #4
 800c510:	6010      	str	r0, [r2, #0]
 800c512:	0628      	lsls	r0, r5, #24
 800c514:	d501      	bpl.n	800c51a <_printf_i+0xc2>
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	e002      	b.n	800c520 <_printf_i+0xc8>
 800c51a:	0668      	lsls	r0, r5, #25
 800c51c:	d5fb      	bpl.n	800c516 <_printf_i+0xbe>
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	4854      	ldr	r0, [pc, #336]	; (800c674 <_printf_i+0x21c>)
 800c522:	296f      	cmp	r1, #111	; 0x6f
 800c524:	bf14      	ite	ne
 800c526:	220a      	movne	r2, #10
 800c528:	2208      	moveq	r2, #8
 800c52a:	2100      	movs	r1, #0
 800c52c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c530:	6865      	ldr	r5, [r4, #4]
 800c532:	60a5      	str	r5, [r4, #8]
 800c534:	2d00      	cmp	r5, #0
 800c536:	f2c0 8095 	blt.w	800c664 <_printf_i+0x20c>
 800c53a:	6821      	ldr	r1, [r4, #0]
 800c53c:	f021 0104 	bic.w	r1, r1, #4
 800c540:	6021      	str	r1, [r4, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d13d      	bne.n	800c5c2 <_printf_i+0x16a>
 800c546:	2d00      	cmp	r5, #0
 800c548:	f040 808e 	bne.w	800c668 <_printf_i+0x210>
 800c54c:	4665      	mov	r5, ip
 800c54e:	2a08      	cmp	r2, #8
 800c550:	d10b      	bne.n	800c56a <_printf_i+0x112>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	07db      	lsls	r3, r3, #31
 800c556:	d508      	bpl.n	800c56a <_printf_i+0x112>
 800c558:	6923      	ldr	r3, [r4, #16]
 800c55a:	6862      	ldr	r2, [r4, #4]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	bfde      	ittt	le
 800c560:	2330      	movle	r3, #48	; 0x30
 800c562:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c56a:	ebac 0305 	sub.w	r3, ip, r5
 800c56e:	6123      	str	r3, [r4, #16]
 800c570:	f8cd 8000 	str.w	r8, [sp]
 800c574:	463b      	mov	r3, r7
 800c576:	aa03      	add	r2, sp, #12
 800c578:	4621      	mov	r1, r4
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7ff fef6 	bl	800c36c <_printf_common>
 800c580:	3001      	adds	r0, #1
 800c582:	d14d      	bne.n	800c620 <_printf_i+0x1c8>
 800c584:	f04f 30ff 	mov.w	r0, #4294967295
 800c588:	b005      	add	sp, #20
 800c58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c58e:	4839      	ldr	r0, [pc, #228]	; (800c674 <_printf_i+0x21c>)
 800c590:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c594:	6813      	ldr	r3, [r2, #0]
 800c596:	6821      	ldr	r1, [r4, #0]
 800c598:	1d1d      	adds	r5, r3, #4
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6015      	str	r5, [r2, #0]
 800c59e:	060a      	lsls	r2, r1, #24
 800c5a0:	d50b      	bpl.n	800c5ba <_printf_i+0x162>
 800c5a2:	07ca      	lsls	r2, r1, #31
 800c5a4:	bf44      	itt	mi
 800c5a6:	f041 0120 	orrmi.w	r1, r1, #32
 800c5aa:	6021      	strmi	r1, [r4, #0]
 800c5ac:	b91b      	cbnz	r3, 800c5b6 <_printf_i+0x15e>
 800c5ae:	6822      	ldr	r2, [r4, #0]
 800c5b0:	f022 0220 	bic.w	r2, r2, #32
 800c5b4:	6022      	str	r2, [r4, #0]
 800c5b6:	2210      	movs	r2, #16
 800c5b8:	e7b7      	b.n	800c52a <_printf_i+0xd2>
 800c5ba:	064d      	lsls	r5, r1, #25
 800c5bc:	bf48      	it	mi
 800c5be:	b29b      	uxthmi	r3, r3
 800c5c0:	e7ef      	b.n	800c5a2 <_printf_i+0x14a>
 800c5c2:	4665      	mov	r5, ip
 800c5c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5c8:	fb02 3311 	mls	r3, r2, r1, r3
 800c5cc:	5cc3      	ldrb	r3, [r0, r3]
 800c5ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	d1f5      	bne.n	800c5c4 <_printf_i+0x16c>
 800c5d8:	e7b9      	b.n	800c54e <_printf_i+0xf6>
 800c5da:	6813      	ldr	r3, [r2, #0]
 800c5dc:	6825      	ldr	r5, [r4, #0]
 800c5de:	6961      	ldr	r1, [r4, #20]
 800c5e0:	1d18      	adds	r0, r3, #4
 800c5e2:	6010      	str	r0, [r2, #0]
 800c5e4:	0628      	lsls	r0, r5, #24
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	d501      	bpl.n	800c5ee <_printf_i+0x196>
 800c5ea:	6019      	str	r1, [r3, #0]
 800c5ec:	e002      	b.n	800c5f4 <_printf_i+0x19c>
 800c5ee:	066a      	lsls	r2, r5, #25
 800c5f0:	d5fb      	bpl.n	800c5ea <_printf_i+0x192>
 800c5f2:	8019      	strh	r1, [r3, #0]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	6123      	str	r3, [r4, #16]
 800c5f8:	4665      	mov	r5, ip
 800c5fa:	e7b9      	b.n	800c570 <_printf_i+0x118>
 800c5fc:	6813      	ldr	r3, [r2, #0]
 800c5fe:	1d19      	adds	r1, r3, #4
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	681d      	ldr	r5, [r3, #0]
 800c604:	6862      	ldr	r2, [r4, #4]
 800c606:	2100      	movs	r1, #0
 800c608:	4628      	mov	r0, r5
 800c60a:	f7f3 fe09 	bl	8000220 <memchr>
 800c60e:	b108      	cbz	r0, 800c614 <_printf_i+0x1bc>
 800c610:	1b40      	subs	r0, r0, r5
 800c612:	6060      	str	r0, [r4, #4]
 800c614:	6863      	ldr	r3, [r4, #4]
 800c616:	6123      	str	r3, [r4, #16]
 800c618:	2300      	movs	r3, #0
 800c61a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c61e:	e7a7      	b.n	800c570 <_printf_i+0x118>
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	462a      	mov	r2, r5
 800c624:	4639      	mov	r1, r7
 800c626:	4630      	mov	r0, r6
 800c628:	47c0      	blx	r8
 800c62a:	3001      	adds	r0, #1
 800c62c:	d0aa      	beq.n	800c584 <_printf_i+0x12c>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	079b      	lsls	r3, r3, #30
 800c632:	d413      	bmi.n	800c65c <_printf_i+0x204>
 800c634:	68e0      	ldr	r0, [r4, #12]
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	4298      	cmp	r0, r3
 800c63a:	bfb8      	it	lt
 800c63c:	4618      	movlt	r0, r3
 800c63e:	e7a3      	b.n	800c588 <_printf_i+0x130>
 800c640:	2301      	movs	r3, #1
 800c642:	464a      	mov	r2, r9
 800c644:	4639      	mov	r1, r7
 800c646:	4630      	mov	r0, r6
 800c648:	47c0      	blx	r8
 800c64a:	3001      	adds	r0, #1
 800c64c:	d09a      	beq.n	800c584 <_printf_i+0x12c>
 800c64e:	3501      	adds	r5, #1
 800c650:	68e3      	ldr	r3, [r4, #12]
 800c652:	9a03      	ldr	r2, [sp, #12]
 800c654:	1a9b      	subs	r3, r3, r2
 800c656:	42ab      	cmp	r3, r5
 800c658:	dcf2      	bgt.n	800c640 <_printf_i+0x1e8>
 800c65a:	e7eb      	b.n	800c634 <_printf_i+0x1dc>
 800c65c:	2500      	movs	r5, #0
 800c65e:	f104 0919 	add.w	r9, r4, #25
 800c662:	e7f5      	b.n	800c650 <_printf_i+0x1f8>
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1ac      	bne.n	800c5c2 <_printf_i+0x16a>
 800c668:	7803      	ldrb	r3, [r0, #0]
 800c66a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c66e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c672:	e76c      	b.n	800c54e <_printf_i+0xf6>
 800c674:	0800cabd 	.word	0x0800cabd
 800c678:	0800cace 	.word	0x0800cace

0800c67c <__sread>:
 800c67c:	b510      	push	{r4, lr}
 800c67e:	460c      	mov	r4, r1
 800c680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c684:	f000 f894 	bl	800c7b0 <_read_r>
 800c688:	2800      	cmp	r0, #0
 800c68a:	bfab      	itete	ge
 800c68c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c68e:	89a3      	ldrhlt	r3, [r4, #12]
 800c690:	181b      	addge	r3, r3, r0
 800c692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c696:	bfac      	ite	ge
 800c698:	6563      	strge	r3, [r4, #84]	; 0x54
 800c69a:	81a3      	strhlt	r3, [r4, #12]
 800c69c:	bd10      	pop	{r4, pc}

0800c69e <__swrite>:
 800c69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a2:	461f      	mov	r7, r3
 800c6a4:	898b      	ldrh	r3, [r1, #12]
 800c6a6:	05db      	lsls	r3, r3, #23
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	4616      	mov	r6, r2
 800c6ae:	d505      	bpl.n	800c6bc <__swrite+0x1e>
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b8:	f000 f868 	bl	800c78c <_lseek_r>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	4632      	mov	r2, r6
 800c6ca:	463b      	mov	r3, r7
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d2:	f000 b817 	b.w	800c704 <_write_r>

0800c6d6 <__sseek>:
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	460c      	mov	r4, r1
 800c6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6de:	f000 f855 	bl	800c78c <_lseek_r>
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	bf15      	itete	ne
 800c6e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6f2:	81a3      	strheq	r3, [r4, #12]
 800c6f4:	bf18      	it	ne
 800c6f6:	81a3      	strhne	r3, [r4, #12]
 800c6f8:	bd10      	pop	{r4, pc}

0800c6fa <__sclose>:
 800c6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fe:	f000 b813 	b.w	800c728 <_close_r>
	...

0800c704 <_write_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4c07      	ldr	r4, [pc, #28]	; (800c724 <_write_r+0x20>)
 800c708:	4605      	mov	r5, r0
 800c70a:	4608      	mov	r0, r1
 800c70c:	4611      	mov	r1, r2
 800c70e:	2200      	movs	r2, #0
 800c710:	6022      	str	r2, [r4, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	f7f4 fa99 	bl	8000c4a <_write>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	d102      	bne.n	800c722 <_write_r+0x1e>
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	b103      	cbz	r3, 800c722 <_write_r+0x1e>
 800c720:	602b      	str	r3, [r5, #0]
 800c722:	bd38      	pop	{r3, r4, r5, pc}
 800c724:	20011380 	.word	0x20011380

0800c728 <_close_r>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	4c06      	ldr	r4, [pc, #24]	; (800c744 <_close_r+0x1c>)
 800c72c:	2300      	movs	r3, #0
 800c72e:	4605      	mov	r5, r0
 800c730:	4608      	mov	r0, r1
 800c732:	6023      	str	r3, [r4, #0]
 800c734:	f7f4 faa5 	bl	8000c82 <_close>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	d102      	bne.n	800c742 <_close_r+0x1a>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	b103      	cbz	r3, 800c742 <_close_r+0x1a>
 800c740:	602b      	str	r3, [r5, #0]
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	20011380 	.word	0x20011380

0800c748 <_fstat_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4c07      	ldr	r4, [pc, #28]	; (800c768 <_fstat_r+0x20>)
 800c74c:	2300      	movs	r3, #0
 800c74e:	4605      	mov	r5, r0
 800c750:	4608      	mov	r0, r1
 800c752:	4611      	mov	r1, r2
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	f7f4 faa0 	bl	8000c9a <_fstat>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d102      	bne.n	800c764 <_fstat_r+0x1c>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	b103      	cbz	r3, 800c764 <_fstat_r+0x1c>
 800c762:	602b      	str	r3, [r5, #0]
 800c764:	bd38      	pop	{r3, r4, r5, pc}
 800c766:	bf00      	nop
 800c768:	20011380 	.word	0x20011380

0800c76c <_isatty_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	4c06      	ldr	r4, [pc, #24]	; (800c788 <_isatty_r+0x1c>)
 800c770:	2300      	movs	r3, #0
 800c772:	4605      	mov	r5, r0
 800c774:	4608      	mov	r0, r1
 800c776:	6023      	str	r3, [r4, #0]
 800c778:	f7f4 fa9f 	bl	8000cba <_isatty>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d102      	bne.n	800c786 <_isatty_r+0x1a>
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	b103      	cbz	r3, 800c786 <_isatty_r+0x1a>
 800c784:	602b      	str	r3, [r5, #0]
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	20011380 	.word	0x20011380

0800c78c <_lseek_r>:
 800c78c:	b538      	push	{r3, r4, r5, lr}
 800c78e:	4c07      	ldr	r4, [pc, #28]	; (800c7ac <_lseek_r+0x20>)
 800c790:	4605      	mov	r5, r0
 800c792:	4608      	mov	r0, r1
 800c794:	4611      	mov	r1, r2
 800c796:	2200      	movs	r2, #0
 800c798:	6022      	str	r2, [r4, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	f7f4 fa98 	bl	8000cd0 <_lseek>
 800c7a0:	1c43      	adds	r3, r0, #1
 800c7a2:	d102      	bne.n	800c7aa <_lseek_r+0x1e>
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	b103      	cbz	r3, 800c7aa <_lseek_r+0x1e>
 800c7a8:	602b      	str	r3, [r5, #0]
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	20011380 	.word	0x20011380

0800c7b0 <_read_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	4c07      	ldr	r4, [pc, #28]	; (800c7d0 <_read_r+0x20>)
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	4608      	mov	r0, r1
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	6022      	str	r2, [r4, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	f7f4 fa26 	bl	8000c10 <_read>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d102      	bne.n	800c7ce <_read_r+0x1e>
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	b103      	cbz	r3, 800c7ce <_read_r+0x1e>
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	20011380 	.word	0x20011380

0800c7d4 <_init>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	bf00      	nop
 800c7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7da:	bc08      	pop	{r3}
 800c7dc:	469e      	mov	lr, r3
 800c7de:	4770      	bx	lr

0800c7e0 <_fini>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	bf00      	nop
 800c7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e6:	bc08      	pop	{r3}
 800c7e8:	469e      	mov	lr, r3
 800c7ea:	4770      	bx	lr
